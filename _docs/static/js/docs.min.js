/*!
 * Athena Framework v1.0.0-beta.8 (https://ucf.github.io/Athena-Framework)
 * Copyright 2017-2018 UCF Web Communications
 * Licensed under MIT
 */
var _typeof3 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * Athena Framework v1.0.0-beta.8 (https://ucf.github.io/Athena-Framework)
 * Copyright 2017-2018 UCF Web Communications
 * Licensed under MIT
 */
var _typeof2 = "function" == typeof Symbol && "symbol" == _typeof3(Symbol.iterator) ? function (t) {
  return typeof t === "undefined" ? "undefined" : _typeof3(t);
} : function (t) {
  return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof3(t);
};
/*!
 * Bootstrap v4.0.0-alpha.6 (https://getbootstrap.com)
 * Copyright 2011-2017 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */if ("undefined" == typeof jQuery) throw new Error("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");!function (t) {
  var e = jQuery.fn.jquery.split(" ")[0].split(".");if (e[0] < 2 && e[1] < 9 || 1 == e[0] && 9 == e[1] && e[2] < 1 || e[0] >= 4) throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0");
}(), function () {
  var t = "function" == typeof Symbol && "symbol" === _typeof2(Symbol.iterator) ? function (t) {
    return void 0 === t ? "undefined" : _typeof2(t);
  } : function (t) {
    return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : void 0 === t ? "undefined" : _typeof2(t);
  },
      e = function () {
    function t(t, e) {
      for (var n = 0; n < e.length; n++) {
        var i = e[n];i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
      }
    }return function (e, n, i) {
      return n && t(e.prototype, n), i && t(e, i), e;
    };
  }();function n(t, e) {
    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
  }var i,
      o,
      r,
      s,
      a,
      l,
      c,
      h,
      d,
      f,
      u,
      g,
      p,
      m,
      _,
      v,
      y,
      E,
      T,
      b,
      w,
      C,
      I,
      S,
      A,
      D,
      N,
      O,
      k,
      L,
      j,
      W,
      H,
      x,
      P,
      R,
      Q,
      M,
      B,
      K,
      F,
      U,
      V,
      Y,
      z,
      G,
      q,
      X,
      Z,
      J,
      $,
      tt,
      et,
      nt,
      it,
      ot,
      rt,
      st,
      at,
      lt,
      ct,
      ht,
      dt,
      ft,
      ut,
      gt,
      pt,
      mt,
      _t,
      vt,
      yt,
      Et,
      Tt,
      bt,
      wt,
      Ct,
      It,
      St,
      At,
      Dt,
      Nt,
      Ot,
      kt,
      Lt,
      jt,
      Wt,
      Ht,
      xt,
      Pt,
      Rt,
      Qt,
      Mt,
      Bt,
      Kt,
      Ft,
      Ut,
      Vt,
      Yt,
      zt,
      Gt,
      qt,
      Xt,
      Zt,
      Jt,
      $t,
      te,
      ee,
      ne,
      ie,
      oe,
      re,
      se,
      ae,
      le,
      ce,
      he,
      de,
      fe,
      ue,
      ge,
      pe,
      me,
      _e = function (t) {
    var e = !1,
        n = { WebkitTransition: "webkitTransitionEnd", MozTransition: "transitionend", OTransition: "oTransitionEnd otransitionend", transition: "transitionend" };function i(e) {
      var n = this,
          i = !1;return t(this).one(o.TRANSITION_END, function () {
        i = !0;
      }), setTimeout(function () {
        i || o.triggerTransitionEnd(n);
      }, e), this;
    }var o = { TRANSITION_END: "bsTransitionEnd", getUID: function getUID(t) {
        for (; t += ~~(1e6 * Math.random()), document.getElementById(t);) {}return t;
      }, getSelectorFromElement: function getSelectorFromElement(t) {
        var e = t.getAttribute("data-target");return e || (e = t.getAttribute("href") || "", e = /^#[a-z]/i.test(e) ? e : null), e;
      }, reflow: function reflow(t) {
        return t.offsetHeight;
      }, triggerTransitionEnd: function triggerTransitionEnd(n) {
        t(n).trigger(e.end);
      }, supportsTransitionEnd: function supportsTransitionEnd() {
        return Boolean(e);
      }, typeCheckConfig: function typeCheckConfig(t, e, n) {
        for (var i in n) {
          if (n.hasOwnProperty(i)) {
            var o = n[i],
                r = e[i],
                s = r && ((l = r)[0] || l).nodeType ? "element" : (a = r, {}.toString.call(a).match(/\s([a-zA-Z]+)/)[1].toLowerCase());if (!new RegExp(o).test(s)) throw new Error(t.toUpperCase() + ': Option "' + i + '" provided type "' + s + '" but expected type "' + o + '".');
          }
        }var a, l;
      } };return e = function () {
      if (window.QUnit) return !1;var t = document.createElement("bootstrap");for (var e in n) {
        if (void 0 !== t.style[e]) return { end: n[e] };
      }return !1;
    }(), t.fn.emulateTransitionEnd = i, o.supportsTransitionEnd() && (t.event.special[o.TRANSITION_END] = { bindType: e.end, delegateType: e.end, handle: function handle(e) {
        if (t(e.target).is(this)) return e.handleObj.handler.apply(this, arguments);
      } }), o;
  }(jQuery),
      ve = (i = jQuery, o = "alert", s = "." + (r = "bs.alert"), a = i.fn[o], l = { CLOSE: "close" + s, CLOSED: "closed" + s, CLICK_DATA_API: "click" + s + ".data-api" }, c = "alert", h = "fade", d = "show", f = function () {
    function t(e) {
      n(this, t), this._element = e;
    }return t.prototype.close = function (t) {
      t = t || this._element;var e = this._getRootElement(t);this._triggerCloseEvent(e).isDefaultPrevented() || this._removeElement(e);
    }, t.prototype.dispose = function () {
      i.removeData(this._element, r), this._element = null;
    }, t.prototype._getRootElement = function (t) {
      var e = _e.getSelectorFromElement(t),
          n = !1;return e && (n = i(e)[0]), n || (n = i(t).closest("." + c)[0]), n;
    }, t.prototype._triggerCloseEvent = function (t) {
      var e = i.Event(l.CLOSE);return i(t).trigger(e), e;
    }, t.prototype._removeElement = function (t) {
      var e = this;i(t).removeClass(d), _e.supportsTransitionEnd() && i(t).hasClass(h) ? i(t).one(_e.TRANSITION_END, function (n) {
        return e._destroyElement(t, n);
      }).emulateTransitionEnd(150) : this._destroyElement(t);
    }, t.prototype._destroyElement = function (t) {
      i(t).detach().trigger(l.CLOSED).remove();
    }, t._jQueryInterface = function (e) {
      return this.each(function () {
        var n = i(this),
            o = n.data(r);o || (o = new t(this), n.data(r, o)), "close" === e && o[e](this);
      });
    }, t._handleDismiss = function (t) {
      return function (e) {
        e && e.preventDefault(), t.close(this);
      };
    }, e(t, null, [{ key: "VERSION", get: function get() {
        return "4.0.0-alpha.6";
      } }]), t;
  }(), i(document).on(l.CLICK_DATA_API, '[data-dismiss="alert"]', f._handleDismiss(new f())), i.fn[o] = f._jQueryInterface, i.fn[o].Constructor = f, i.fn[o].noConflict = function () {
    return i.fn[o] = a, f._jQueryInterface;
  }, u = jQuery, g = "button", m = "." + (p = "bs.button"), _ = ".data-api", v = u.fn[g], y = "active", E = "btn", T = "focus", b = '[data-toggle^="button"]', w = '[data-toggle="buttons"]', C = "input", I = ".active", S = ".btn", A = { CLICK_DATA_API: "click" + m + _, FOCUS_BLUR_DATA_API: "focus" + m + _ + " blur" + m + _ }, D = function () {
    function t(e) {
      n(this, t), this._element = e;
    }return t.prototype.toggle = function () {
      var t = !0,
          e = u(this._element).closest(w)[0];if (e) {
        var n = u(this._element).find(C)[0];if (n) {
          if ("radio" === n.type) if (n.checked && u(this._element).hasClass(y)) t = !1;else {
            var i = u(e).find(I)[0];i && u(i).removeClass(y);
          }t && (n.checked = !u(this._element).hasClass(y), u(n).trigger("change")), n.focus();
        }
      }this._element.setAttribute("aria-pressed", !u(this._element).hasClass(y)), t && u(this._element).toggleClass(y);
    }, t.prototype.dispose = function () {
      u.removeData(this._element, p), this._element = null;
    }, t._jQueryInterface = function (e) {
      return this.each(function () {
        var n = u(this).data(p);n || (n = new t(this), u(this).data(p, n)), "toggle" === e && n[e]();
      });
    }, e(t, null, [{ key: "VERSION", get: function get() {
        return "4.0.0-alpha.6";
      } }]), t;
  }(), u(document).on(A.CLICK_DATA_API, b, function (t) {
    t.preventDefault();var e = t.target;u(e).hasClass(E) || (e = u(e).closest(S)), D._jQueryInterface.call(u(e), "toggle");
  }).on(A.FOCUS_BLUR_DATA_API, b, function (t) {
    var e = u(t.target).closest(S)[0];u(e).toggleClass(T, /^focus(in)?$/.test(t.type));
  }), u.fn[g] = D._jQueryInterface, u.fn[g].Constructor = D, u.fn[g].noConflict = function () {
    return u.fn[g] = v, D._jQueryInterface;
  }, N = jQuery, O = "collapse", L = "." + (k = "bs.collapse"), j = N.fn[O], W = { toggle: !0, parent: "" }, H = { toggle: "boolean", parent: "string" }, x = { SHOW: "show" + L, SHOWN: "shown" + L, HIDE: "hide" + L, HIDDEN: "hidden" + L, CLICK_DATA_API: "click" + L + ".data-api" }, P = "show", R = "collapse", Q = "collapsing", M = "collapsed", B = "width", K = "height", F = ".card > .show, .card > .collapsing", U = '[data-toggle="collapse"]', V = function () {
    function i(t, e) {
      n(this, i), this._isTransitioning = !1, this._element = t, this._config = this._getConfig(e), this._triggerArray = N.makeArray(N('[data-toggle="collapse"][href="#' + t.id + '"],[data-toggle="collapse"][data-target="#' + t.id + '"]')), this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle();
    }return i.prototype.toggle = function () {
      N(this._element).hasClass(P) ? this.hide() : this.show();
    }, i.prototype.show = function () {
      var t = this;if (this._isTransitioning) throw new Error("Collapse is transitioning");if (!N(this._element).hasClass(P)) {
        var e = void 0,
            n = void 0;if (this._parent && ((e = N.makeArray(N(this._parent).find(F))).length || (e = null)), !(e && (n = N(e).data(k)) && n._isTransitioning)) {
          var o = N.Event(x.SHOW);if (N(this._element).trigger(o), !o.isDefaultPrevented()) {
            e && (i._jQueryInterface.call(N(e), "hide"), n || N(e).data(k, null));var r = this._getDimension();N(this._element).removeClass(R).addClass(Q), this._element.style[r] = 0, this._element.setAttribute("aria-expanded", !0), this._triggerArray.length && N(this._triggerArray).removeClass(M).attr("aria-expanded", !0), this.setTransitioning(!0);var s = function s() {
              N(t._element).removeClass(Q).addClass(R).addClass(P), t._element.style[r] = "", t.setTransitioning(!1), N(t._element).trigger(x.SHOWN);
            };if (_e.supportsTransitionEnd()) {
              var a = "scroll" + (r[0].toUpperCase() + r.slice(1));N(this._element).one(_e.TRANSITION_END, s).emulateTransitionEnd(600), this._element.style[r] = this._element[a] + "px";
            } else s();
          }
        }
      }
    }, i.prototype.hide = function () {
      var t = this;if (this._isTransitioning) throw new Error("Collapse is transitioning");if (N(this._element).hasClass(P)) {
        var e = N.Event(x.HIDE);if (N(this._element).trigger(e), !e.isDefaultPrevented()) {
          var n = this._getDimension(),
              i = n === B ? "offsetWidth" : "offsetHeight";this._element.style[n] = this._element[i] + "px", _e.reflow(this._element), N(this._element).addClass(Q).removeClass(R).removeClass(P), this._element.setAttribute("aria-expanded", !1), this._triggerArray.length && N(this._triggerArray).addClass(M).attr("aria-expanded", !1), this.setTransitioning(!0);var o = function o() {
            t.setTransitioning(!1), N(t._element).removeClass(Q).addClass(R).trigger(x.HIDDEN);
          };this._element.style[n] = "", _e.supportsTransitionEnd() ? N(this._element).one(_e.TRANSITION_END, o).emulateTransitionEnd(600) : o();
        }
      }
    }, i.prototype.setTransitioning = function (t) {
      this._isTransitioning = t;
    }, i.prototype.dispose = function () {
      N.removeData(this._element, k), this._config = null, this._parent = null, this._element = null, this._triggerArray = null, this._isTransitioning = null;
    }, i.prototype._getConfig = function (t) {
      return (t = N.extend({}, W, t)).toggle = Boolean(t.toggle), _e.typeCheckConfig(O, t, H), t;
    }, i.prototype._getDimension = function () {
      return N(this._element).hasClass(B) ? B : K;
    }, i.prototype._getParent = function () {
      var t = this,
          e = N(this._config.parent)[0],
          n = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]';return N(e).find(n).each(function (e, n) {
        t._addAriaAndCollapsedClass(i._getTargetFromElement(n), [n]);
      }), e;
    }, i.prototype._addAriaAndCollapsedClass = function (t, e) {
      if (t) {
        var n = N(t).hasClass(P);t.setAttribute("aria-expanded", n), e.length && N(e).toggleClass(M, !n).attr("aria-expanded", n);
      }
    }, i._getTargetFromElement = function (t) {
      var e = _e.getSelectorFromElement(t);return e ? N(e)[0] : null;
    }, i._jQueryInterface = function (e) {
      return this.each(function () {
        var n = N(this),
            o = n.data(k),
            r = N.extend({}, W, n.data(), "object" === (void 0 === e ? "undefined" : t(e)) && e);if (!o && r.toggle && /show|hide/.test(e) && (r.toggle = !1), o || (o = new i(this, r), n.data(k, o)), "string" == typeof e) {
          if (void 0 === o[e]) throw new Error('No method named "' + e + '"');o[e]();
        }
      });
    }, e(i, null, [{ key: "VERSION", get: function get() {
        return "4.0.0-alpha.6";
      } }, { key: "Default", get: function get() {
        return W;
      } }]), i;
  }(), N(document).on(x.CLICK_DATA_API, U, function (t) {
    t.preventDefault();var e = V._getTargetFromElement(this),
        n = N(e).data(k) ? "toggle" : N(this).data();V._jQueryInterface.call(N(e), n);
  }), N.fn[O] = V._jQueryInterface, N.fn[O].Constructor = V, N.fn[O].noConflict = function () {
    return N.fn[O] = j, V._jQueryInterface;
  }, Y = jQuery, z = "dropdown", q = "." + (G = "bs.dropdown"), X = ".data-api", Z = Y.fn[z], J = { HIDE: "hide" + q, HIDDEN: "hidden" + q, SHOW: "show" + q, SHOWN: "shown" + q, CLICK: "click" + q, CLICK_DATA_API: "click" + q + X, FOCUSIN_DATA_API: "focusin" + q + X, KEYDOWN_DATA_API: "keydown" + q + X }, $ = "dropdown-backdrop", tt = "disabled", et = "show", nt = ".dropdown-backdrop", it = '[data-toggle="dropdown"]', ot = ".dropdown form", rt = '[role="menu"]', st = '[role="listbox"]', at = ".navbar-nav", lt = '[role="menu"] li:not(.disabled) a, [role="listbox"] li:not(.disabled) a', ct = function () {
    function t(e) {
      n(this, t), this._element = e, this._addEventListeners();
    }return t.prototype.toggle = function () {
      if (this.disabled || Y(this).hasClass(tt)) return !1;var e = t._getParentFromElement(this),
          n = Y(e).hasClass(et);if (t._clearMenus(), n) return !1;if ("ontouchstart" in document.documentElement && !Y(e).closest(at).length) {
        var i = document.createElement("div");i.className = $, Y(i).insertBefore(this), Y(i).on("click", t._clearMenus);
      }var o = { relatedTarget: this },
          r = Y.Event(J.SHOW, o);return Y(e).trigger(r), !r.isDefaultPrevented() && (this.focus(), this.setAttribute("aria-expanded", !0), Y(e).toggleClass(et), Y(e).trigger(Y.Event(J.SHOWN, o)), !1);
    }, t.prototype.dispose = function () {
      Y.removeData(this._element, G), Y(this._element).off(q), this._element = null;
    }, t.prototype._addEventListeners = function () {
      Y(this._element).on(J.CLICK, this.toggle);
    }, t._jQueryInterface = function (e) {
      return this.each(function () {
        var n = Y(this).data(G);if (n || (n = new t(this), Y(this).data(G, n)), "string" == typeof e) {
          if (void 0 === n[e]) throw new Error('No method named "' + e + '"');n[e].call(this);
        }
      });
    }, t._clearMenus = function (e) {
      if (!e || 3 !== e.which) {
        var n = Y(nt)[0];n && n.parentNode.removeChild(n);for (var i = Y.makeArray(Y(it)), o = 0; o < i.length; o++) {
          var r = t._getParentFromElement(i[o]),
              s = { relatedTarget: i[o] };if (Y(r).hasClass(et) && !(e && ("click" === e.type && /input|textarea/i.test(e.target.tagName) || "focusin" === e.type) && Y.contains(r, e.target))) {
            var a = Y.Event(J.HIDE, s);Y(r).trigger(a), a.isDefaultPrevented() || (i[o].setAttribute("aria-expanded", "false"), Y(r).removeClass(et).trigger(Y.Event(J.HIDDEN, s)));
          }
        }
      }
    }, t._getParentFromElement = function (t) {
      var e = void 0,
          n = _e.getSelectorFromElement(t);return n && (e = Y(n)[0]), e || t.parentNode;
    }, t._dataApiKeydownHandler = function (e) {
      if (/(38|40|27|32)/.test(e.which) && !/input|textarea/i.test(e.target.tagName) && (e.preventDefault(), e.stopPropagation(), !this.disabled && !Y(this).hasClass(tt))) {
        var n = t._getParentFromElement(this),
            i = Y(n).hasClass(et);if (!i && 27 !== e.which || i && 27 === e.which) {
          if (27 === e.which) {
            var o = Y(n).find(it)[0];Y(o).trigger("focus");
          }Y(this).trigger("click");
        } else {
          var r = Y(n).find(lt).get();if (r.length) {
            var s = r.indexOf(e.target);38 === e.which && s > 0 && s--, 40 === e.which && s < r.length - 1 && s++, s < 0 && (s = 0), r[s].focus();
          }
        }
      }
    }, e(t, null, [{ key: "VERSION", get: function get() {
        return "4.0.0-alpha.6";
      } }]), t;
  }(), Y(document).on(J.KEYDOWN_DATA_API, it, ct._dataApiKeydownHandler).on(J.KEYDOWN_DATA_API, rt, ct._dataApiKeydownHandler).on(J.KEYDOWN_DATA_API, st, ct._dataApiKeydownHandler).on(J.CLICK_DATA_API + " " + J.FOCUSIN_DATA_API, ct._clearMenus).on(J.CLICK_DATA_API, it, ct.prototype.toggle).on(J.CLICK_DATA_API, ot, function (t) {
    t.stopPropagation();
  }), Y.fn[z] = ct._jQueryInterface, Y.fn[z].Constructor = ct, Y.fn[z].noConflict = function () {
    return Y.fn[z] = Z, ct._jQueryInterface;
  }, ht = jQuery, dt = "modal", ut = "." + (ft = "bs.modal"), gt = ht.fn[dt], pt = { backdrop: !0, keyboard: !0, focus: !0, show: !0 }, mt = { backdrop: "(boolean|string)", keyboard: "boolean", focus: "boolean", show: "boolean" }, _t = { HIDE: "hide" + ut, HIDDEN: "hidden" + ut, SHOW: "show" + ut, SHOWN: "shown" + ut, FOCUSIN: "focusin" + ut, RESIZE: "resize" + ut, CLICK_DISMISS: "click.dismiss" + ut, KEYDOWN_DISMISS: "keydown.dismiss" + ut, MOUSEUP_DISMISS: "mouseup.dismiss" + ut, MOUSEDOWN_DISMISS: "mousedown.dismiss" + ut, CLICK_DATA_API: "click" + ut + ".data-api" }, vt = "modal-scrollbar-measure", yt = "modal-backdrop", Et = "modal-open", Tt = "fade", bt = "show", wt = { DIALOG: ".modal-dialog", DATA_TOGGLE: '[data-toggle="modal"]', DATA_DISMISS: '[data-dismiss="modal"]', FIXED_CONTENT: ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top" }, Ct = function () {
    function i(t, e) {
      n(this, i), this._config = this._getConfig(e), this._element = t, this._dialog = ht(t).find(wt.DIALOG)[0], this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, this._isTransitioning = !1, this._originalBodyPadding = 0, this._scrollbarWidth = 0;
    }return i.prototype.toggle = function (t) {
      return this._isShown ? this.hide() : this.show(t);
    }, i.prototype.show = function (t) {
      var e = this;if (this._isTransitioning) throw new Error("Modal is transitioning");_e.supportsTransitionEnd() && ht(this._element).hasClass(Tt) && (this._isTransitioning = !0);var n = ht.Event(_t.SHOW, { relatedTarget: t });ht(this._element).trigger(n), this._isShown || n.isDefaultPrevented() || (this._isShown = !0, this._checkScrollbar(), this._setScrollbar(), ht(document.body).addClass(Et), this._setEscapeEvent(), this._setResizeEvent(), ht(this._element).on(_t.CLICK_DISMISS, wt.DATA_DISMISS, function (t) {
        return e.hide(t);
      }), ht(this._dialog).on(_t.MOUSEDOWN_DISMISS, function () {
        ht(e._element).one(_t.MOUSEUP_DISMISS, function (t) {
          ht(t.target).is(e._element) && (e._ignoreBackdropClick = !0);
        });
      }), this._showBackdrop(function () {
        return e._showElement(t);
      }));
    }, i.prototype.hide = function (t) {
      var e = this;if (t && t.preventDefault(), this._isTransitioning) throw new Error("Modal is transitioning");var n = _e.supportsTransitionEnd() && ht(this._element).hasClass(Tt);n && (this._isTransitioning = !0);var i = ht.Event(_t.HIDE);ht(this._element).trigger(i), this._isShown && !i.isDefaultPrevented() && (this._isShown = !1, this._setEscapeEvent(), this._setResizeEvent(), ht(document).off(_t.FOCUSIN), ht(this._element).removeClass(bt), ht(this._element).off(_t.CLICK_DISMISS), ht(this._dialog).off(_t.MOUSEDOWN_DISMISS), n ? ht(this._element).one(_e.TRANSITION_END, function (t) {
        return e._hideModal(t);
      }).emulateTransitionEnd(300) : this._hideModal());
    }, i.prototype.dispose = function () {
      ht.removeData(this._element, ft), ht(window, document, this._element, this._backdrop).off(ut), this._config = null, this._element = null, this._dialog = null, this._backdrop = null, this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, this._originalBodyPadding = null, this._scrollbarWidth = null;
    }, i.prototype._getConfig = function (t) {
      return t = ht.extend({}, pt, t), _e.typeCheckConfig(dt, t, mt), t;
    }, i.prototype._showElement = function (t) {
      var e = this,
          n = _e.supportsTransitionEnd() && ht(this._element).hasClass(Tt);this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), this._element.scrollTop = 0, n && _e.reflow(this._element), ht(this._element).addClass(bt), this._config.focus && this._enforceFocus();var i = ht.Event(_t.SHOWN, { relatedTarget: t }),
          o = function o() {
        e._config.focus && e._element.focus(), e._isTransitioning = !1, ht(e._element).trigger(i);
      };n ? ht(this._dialog).one(_e.TRANSITION_END, o).emulateTransitionEnd(300) : o();
    }, i.prototype._enforceFocus = function () {
      var t = this;ht(document).off(_t.FOCUSIN).on(_t.FOCUSIN, function (e) {
        document === e.target || t._element === e.target || ht(t._element).has(e.target).length || t._element.focus();
      });
    }, i.prototype._setEscapeEvent = function () {
      var t = this;this._isShown && this._config.keyboard ? ht(this._element).on(_t.KEYDOWN_DISMISS, function (e) {
        27 === e.which && t.hide();
      }) : this._isShown || ht(this._element).off(_t.KEYDOWN_DISMISS);
    }, i.prototype._setResizeEvent = function () {
      var t = this;this._isShown ? ht(window).on(_t.RESIZE, function (e) {
        return t._handleUpdate(e);
      }) : ht(window).off(_t.RESIZE);
    }, i.prototype._hideModal = function () {
      var t = this;this._element.style.display = "none", this._element.setAttribute("aria-hidden", "true"), this._isTransitioning = !1, this._showBackdrop(function () {
        ht(document.body).removeClass(Et), t._resetAdjustments(), t._resetScrollbar(), ht(t._element).trigger(_t.HIDDEN);
      });
    }, i.prototype._removeBackdrop = function () {
      this._backdrop && (ht(this._backdrop).remove(), this._backdrop = null);
    }, i.prototype._showBackdrop = function (t) {
      var e = this,
          n = ht(this._element).hasClass(Tt) ? Tt : "";if (this._isShown && this._config.backdrop) {
        var i = _e.supportsTransitionEnd() && n;if (this._backdrop = document.createElement("div"), this._backdrop.className = yt, n && ht(this._backdrop).addClass(n), ht(this._backdrop).appendTo(document.body), ht(this._element).on(_t.CLICK_DISMISS, function (t) {
          e._ignoreBackdropClick ? e._ignoreBackdropClick = !1 : t.target === t.currentTarget && ("static" === e._config.backdrop ? e._element.focus() : e.hide());
        }), i && _e.reflow(this._backdrop), ht(this._backdrop).addClass(bt), !t) return;if (!i) return void t();ht(this._backdrop).one(_e.TRANSITION_END, t).emulateTransitionEnd(150);
      } else if (!this._isShown && this._backdrop) {
        ht(this._backdrop).removeClass(bt);var o = function o() {
          e._removeBackdrop(), t && t();
        };_e.supportsTransitionEnd() && ht(this._element).hasClass(Tt) ? ht(this._backdrop).one(_e.TRANSITION_END, o).emulateTransitionEnd(150) : o();
      } else t && t();
    }, i.prototype._handleUpdate = function () {
      this._adjustDialog();
    }, i.prototype._adjustDialog = function () {
      var t = this._element.scrollHeight > document.documentElement.clientHeight;!this._isBodyOverflowing && t && (this._element.style.paddingLeft = this._scrollbarWidth + "px"), this._isBodyOverflowing && !t && (this._element.style.paddingRight = this._scrollbarWidth + "px");
    }, i.prototype._resetAdjustments = function () {
      this._element.style.paddingLeft = "", this._element.style.paddingRight = "";
    }, i.prototype._checkScrollbar = function () {
      this._isBodyOverflowing = document.body.clientWidth < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth();
    }, i.prototype._setScrollbar = function () {
      var t = parseInt(ht(wt.FIXED_CONTENT).css("padding-right") || 0, 10);this._originalBodyPadding = document.body.style.paddingRight || "", this._isBodyOverflowing && (document.body.style.paddingRight = t + this._scrollbarWidth + "px");
    }, i.prototype._resetScrollbar = function () {
      document.body.style.paddingRight = this._originalBodyPadding;
    }, i.prototype._getScrollbarWidth = function () {
      var t = document.createElement("div");t.className = vt, document.body.appendChild(t);var e = t.offsetWidth - t.clientWidth;return document.body.removeChild(t), e;
    }, i._jQueryInterface = function (e, n) {
      return this.each(function () {
        var o = ht(this).data(ft),
            r = ht.extend({}, i.Default, ht(this).data(), "object" === (void 0 === e ? "undefined" : t(e)) && e);if (o || (o = new i(this, r), ht(this).data(ft, o)), "string" == typeof e) {
          if (void 0 === o[e]) throw new Error('No method named "' + e + '"');o[e](n);
        } else r.show && o.show(n);
      });
    }, e(i, null, [{ key: "VERSION", get: function get() {
        return "4.0.0-alpha.6";
      } }, { key: "Default", get: function get() {
        return pt;
      } }]), i;
  }(), ht(document).on(_t.CLICK_DATA_API, wt.DATA_TOGGLE, function (t) {
    var e = this,
        n = void 0,
        i = _e.getSelectorFromElement(this);i && (n = ht(i)[0]);var o = ht(n).data(ft) ? "toggle" : ht.extend({}, ht(n).data(), ht(this).data());"A" !== this.tagName && "AREA" !== this.tagName || t.preventDefault();var r = ht(n).one(_t.SHOW, function (t) {
      t.isDefaultPrevented() || r.one(_t.HIDDEN, function () {
        ht(e).is(":visible") && e.focus();
      });
    });Ct._jQueryInterface.call(ht(n), o, this);
  }), ht.fn[dt] = Ct._jQueryInterface, ht.fn[dt].Constructor = Ct, ht.fn[dt].noConflict = function () {
    return ht.fn[dt] = gt, Ct._jQueryInterface;
  }, It = jQuery, St = "scrollspy", Dt = "." + (At = "bs.scrollspy"), Nt = It.fn[St], Ot = { offset: 10, method: "auto", target: "" }, kt = { offset: "number", method: "string", target: "(string|element)" }, Lt = { ACTIVATE: "activate" + Dt, SCROLL: "scroll" + Dt, LOAD_DATA_API: "load" + Dt + ".data-api" }, jt = "dropdown-item", Wt = "active", Ht = { DATA_SPY: '[data-spy="scroll"]', ACTIVE: ".active", LIST_ITEM: ".list-item", LI: "li", LI_DROPDOWN: "li.dropdown", NAV_LINKS: ".nav-link", DROPDOWN: ".dropdown", DROPDOWN_ITEMS: ".dropdown-item", DROPDOWN_TOGGLE: ".dropdown-toggle" }, xt = "offset", Pt = "position", Rt = function () {
    function i(t, e) {
      var o = this;n(this, i), this._element = t, this._scrollElement = "BODY" === t.tagName ? window : t, this._config = this._getConfig(e), this._selector = this._config.target + " " + Ht.NAV_LINKS + "," + this._config.target + " " + Ht.DROPDOWN_ITEMS, this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, It(this._scrollElement).on(Lt.SCROLL, function (t) {
        return o._process(t);
      }), this.refresh(), this._process();
    }return i.prototype.refresh = function () {
      var t = this,
          e = this._scrollElement !== this._scrollElement.window ? Pt : xt,
          n = "auto" === this._config.method ? e : this._config.method,
          i = n === Pt ? this._getScrollTop() : 0;this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), It.makeArray(It(this._selector)).map(function (t) {
        var e = void 0,
            o = _e.getSelectorFromElement(t);return o && (e = It(o)[0]), e && (e.offsetWidth || e.offsetHeight) ? [It(e)[n]().top + i, o] : null;
      }).filter(function (t) {
        return t;
      }).sort(function (t, e) {
        return t[0] - e[0];
      }).forEach(function (e) {
        t._offsets.push(e[0]), t._targets.push(e[1]);
      });
    }, i.prototype.dispose = function () {
      It.removeData(this._element, At), It(this._scrollElement).off(Dt), this._element = null, this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null;
    }, i.prototype._getConfig = function (t) {
      if ("string" != typeof (t = It.extend({}, Ot, t)).target) {
        var e = It(t.target).attr("id");e || (e = _e.getUID(St), It(t.target).attr("id", e)), t.target = "#" + e;
      }return _e.typeCheckConfig(St, t, kt), t;
    }, i.prototype._getScrollTop = function () {
      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
    }, i.prototype._getScrollHeight = function () {
      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
    }, i.prototype._getOffsetHeight = function () {
      return this._scrollElement === window ? window.innerHeight : this._scrollElement.offsetHeight;
    }, i.prototype._process = function () {
      var t = this._getScrollTop() + this._config.offset,
          e = this._getScrollHeight(),
          n = this._config.offset + e - this._getOffsetHeight();if (this._scrollHeight !== e && this.refresh(), t >= n) {
        var i = this._targets[this._targets.length - 1];this._activeTarget !== i && this._activate(i);
      } else {
        if (this._activeTarget && t < this._offsets[0] && this._offsets[0] > 0) return this._activeTarget = null, void this._clear();for (var o = this._offsets.length; o--;) {
          this._activeTarget !== this._targets[o] && t >= this._offsets[o] && (void 0 === this._offsets[o + 1] || t < this._offsets[o + 1]) && this._activate(this._targets[o]);
        }
      }
    }, i.prototype._activate = function (t) {
      this._activeTarget = t, this._clear();var e = this._selector.split(",");e = e.map(function (e) {
        return e + '[data-target="' + t + '"],' + e + '[href="' + t + '"]';
      });var n = It(e.join(","));n.hasClass(jt) ? (n.closest(Ht.DROPDOWN).find(Ht.DROPDOWN_TOGGLE).addClass(Wt), n.addClass(Wt)) : n.parents(Ht.LI).find("> " + Ht.NAV_LINKS).addClass(Wt), It(this._scrollElement).trigger(Lt.ACTIVATE, { relatedTarget: t });
    }, i.prototype._clear = function () {
      It(this._selector).filter(Ht.ACTIVE).removeClass(Wt);
    }, i._jQueryInterface = function (e) {
      return this.each(function () {
        var n = It(this).data(At),
            o = "object" === (void 0 === e ? "undefined" : t(e)) && e;if (n || (n = new i(this, o), It(this).data(At, n)), "string" == typeof e) {
          if (void 0 === n[e]) throw new Error('No method named "' + e + '"');n[e]();
        }
      });
    }, e(i, null, [{ key: "VERSION", get: function get() {
        return "4.0.0-alpha.6";
      } }, { key: "Default", get: function get() {
        return Ot;
      } }]), i;
  }(), It(window).on(Lt.LOAD_DATA_API, function () {
    for (var t = It.makeArray(It(Ht.DATA_SPY)), e = t.length; e--;) {
      var n = It(t[e]);Rt._jQueryInterface.call(n, n.data());
    }
  }), It.fn[St] = Rt._jQueryInterface, It.fn[St].Constructor = Rt, It.fn[St].noConflict = function () {
    return It.fn[St] = Nt, Rt._jQueryInterface;
  }, Qt = jQuery, Bt = "." + (Mt = "bs.tab"), Kt = Qt.fn.tab, Ft = { HIDE: "hide" + Bt, HIDDEN: "hidden" + Bt, SHOW: "show" + Bt, SHOWN: "shown" + Bt, CLICK_DATA_API: "click" + Bt + ".data-api" }, Ut = "dropdown-menu", Vt = "active", Yt = "disabled", zt = "fade", Gt = "show", qt = ".dropdown", Xt = "ul:not(.dropdown-menu), ol:not(.dropdown-menu), nav:not(.dropdown-menu)", Zt = "> .nav-item .fade, > .fade", Jt = ".active", $t = "> .nav-item > .active, > .active", te = '[data-toggle="tab"], [data-toggle="pill"]', ee = ".dropdown-toggle", ne = "> .dropdown-menu .active", ie = function () {
    function t(e) {
      n(this, t), this._element = e;
    }return t.prototype.show = function () {
      var t = this;if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && Qt(this._element).hasClass(Vt) || Qt(this._element).hasClass(Yt))) {
        var e = void 0,
            n = void 0,
            i = Qt(this._element).closest(Xt)[0],
            o = _e.getSelectorFromElement(this._element);i && (n = (n = Qt.makeArray(Qt(i).find(Jt)))[n.length - 1]);var r = Qt.Event(Ft.HIDE, { relatedTarget: this._element }),
            s = Qt.Event(Ft.SHOW, { relatedTarget: n });if (n && Qt(n).trigger(r), Qt(this._element).trigger(s), !s.isDefaultPrevented() && !r.isDefaultPrevented()) {
          o && (e = Qt(o)[0]), this._activate(this._element, i);var a = function a() {
            var e = Qt.Event(Ft.HIDDEN, { relatedTarget: t._element }),
                i = Qt.Event(Ft.SHOWN, { relatedTarget: n });Qt(n).trigger(e), Qt(t._element).trigger(i);
          };e ? this._activate(e, e.parentNode, a) : a();
        }
      }
    }, t.prototype.dispose = function () {
      Qt.removeClass(this._element, Mt), this._element = null;
    }, t.prototype._activate = function (t, e, n) {
      var i = this,
          o = Qt(e).find($t)[0],
          r = n && _e.supportsTransitionEnd() && (o && Qt(o).hasClass(zt) || Boolean(Qt(e).find(Zt)[0])),
          s = function s() {
        return i._transitionComplete(t, o, r, n);
      };o && r ? Qt(o).one(_e.TRANSITION_END, s).emulateTransitionEnd(150) : s(), o && Qt(o).removeClass(Gt);
    }, t.prototype._transitionComplete = function (t, e, n, i) {
      if (e) {
        Qt(e).removeClass(Vt);var o = Qt(e.parentNode).find(ne)[0];o && Qt(o).removeClass(Vt), e.setAttribute("aria-expanded", !1);
      }if (Qt(t).addClass(Vt), t.setAttribute("aria-expanded", !0), n ? (_e.reflow(t), Qt(t).addClass(Gt)) : Qt(t).removeClass(zt), t.parentNode && Qt(t.parentNode).hasClass(Ut)) {
        var r = Qt(t).closest(qt)[0];r && Qt(r).find(ee).addClass(Vt), t.setAttribute("aria-expanded", !0);
      }i && i();
    }, t._jQueryInterface = function (e) {
      return this.each(function () {
        var n = Qt(this),
            i = n.data(Mt);if (i || (i = new t(this), n.data(Mt, i)), "string" == typeof e) {
          if (void 0 === i[e]) throw new Error('No method named "' + e + '"');i[e]();
        }
      });
    }, e(t, null, [{ key: "VERSION", get: function get() {
        return "4.0.0-alpha.6";
      } }]), t;
  }(), Qt(document).on(Ft.CLICK_DATA_API, te, function (t) {
    t.preventDefault(), ie._jQueryInterface.call(Qt(this), "show");
  }), Qt.fn.tab = ie._jQueryInterface, Qt.fn.tab.Constructor = ie, Qt.fn.tab.noConflict = function () {
    return Qt.fn.tab = Kt, ie._jQueryInterface;
  }, function (i) {
    if ("undefined" == typeof Tether) throw new Error("Bootstrap tooltips require Tether (http://tether.io/)");var o = "tooltip",
        r = "bs.tooltip",
        s = "." + r,
        a = i.fn[o],
        l = { animation: !0, template: '<div class="tooltip" role="tooltip"><div class="tooltip-inner"></div></div>', trigger: "hover focus", title: "", delay: 0, html: !1, selector: !1, placement: "top", offset: "0 0", constraints: [], container: !1 },
        c = { animation: "boolean", template: "string", title: "(string|element|function)", trigger: "string", delay: "(number|object)", html: "boolean", selector: "(string|boolean)", placement: "(string|function)", offset: "string", constraints: "array", container: "(string|element|boolean)" },
        h = { TOP: "bottom center", RIGHT: "middle left", BOTTOM: "top center", LEFT: "middle right" },
        d = "show",
        f = "out",
        u = { HIDE: "hide" + s, HIDDEN: "hidden" + s, SHOW: "show" + s, SHOWN: "shown" + s, INSERTED: "inserted" + s, CLICK: "click" + s, FOCUSIN: "focusin" + s, FOCUSOUT: "focusout" + s, MOUSEENTER: "mouseenter" + s, MOUSELEAVE: "mouseleave" + s },
        g = "fade",
        p = "show",
        m = ".tooltip-inner",
        _ = { element: !1, enabled: !1 },
        v = "hover",
        y = "focus",
        E = "click",
        T = "manual",
        b = function () {
      function a(t, e) {
        n(this, a), this._isEnabled = !0, this._timeout = 0, this._hoverState = "", this._activeTrigger = {}, this._isTransitioning = !1, this._tether = null, this.element = t, this.config = this._getConfig(e), this.tip = null, this._setListeners();
      }return a.prototype.enable = function () {
        this._isEnabled = !0;
      }, a.prototype.disable = function () {
        this._isEnabled = !1;
      }, a.prototype.toggleEnabled = function () {
        this._isEnabled = !this._isEnabled;
      }, a.prototype.toggle = function (t) {
        if (t) {
          var e = this.constructor.DATA_KEY,
              n = i(t.currentTarget).data(e);n || (n = new this.constructor(t.currentTarget, this._getDelegateConfig()), i(t.currentTarget).data(e, n)), n._activeTrigger.click = !n._activeTrigger.click, n._isWithActiveTrigger() ? n._enter(null, n) : n._leave(null, n);
        } else {
          if (i(this.getTipElement()).hasClass(p)) return void this._leave(null, this);this._enter(null, this);
        }
      }, a.prototype.dispose = function () {
        clearTimeout(this._timeout), this.cleanupTether(), i.removeData(this.element, this.constructor.DATA_KEY), i(this.element).off(this.constructor.EVENT_KEY), i(this.element).closest(".modal").off("hide.bs.modal"), this.tip && i(this.tip).remove(), this._isEnabled = null, this._timeout = null, this._hoverState = null, this._activeTrigger = null, this._tether = null, this.element = null, this.config = null, this.tip = null;
      }, a.prototype.show = function () {
        var t = this;if ("none" === i(this.element).css("display")) throw new Error("Please use show on visible elements");var e = i.Event(this.constructor.Event.SHOW);if (this.isWithContent() && this._isEnabled) {
          if (this._isTransitioning) throw new Error("Tooltip is transitioning");i(this.element).trigger(e);var n = i.contains(this.element.ownerDocument.documentElement, this.element);if (e.isDefaultPrevented() || !n) return;var o = this.getTipElement(),
              r = _e.getUID(this.constructor.NAME);o.setAttribute("id", r), this.element.setAttribute("aria-describedby", r), this.setContent(), this.config.animation && i(o).addClass(g);var s = "function" == typeof this.config.placement ? this.config.placement.call(this, o, this.element) : this.config.placement,
              l = this._getAttachment(s),
              c = !1 === this.config.container ? document.body : i(this.config.container);i(o).data(this.constructor.DATA_KEY, this).appendTo(c), i(this.element).trigger(this.constructor.Event.INSERTED), this._tether = new Tether({ attachment: l, element: o, target: this.element, classes: _, classPrefix: "bs-tether", offset: this.config.offset, constraints: this.config.constraints, addTargetClasses: !1 }), _e.reflow(o), this._tether.position(), i(o).addClass(p);var h = function h() {
            var e = t._hoverState;t._hoverState = null, t._isTransitioning = !1, i(t.element).trigger(t.constructor.Event.SHOWN), e === f && t._leave(null, t);
          };if (_e.supportsTransitionEnd() && i(this.tip).hasClass(g)) return this._isTransitioning = !0, void i(this.tip).one(_e.TRANSITION_END, h).emulateTransitionEnd(a._TRANSITION_DURATION);h();
        }
      }, a.prototype.hide = function (t) {
        var e = this,
            n = this.getTipElement(),
            o = i.Event(this.constructor.Event.HIDE);if (this._isTransitioning) throw new Error("Tooltip is transitioning");var r = function r() {
          e._hoverState !== d && n.parentNode && n.parentNode.removeChild(n), e.element.removeAttribute("aria-describedby"), i(e.element).trigger(e.constructor.Event.HIDDEN), e._isTransitioning = !1, e.cleanupTether(), t && t();
        };i(this.element).trigger(o), o.isDefaultPrevented() || (i(n).removeClass(p), this._activeTrigger[E] = !1, this._activeTrigger[y] = !1, this._activeTrigger[v] = !1, _e.supportsTransitionEnd() && i(this.tip).hasClass(g) ? (this._isTransitioning = !0, i(n).one(_e.TRANSITION_END, r).emulateTransitionEnd(150)) : r(), this._hoverState = "");
      }, a.prototype.isWithContent = function () {
        return Boolean(this.getTitle());
      }, a.prototype.getTipElement = function () {
        return this.tip = this.tip || i(this.config.template)[0];
      }, a.prototype.setContent = function () {
        var t = i(this.getTipElement());this.setElementContent(t.find(m), this.getTitle()), t.removeClass(g + " " + p), this.cleanupTether();
      }, a.prototype.setElementContent = function (e, n) {
        var o = this.config.html;"object" === (void 0 === n ? "undefined" : t(n)) && (n.nodeType || n.jquery) ? o ? i(n).parent().is(e) || e.empty().append(n) : e.text(i(n).text()) : e[o ? "html" : "text"](n);
      }, a.prototype.getTitle = function () {
        var t = this.element.getAttribute("data-original-title");return t || (t = "function" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title), t;
      }, a.prototype.cleanupTether = function () {
        this._tether && this._tether.destroy();
      }, a.prototype._getAttachment = function (t) {
        return h[t.toUpperCase()];
      }, a.prototype._setListeners = function () {
        var t = this;this.config.trigger.split(" ").forEach(function (e) {
          if ("click" === e) i(t.element).on(t.constructor.Event.CLICK, t.config.selector, function (e) {
            return t.toggle(e);
          });else if (e !== T) {
            var n = e === v ? t.constructor.Event.MOUSEENTER : t.constructor.Event.FOCUSIN,
                o = e === v ? t.constructor.Event.MOUSELEAVE : t.constructor.Event.FOCUSOUT;i(t.element).on(n, t.config.selector, function (e) {
              return t._enter(e);
            }).on(o, t.config.selector, function (e) {
              return t._leave(e);
            });
          }i(t.element).closest(".modal").on("hide.bs.modal", function () {
            return t.hide();
          });
        }), this.config.selector ? this.config = i.extend({}, this.config, { trigger: "manual", selector: "" }) : this._fixTitle();
      }, a.prototype._fixTitle = function () {
        var e = t(this.element.getAttribute("data-original-title"));(this.element.getAttribute("title") || "string" !== e) && (this.element.setAttribute("data-original-title", this.element.getAttribute("title") || ""), this.element.setAttribute("title", ""));
      }, a.prototype._enter = function (t, e) {
        var n = this.constructor.DATA_KEY;(e = e || i(t.currentTarget).data(n)) || (e = new this.constructor(t.currentTarget, this._getDelegateConfig()), i(t.currentTarget).data(n, e)), t && (e._activeTrigger["focusin" === t.type ? y : v] = !0), i(e.getTipElement()).hasClass(p) || e._hoverState === d ? e._hoverState = d : (clearTimeout(e._timeout), e._hoverState = d, e.config.delay && e.config.delay.show ? e._timeout = setTimeout(function () {
          e._hoverState === d && e.show();
        }, e.config.delay.show) : e.show());
      }, a.prototype._leave = function (t, e) {
        var n = this.constructor.DATA_KEY;(e = e || i(t.currentTarget).data(n)) || (e = new this.constructor(t.currentTarget, this._getDelegateConfig()), i(t.currentTarget).data(n, e)), t && (e._activeTrigger["focusout" === t.type ? y : v] = !1), e._isWithActiveTrigger() || (clearTimeout(e._timeout), e._hoverState = f, e.config.delay && e.config.delay.hide ? e._timeout = setTimeout(function () {
          e._hoverState === f && e.hide();
        }, e.config.delay.hide) : e.hide());
      }, a.prototype._isWithActiveTrigger = function () {
        for (var t in this._activeTrigger) {
          if (this._activeTrigger[t]) return !0;
        }return !1;
      }, a.prototype._getConfig = function (t) {
        return (t = i.extend({}, this.constructor.Default, i(this.element).data(), t)).delay && "number" == typeof t.delay && (t.delay = { show: t.delay, hide: t.delay }), _e.typeCheckConfig(o, t, this.constructor.DefaultType), t;
      }, a.prototype._getDelegateConfig = function () {
        var t = {};if (this.config) for (var e in this.config) {
          this.constructor.Default[e] !== this.config[e] && (t[e] = this.config[e]);
        }return t;
      }, a._jQueryInterface = function (e) {
        return this.each(function () {
          var n = i(this).data(r),
              o = "object" === (void 0 === e ? "undefined" : t(e)) && e;if ((n || !/dispose|hide/.test(e)) && (n || (n = new a(this, o), i(this).data(r, n)), "string" == typeof e)) {
            if (void 0 === n[e]) throw new Error('No method named "' + e + '"');n[e]();
          }
        });
      }, e(a, null, [{ key: "VERSION", get: function get() {
          return "4.0.0-alpha.6";
        } }, { key: "Default", get: function get() {
          return l;
        } }, { key: "NAME", get: function get() {
          return o;
        } }, { key: "DATA_KEY", get: function get() {
          return r;
        } }, { key: "Event", get: function get() {
          return u;
        } }, { key: "EVENT_KEY", get: function get() {
          return s;
        } }, { key: "DefaultType", get: function get() {
          return c;
        } }]), a;
    }();return i.fn[o] = b._jQueryInterface, i.fn[o].Constructor = b, i.fn[o].noConflict = function () {
      return i.fn[o] = a, b._jQueryInterface;
    }, b;
  }(jQuery));oe = jQuery, re = "popover", ae = "." + (se = "bs.popover"), le = oe.fn[re], ce = oe.extend({}, ve.Default, { placement: "right", trigger: "click", content: "", template: '<div class="popover" role="tooltip"><h3 class="popover-title"></h3><div class="popover-content"></div></div>' }), he = oe.extend({}, ve.DefaultType, { content: "(string|element|function)" }), de = "fade", fe = "show", ue = ".popover-title", ge = ".popover-content", pe = { HIDE: "hide" + ae, HIDDEN: "hidden" + ae, SHOW: "show" + ae, SHOWN: "shown" + ae, INSERTED: "inserted" + ae, CLICK: "click" + ae, FOCUSIN: "focusin" + ae, FOCUSOUT: "focusout" + ae, MOUSEENTER: "mouseenter" + ae, MOUSELEAVE: "mouseleave" + ae }, me = function (i) {
    function o() {
      return n(this, o), function (t, e) {
        if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !e || "object" !== (void 0 === e ? "undefined" : _typeof2(e)) && "function" != typeof e ? t : e;
      }(this, i.apply(this, arguments));
    }return function (t, e) {
      if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + (void 0 === e ? "undefined" : _typeof2(e)));t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
    }(o, i), o.prototype.isWithContent = function () {
      return this.getTitle() || this._getContent();
    }, o.prototype.getTipElement = function () {
      return this.tip = this.tip || oe(this.config.template)[0];
    }, o.prototype.setContent = function () {
      var t = oe(this.getTipElement());this.setElementContent(t.find(ue), this.getTitle()), this.setElementContent(t.find(ge), this._getContent()), t.removeClass(de + " " + fe), this.cleanupTether();
    }, o.prototype._getContent = function () {
      return this.element.getAttribute("data-content") || ("function" == typeof this.config.content ? this.config.content.call(this.element) : this.config.content);
    }, o._jQueryInterface = function (e) {
      return this.each(function () {
        var n = oe(this).data(se),
            i = "object" === (void 0 === e ? "undefined" : t(e)) ? e : null;if ((n || !/destroy|hide/.test(e)) && (n || (n = new o(this, i), oe(this).data(se, n)), "string" == typeof e)) {
          if (void 0 === n[e]) throw new Error('No method named "' + e + '"');n[e]();
        }
      });
    }, e(o, null, [{ key: "VERSION", get: function get() {
        return "4.0.0-alpha.6";
      } }, { key: "Default", get: function get() {
        return ce;
      } }, { key: "NAME", get: function get() {
        return re;
      } }, { key: "DATA_KEY", get: function get() {
        return se;
      } }, { key: "Event", get: function get() {
        return pe;
      } }, { key: "EVENT_KEY", get: function get() {
        return ae;
      } }, { key: "DefaultType", get: function get() {
        return he;
      } }]), o;
  }(ve), oe.fn[re] = me._jQueryInterface, oe.fn[re].Constructor = me, oe.fn[re].noConflict = function () {
    return oe.fn[re] = le, me._jQueryInterface;
  };
}(),
/*----------------------------------------
 * objectFitPolyfill 2.0.3
 *
 * Made by Constance Chen
 * Released under the MIT license
 *
 * https://github.com/constancecchen/object-fit-polyfill
 *--------------------------------------*/
function () {
  "use strict";
  if ("undefined" != typeof window) {
    var t = -1 !== window.navigator.userAgent.indexOf("Edge/16.");if ("objectFit" in document.documentElement.style == !1 || t) {
      var e = function e(t, _e2, n) {
        var i, o, r, s, a;if ((n = n.split(" ")).length < 2 && (n[1] = n[0]), "x" === t) i = n[0], o = n[1], r = "left", s = "right", a = _e2.clientWidth;else {
          if ("y" !== t) return;i = n[1], o = n[0], r = "top", s = "bottom", a = _e2.clientHeight;
        }if (i !== r && o !== r) {
          if (i !== s && o !== s) return "center" === i || "50%" === i ? (_e2.style[r] = "50%", void (_e2.style["margin-" + r] = a / -2 + "px")) : void (i.indexOf("%") >= 0 ? (i = parseInt(i)) < 50 ? (_e2.style[r] = i + "%", _e2.style["margin-" + r] = a * (i / -100) + "px") : (i = 100 - i, _e2.style[s] = i + "%", _e2.style["margin-" + s] = a * (i / -100) + "px") : _e2.style[r] = i);_e2.style[s] = "0";
        } else _e2.style[r] = "0";
      },
          n = function n(t) {
        var n = t.dataset ? t.dataset.objectFit : t.getAttribute("data-object-fit"),
            i = t.dataset ? t.dataset.objectPosition : t.getAttribute("data-object-position");n = n || "cover", i = i || "50% 50%";var o,
            r,
            s,
            a,
            l,
            c = t.parentNode;o = c, r = window.getComputedStyle(o, null), s = r.getPropertyValue("position"), a = r.getPropertyValue("overflow"), l = r.getPropertyValue("display"), s && "static" !== s || (o.style.position = "relative"), "hidden" !== a && (o.style.overflow = "hidden"), l && "inline" !== l || (o.style.display = "block"), 0 === o.clientHeight && (o.style.height = "100%"), -1 === o.className.indexOf("object-fit-polyfill") && (o.className = o.className + " object-fit-polyfill"), function (t) {
          var e = window.getComputedStyle(t, null),
              n = { "max-width": "none", "max-height": "none", "min-width": "0px", "min-height": "0px", top: "auto", right: "auto", bottom: "auto", left: "auto", "margin-top": "0px", "margin-right": "0px", "margin-bottom": "0px", "margin-left": "0px" };for (var i in n) {
            e.getPropertyValue(i) !== n[i] && (t.style[i] = n[i]);
          }
        }(t), t.style.position = "absolute", t.style.height = "100%", t.style.width = "auto", "scale-down" === n && (t.style.height = "auto", t.clientWidth < c.clientWidth && t.clientHeight < c.clientHeight ? (e("x", t, i), e("y", t, i)) : (n = "contain", t.style.height = "100%")), "none" === n ? (t.style.width = "auto", t.style.height = "auto", e("x", t, i), e("y", t, i)) : "cover" === n && t.clientWidth > c.clientWidth || "contain" === n && t.clientWidth < c.clientWidth ? (t.style.top = "0", t.style.marginTop = "0", e("x", t, i)) : "scale-down" !== n && (t.style.width = "100%", t.style.height = "auto", t.style.left = "0", t.style.marginLeft = "0", e("y", t, i));
      },
          i = function i(e) {
        if (void 0 === e) e = document.querySelectorAll("[data-object-fit]");else if (e && e.nodeName) e = [e];else {
          if ("object" !== (void 0 === e ? "undefined" : _typeof2(e)) || !e.length || !e[0].nodeName) return !1;e = e;
        }for (var i = 0; i < e.length; i++) {
          if (e[i].nodeName) {
            var o = e[i].nodeName.toLowerCase();"img" !== o || t ? "video" === o && (e[i].readyState > 0 ? n(e[i]) : e[i].addEventListener("loadedmetadata", function () {
              n(this);
            })) : e[i].complete ? n(e[i]) : e[i].addEventListener("load", function () {
              n(this);
            });
          }
        }return !0;
      };document.addEventListener("DOMContentLoaded", function () {
        i();
      }), window.addEventListener("resize", function () {
        i();
      }), window.objectFitPolyfill = i;
    } else window.objectFitPolyfill = function () {
      return !1;
    };
  }
}(),
/*!
 * Stickyfill -- `position: sticky` polyfill
 * v. 1.1.4 | https://github.com/wilddeer/stickyfill
 * Copyright Oleg Korsunsky | http://wd.dizaina.net/
 *
 * MIT License
 */
function (t, e) {
  var n,
      i,
      o = [],
      r = !1,
      s = t.documentElement,
      a = function a() {},
      l = "hidden",
      c = "visibilitychange";void 0 !== t.webkitHidden && (l = "webkitHidden", c = "webkitvisibilitychange"), e.getComputedStyle || u();for (var h = ["", "-webkit-", "-moz-", "-ms-"], d = document.createElement("div"), f = h.length - 1; f >= 0; f--) {
    try {
      d.style.position = h[f] + "sticky";
    } catch (t) {}"" != d.style.position && u();
  }function u() {
    O = H = k = L = j = W = a;
  }function g(t) {
    return parseFloat(t) || 0;
  }function p() {
    n = { top: e.pageYOffset, left: e.pageXOffset };
  }function m() {
    if (e.pageXOffset != n.left) return p(), void k();e.pageYOffset != n.top && (p(), v());
  }function _(t) {
    setTimeout(function () {
      e.pageYOffset != n.top && (n.top = e.pageYOffset, v());
    }, 0);
  }function v() {
    for (var t = o.length - 1; t >= 0; t--) {
      y(o[t]);
    }
  }function y(t) {
    if (t.inited) {
      var e = n.top <= t.limit.start ? 0 : n.top >= t.limit.end ? 2 : 1;t.mode != e && function (t, e) {
        var n = t.node.style;switch (e) {case 0:
            n.position = "absolute", n.left = t.offset.left + "px", n.right = t.offset.right + "px", n.top = t.offset.top + "px", n.bottom = "auto", n.width = "auto", n.marginLeft = 0, n.marginRight = 0, n.marginTop = 0;break;case 1:
            n.position = "fixed", n.left = t.box.left + "px", n.right = t.box.right + "px", n.top = t.css.top, n.bottom = "auto", n.width = "auto", n.marginLeft = 0, n.marginRight = 0, n.marginTop = 0;break;case 2:
            n.position = "absolute", n.left = t.offset.left + "px", n.right = t.offset.right + "px", n.top = "auto", n.bottom = 0, n.width = "auto", n.marginLeft = 0, n.marginRight = 0;}t.mode = e;
      }(t, e);
    }
  }function E(t) {
    isNaN(parseFloat(t.computed.top)) || t.isCell || "none" == t.computed.display || (t.inited = !0, t.clone || function (t) {
      t.clone = document.createElement("div");var e = t.node.nextSibling || t.node,
          n = t.clone.style;n.height = t.height + "px", n.width = t.width + "px", n.marginTop = t.computed.marginTop, n.marginBottom = t.computed.marginBottom, n.marginLeft = t.computed.marginLeft, n.marginRight = t.computed.marginRight, n.padding = n.border = n.borderSpacing = 0, n.fontSize = "1em", n.position = "static", n.cssFloat = t.computed.cssFloat, t.node.parentNode.insertBefore(t.clone, e);
    }(t), "absolute" != t.parent.computed.position && "relative" != t.parent.computed.position && (t.parent.node.style.position = "relative"), y(t), t.parent.height = t.parent.node.offsetHeight, t.docOffsetTop = I(t.clone));
  }function T(t) {
    var e,
        n = !0;t.clone && ((e = t).clone.parentNode.removeChild(e.clone), e.clone = void 0), function (t, e) {
      for (var n in e) {
        e.hasOwnProperty(n) && (t[n] = e[n]);
      }
    }(t.node.style, t.css);for (var i = o.length - 1; i >= 0; i--) {
      if (o[i].node !== t.node && o[i].parent.node === t.parent.node) {
        n = !1;break;
      }
    }n && (t.parent.node.style.position = t.parent.css.position), t.mode = -1;
  }function b() {
    for (var t = o.length - 1; t >= 0; t--) {
      E(o[t]);
    }
  }function w() {
    for (var t = o.length - 1; t >= 0; t--) {
      T(o[t]);
    }
  }function C(t) {
    var e = getComputedStyle(t),
        n = t.parentNode,
        i = getComputedStyle(n),
        o = t.style.position;t.style.position = "relative";var r = { top: e.top, marginTop: e.marginTop, marginBottom: e.marginBottom, marginLeft: e.marginLeft, marginRight: e.marginRight, cssFloat: e.cssFloat, display: e.display },
        a = { top: g(e.top), marginBottom: g(e.marginBottom), paddingLeft: g(e.paddingLeft), paddingRight: g(e.paddingRight), borderLeftWidth: g(e.borderLeftWidth), borderRightWidth: g(e.borderRightWidth) };t.style.position = o;var l = { position: t.style.position, top: t.style.top, bottom: t.style.bottom, left: t.style.left, right: t.style.right, width: t.style.width, marginTop: t.style.marginTop, marginLeft: t.style.marginLeft, marginRight: t.style.marginRight },
        c = S(t),
        h = S(n),
        d = { node: n, css: { position: n.style.position }, computed: { position: i.position }, numeric: { borderLeftWidth: g(i.borderLeftWidth), borderRightWidth: g(i.borderRightWidth), borderTopWidth: g(i.borderTopWidth), borderBottomWidth: g(i.borderBottomWidth) } };return { node: t, box: { left: c.win.left, right: s.clientWidth - c.win.right }, offset: { top: c.win.top - h.win.top - d.numeric.borderTopWidth, left: c.win.left - h.win.left - d.numeric.borderLeftWidth, right: -c.win.right + h.win.right - d.numeric.borderRightWidth }, css: l, isCell: "table-cell" == e.display, computed: r, numeric: a, width: c.win.right - c.win.left, height: c.win.bottom - c.win.top, mode: -1, inited: !1, parent: d, limit: { start: c.doc.top - a.top, end: h.doc.top + n.offsetHeight - d.numeric.borderBottomWidth - t.offsetHeight - a.top - a.marginBottom } };
  }function I(t) {
    for (var e = 0; t;) {
      e += t.offsetTop, t = t.offsetParent;
    }return e;
  }function S(t) {
    var n = t.getBoundingClientRect();return { doc: { top: n.top + e.pageYOffset, left: n.left + e.pageXOffset }, win: n };
  }function A() {
    i = setInterval(function () {
      !function () {
        for (var t = o.length - 1; t >= 0; t--) {
          if (o[t].inited) {
            var e = Math.abs(I(o[t].clone) - o[t].docOffsetTop),
                n = Math.abs(o[t].parent.node.offsetHeight - o[t].parent.height);if (e >= 2 || n >= 2) return !1;
          }
        }return !0;
      }() && k();
    }, 500);
  }function D() {
    clearInterval(i);
  }function N() {
    r && (document[l] ? D() : A());
  }function O() {
    r || (p(), b(), e.addEventListener("scroll", m), e.addEventListener("wheel", _), e.addEventListener("resize", k), e.addEventListener("orientationchange", k), t.addEventListener(c, N), A(), r = !0);
  }function k() {
    if (r) {
      w();for (var t = o.length - 1; t >= 0; t--) {
        o[t] = C(o[t].node);
      }b();
    }
  }function L() {
    e.removeEventListener("scroll", m), e.removeEventListener("wheel", _), e.removeEventListener("resize", k), e.removeEventListener("orientationchange", k), t.removeEventListener(c, N), D(), r = !1;
  }function j() {
    L(), w();
  }function W() {
    for (j(); o.length;) {
      o.pop();
    }
  }function H(t) {
    for (var e = o.length - 1; e >= 0; e--) {
      if (o[e].node === t) return;
    }var n = C(t);o.push(n), r ? E(n) : O();
  }p(), e.Stickyfill = { stickies: o, add: H, remove: function remove(t) {
      for (var e = o.length - 1; e >= 0; e--) {
        o[e].node === t && (T(o[e]), o.splice(e, 1));
      }
    }, init: O, rebuild: k, pause: L, stop: j, kill: W };
}(document, window), window.jQuery && (window.jQuery.fn.Stickyfill = function (t) {
  return this.each(function () {
    Stickyfill.add(this);
  }), this;
}), function (t) {
  t.fn.mediaBackground = function () {
    return this.each(function () {
      var e,
          n = t(this);(e = n).hasClass("object-fit-contain") ? e.attr("data-object-fit", "contain") : e.hasClass("object-fit-fill") ? e.attr("data-object-fit", "fill") : e.hasClass("object-fit-none") ? e.attr("data-object-fit", "none") : e.hasClass("object-fit-scale-down") ? e.attr("data-object-fit", "scale-down") : e.attr("data-object-fit", "cover");
    }), objectFitPolyfill(this), this;
  }, t(".media-background").mediaBackground();
}(jQuery), function (t) {
  t.fn.stickyTop = function () {
    return this.Stickyfill(), this;
  }, t(".sticky-top").stickyTop();
}(jQuery);
/* eslint-env amd, node */

// https://github.com/umdjs/umd/blob/master/templates/returnExports.js
(function (root, factory) {
  'use strict';

  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([], factory);
  } else if ((typeof module === "undefined" ? "undefined" : _typeof3(module)) === 'object' && module.exports) {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory();
  } else {
    // Browser globals (root is window)
    root.AnchorJS = factory();
    root.anchors = new root.AnchorJS();
  }
})(this, function () {
  'use strict';

  function AnchorJS(options) {
    this.options = options || {};
    this.elements = [];

    /**
     * Assigns options to the internal options object, and provides defaults.
     * @param {Object} opts - Options object
     */
    function _applyRemainingDefaultOptions(opts) {
      opts.icon = opts.hasOwnProperty('icon') ? opts.icon : "\uE9CB"; // Accepts characters (and also URLs?), like  '#', '¶', '❡', or '§'.
      opts.visible = opts.hasOwnProperty('visible') ? opts.visible : 'hover'; // Also accepts 'always' & 'touch'
      opts.placement = opts.hasOwnProperty('placement') ? opts.placement : 'right'; // Also accepts 'left'
      opts.ariaLabel = opts.hasOwnProperty('ariaLabel') ? opts.ariaLabel : 'Anchor'; // Accepts any text.
      opts.class = opts.hasOwnProperty('class') ? opts.class : ''; // Accepts any class name.
      // Using Math.floor here will ensure the value is Number-cast and an integer.
      opts.truncate = opts.hasOwnProperty('truncate') ? Math.floor(opts.truncate) : 64; // Accepts any value that can be typecast to a number.
    }

    _applyRemainingDefaultOptions(this.options);

    /**
     * Checks to see if this device supports touch. Uses criteria pulled from Modernizr:
     * https://github.com/Modernizr/Modernizr/blob/da22eb27631fc4957f67607fe6042e85c0a84656/feature-detects/touchevents.js#L40
     * @return {Boolean} - true if the current device supports touch.
     */
    this.isTouchDevice = function () {
      return !!('ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch);
    };

    /**
     * Add anchor links to page elements.
     * @param  {String|Array|Nodelist} selector - A CSS selector for targeting the elements you wish to add anchor links
     *                                            to. Also accepts an array or nodeList containing the relavant elements.
     * @return {this}                           - The AnchorJS object
     */
    this.add = function (selector) {
      var elements,
          elsWithIds,
          idList,
          elementID,
          i,
          index,
          count,
          tidyText,
          newTidyText,
          readableID,
          anchor,
          visibleOptionToUse,
          indexesToDrop = [];

      // We reapply options here because somebody may have overwritten the default options object when setting options.
      // For example, this overwrites all options but visible:
      //
      // anchors.options = { visible: 'always'; }
      _applyRemainingDefaultOptions(this.options);

      visibleOptionToUse = this.options.visible;
      if (visibleOptionToUse === 'touch') {
        visibleOptionToUse = this.isTouchDevice() ? 'always' : 'hover';
      }

      // Provide a sensible default selector, if none is given.
      if (!selector) {
        selector = 'h2, h3, h4, h5, h6';
      }

      elements = _getElements(selector);

      if (elements.length === 0) {
        return this;
      }

      _addBaselineStyles();

      // We produce a list of existing IDs so we don't generate a duplicate.
      elsWithIds = document.querySelectorAll('[id]');
      idList = [].map.call(elsWithIds, function assign(el) {
        return el.id;
      });

      for (i = 0; i < elements.length; i++) {
        if (this.hasAnchorJSLink(elements[i])) {
          indexesToDrop.push(i);
          continue;
        }

        if (elements[i].hasAttribute('id')) {
          elementID = elements[i].getAttribute('id');
        } else if (elements[i].hasAttribute('data-anchor-id')) {
          elementID = elements[i].getAttribute('data-anchor-id');
        } else {
          tidyText = this.urlify(elements[i].textContent);

          // Compare our generated ID to existing IDs (and increment it if needed)
          // before we add it to the page.
          newTidyText = tidyText;
          count = 0;
          do {
            if (index !== undefined) {
              newTidyText = tidyText + '-' + count;
            }

            index = idList.indexOf(newTidyText);
            count += 1;
          } while (index !== -1);
          index = undefined;
          idList.push(newTidyText);

          elements[i].setAttribute('id', newTidyText);
          elementID = newTidyText;
        }

        readableID = elementID.replace(/-/g, ' ');

        // The following code builds the following DOM structure in a more effiecient (albeit opaque) way.
        // '<a class="anchorjs-link ' + this.options.class + '" href="#' + elementID + '" aria-label="Anchor" data-anchorjs-icon="' + this.options.icon + '"></a>';
        anchor = document.createElement('a');
        anchor.className = 'anchorjs-link ' + this.options.class;
        anchor.href = '#' + elementID;
        anchor.setAttribute('aria-label', this.options.ariaLabel);
        anchor.setAttribute('data-anchorjs-icon', this.options.icon);

        if (visibleOptionToUse === 'always') {
          anchor.style.opacity = '1';
        }

        if (this.options.icon === "\uE9CB") {
          anchor.style.font = '1em/1 anchorjs-icons';

          // We set lineHeight = 1 here because the `anchorjs-icons` font family could otherwise affect the
          // height of the heading. This isn't the case for icons with `placement: left`, so we restore
          // line-height: inherit in that case, ensuring they remain positioned correctly. For more info,
          // see https://github.com/bryanbraun/anchorjs/issues/39.
          if (this.options.placement === 'left') {
            anchor.style.lineHeight = 'inherit';
          }
        }

        if (this.options.placement === 'left') {
          anchor.style.position = 'absolute';
          anchor.style.marginLeft = '-1em';
          anchor.style.paddingRight = '0.5em';
          elements[i].insertBefore(anchor, elements[i].firstChild);
        } else {
          // if the option provided is `right` (or anything else).
          anchor.style.paddingLeft = '0.375em';
          elements[i].appendChild(anchor);
        }
      }

      for (i = 0; i < indexesToDrop.length; i++) {
        elements.splice(indexesToDrop[i] - i, 1);
      }
      this.elements = this.elements.concat(elements);

      return this;
    };

    /**
     * Removes all anchorjs-links from elements targed by the selector.
     * @param  {String|Array|Nodelist} selector - A CSS selector string targeting elements with anchor links,
     *                                            OR a nodeList / array containing the DOM elements.
     * @return {this}                           - The AnchorJS object
     */
    this.remove = function (selector) {
      var index,
          domAnchor,
          elements = _getElements(selector);

      for (var i = 0; i < elements.length; i++) {
        domAnchor = elements[i].querySelector('.anchorjs-link');
        if (domAnchor) {
          // Drop the element from our main list, if it's in there.
          index = this.elements.indexOf(elements[i]);
          if (index !== -1) {
            this.elements.splice(index, 1);
          }
          // Remove the anchor from the DOM.
          elements[i].removeChild(domAnchor);
        }
      }
      return this;
    };

    /**
     * Removes all anchorjs links. Mostly used for tests.
     */
    this.removeAll = function () {
      this.remove(this.elements);
    };

    /**
     * Urlify - Refine text so it makes a good ID.
     *
     * To do this, we remove apostrophes, replace nonsafe characters with hyphens,
     * remove extra hyphens, truncate, trim hyphens, and make lowercase.
     *
     * @param  {String} text - Any text. Usually pulled from the webpage element we are linking to.
     * @return {String}      - hyphen-delimited text for use in IDs and URLs.
     */
    this.urlify = function (text) {
      // Regex for finding the nonsafe URL characters (many need escaping): & +$,:;=?@"#{}|^~[`%!'<>]./()*\
      var nonsafeChars = /[& +$,:;=?@"#{}|^~[`%!'<>\]\.\/\(\)\*\\]/g,
          urlText;

      // The reason we include this _applyRemainingDefaultOptions is so urlify can be called independently,
      // even after setting options. This can be useful for tests or other applications.
      if (!this.options.truncate) {
        _applyRemainingDefaultOptions(this.options);
      }

      // Note: we trim hyphens after truncating because truncating can cause dangling hyphens.
      // Example string:                      // " ⚡⚡ Don't forget: URL fragments should be i18n-friendly, hyphenated, short, and clean."
      urlText = text.trim() // "⚡⚡ Don't forget: URL fragments should be i18n-friendly, hyphenated, short, and clean."
      .replace(/\'/gi, '') // "⚡⚡ Dont forget: URL fragments should be i18n-friendly, hyphenated, short, and clean."
      .replace(nonsafeChars, '-') // "⚡⚡-Dont-forget--URL-fragments-should-be-i18n-friendly--hyphenated--short--and-clean-"
      .replace(/-{2,}/g, '-') // "⚡⚡-Dont-forget-URL-fragments-should-be-i18n-friendly-hyphenated-short-and-clean-"
      .substring(0, this.options.truncate) // "⚡⚡-Dont-forget-URL-fragments-should-be-i18n-friendly-hyphenated-"
      .replace(/^-+|-+$/gm, '') // "⚡⚡-Dont-forget-URL-fragments-should-be-i18n-friendly-hyphenated"
      .toLowerCase(); // "⚡⚡-dont-forget-url-fragments-should-be-i18n-friendly-hyphenated"

      return urlText;
    };

    /**
     * Determines if this element already has an AnchorJS link on it.
     * Uses this technique: http://stackoverflow.com/a/5898748/1154642
     * @param    {HTMLElemnt}  el - a DOM node
     * @return   {Boolean}     true/false
     */
    this.hasAnchorJSLink = function (el) {
      var hasLeftAnchor = el.firstChild && (' ' + el.firstChild.className + ' ').indexOf(' anchorjs-link ') > -1,
          hasRightAnchor = el.lastChild && (' ' + el.lastChild.className + ' ').indexOf(' anchorjs-link ') > -1;

      return hasLeftAnchor || hasRightAnchor || false;
    };

    /**
     * Turns a selector, nodeList, or array of elements into an array of elements (so we can use array methods).
     * It also throws errors on any other inputs. Used to handle inputs to .add and .remove.
     * @param  {String|Array|Nodelist} input - A CSS selector string targeting elements with anchor links,
     *                                         OR a nodeList / array containing the DOM elements.
     * @return {Array} - An array containing the elements we want.
     */
    function _getElements(input) {
      var elements;
      if (typeof input === 'string' || input instanceof String) {
        // See https://davidwalsh.name/nodelist-array for the technique transforming nodeList -> Array.
        elements = [].slice.call(document.querySelectorAll(input));
        // I checked the 'input instanceof NodeList' test in IE9 and modern browsers and it worked for me.
      } else if (Array.isArray(input) || input instanceof NodeList) {
        elements = [].slice.call(input);
      } else {
        throw new Error('The selector provided to AnchorJS was invalid.');
      }
      return elements;
    }

    /**
     * _addBaselineStyles
     * Adds baseline styles to the page, used by all AnchorJS links irregardless of configuration.
     */
    function _addBaselineStyles() {
      // We don't want to add global baseline styles if they've been added before.
      if (document.head.querySelector('style.anchorjs') !== null) {
        return;
      }

      var style = document.createElement('style'),
          linkRule = ' .anchorjs-link {' + '   opacity: 0;' + '   text-decoration: none;' + '   -webkit-font-smoothing: antialiased;' + '   -moz-osx-font-smoothing: grayscale;' + ' }',
          hoverRule = ' *:hover > .anchorjs-link,' + ' .anchorjs-link:focus  {' + '   opacity: 1;' + ' }',
          anchorjsLinkFontFace = ' @font-face {' + '   font-family: "anchorjs-icons";' + // Icon from icomoon; 10px wide & 10px tall; 2 empty below & 4 above
      '   src: url(data:n/a;base64,AAEAAAALAIAAAwAwT1MvMg8yG2cAAAE4AAAAYGNtYXDp3gC3AAABpAAAAExnYXNwAAAAEAAAA9wAAAAIZ2x5ZlQCcfwAAAH4AAABCGhlYWQHFvHyAAAAvAAAADZoaGVhBnACFwAAAPQAAAAkaG10eASAADEAAAGYAAAADGxvY2EACACEAAAB8AAAAAhtYXhwAAYAVwAAARgAAAAgbmFtZQGOH9cAAAMAAAAAunBvc3QAAwAAAAADvAAAACAAAQAAAAEAAHzE2p9fDzz1AAkEAAAAAADRecUWAAAAANQA6R8AAAAAAoACwAAAAAgAAgAAAAAAAAABAAADwP/AAAACgAAA/9MCrQABAAAAAAAAAAAAAAAAAAAAAwABAAAAAwBVAAIAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAMCQAGQAAUAAAKZAswAAACPApkCzAAAAesAMwEJAAAAAAAAAAAAAAAAAAAAARAAAAAAAAAAAAAAAAAAAAAAQAAg//0DwP/AAEADwABAAAAAAQAAAAAAAAAAAAAAIAAAAAAAAAIAAAACgAAxAAAAAwAAAAMAAAAcAAEAAwAAABwAAwABAAAAHAAEADAAAAAIAAgAAgAAACDpy//9//8AAAAg6cv//f///+EWNwADAAEAAAAAAAAAAAAAAAAACACEAAEAAAAAAAAAAAAAAAAxAAACAAQARAKAAsAAKwBUAAABIiYnJjQ3NzY2MzIWFxYUBwcGIicmNDc3NjQnJiYjIgYHBwYUFxYUBwYGIwciJicmNDc3NjIXFhQHBwYUFxYWMzI2Nzc2NCcmNDc2MhcWFAcHBgYjARQGDAUtLXoWOR8fORYtLTgKGwoKCjgaGg0gEhIgDXoaGgkJBQwHdR85Fi0tOAobCgoKOBoaDSASEiANehoaCQkKGwotLXoWOR8BMwUFLYEuehYXFxYugC44CQkKGwo4GkoaDQ0NDXoaShoKGwoFBe8XFi6ALjgJCQobCjgaShoNDQ0NehpKGgobCgoKLYEuehYXAAAADACWAAEAAAAAAAEACAAAAAEAAAAAAAIAAwAIAAEAAAAAAAMACAAAAAEAAAAAAAQACAAAAAEAAAAAAAUAAQALAAEAAAAAAAYACAAAAAMAAQQJAAEAEAAMAAMAAQQJAAIABgAcAAMAAQQJAAMAEAAMAAMAAQQJAAQAEAAMAAMAAQQJAAUAAgAiAAMAAQQJAAYAEAAMYW5jaG9yanM0MDBAAGEAbgBjAGgAbwByAGoAcwA0ADAAMABAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAH//wAP) format("truetype");' + ' }',
          pseudoElContent = ' [data-anchorjs-icon]::after {' + '   content: attr(data-anchorjs-icon);' + ' }',
          firstStyleEl;

      style.className = 'anchorjs';
      style.appendChild(document.createTextNode('')); // Necessary for Webkit.

      // We place it in the head with the other style tags, if possible, so as to
      // not look out of place. We insert before the others so these styles can be
      // overridden if necessary.
      firstStyleEl = document.head.querySelector('[rel="stylesheet"], style');
      if (firstStyleEl === undefined) {
        document.head.appendChild(style);
      } else {
        document.head.insertBefore(style, firstStyleEl);
      }

      style.sheet.insertRule(linkRule, style.sheet.cssRules.length);
      style.sheet.insertRule(hoverRule, style.sheet.cssRules.length);
      style.sheet.insertRule(pseudoElContent, style.sheet.cssRules.length);
      style.sheet.insertRule(anchorjsLinkFontFace, style.sheet.cssRules.length);
    }
  }

  return AnchorJS;
});

/*!
 * clipboard.js v1.7.1
 * https://zenorocha.github.io/clipboard.js
 *
 * Licensed MIT © Zeno Rocha
 */
(function (f) {
  if ((typeof exports === "undefined" ? "undefined" : _typeof3(exports)) === "object" && typeof module !== "undefined") {
    module.exports = f();
  } else if (typeof define === "function" && define.amd) {
    define([], f);
  } else {
    var g;if (typeof window !== "undefined") {
      g = window;
    } else if (typeof global !== "undefined") {
      g = global;
    } else if (typeof self !== "undefined") {
      g = self;
    } else {
      g = this;
    }g.Clipboard = f();
  }
})(function () {
  var define, module, exports;return function e(t, n, r) {
    function s(o, u) {
      if (!n[o]) {
        if (!t[o]) {
          var a = typeof require == "function" && require;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error("Cannot find module '" + o + "'");throw f.code = "MODULE_NOT_FOUND", f;
        }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {
          var n = t[o][1][e];return s(n ? n : e);
        }, l, l.exports, e, t, n, r);
      }return n[o].exports;
    }var i = typeof require == "function" && require;for (var o = 0; o < r.length; o++) {
      s(r[o]);
    }return s;
  }({ 1: [function (require, module, exports) {
      var DOCUMENT_NODE_TYPE = 9;

      /**
       * A polyfill for Element.matches()
       */
      if (typeof Element !== 'undefined' && !Element.prototype.matches) {
        var proto = Element.prototype;

        proto.matches = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector;
      }

      /**
       * Finds the closest parent that matches a selector.
       *
       * @param {Element} element
       * @param {String} selector
       * @return {Function}
       */
      function closest(element, selector) {
        while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
          if (typeof element.matches === 'function' && element.matches(selector)) {
            return element;
          }
          element = element.parentNode;
        }
      }

      module.exports = closest;
    }, {}], 2: [function (require, module, exports) {
      var closest = require('./closest');

      /**
       * Delegates event to a selector.
       *
       * @param {Element} element
       * @param {String} selector
       * @param {String} type
       * @param {Function} callback
       * @param {Boolean} useCapture
       * @return {Object}
       */
      function delegate(element, selector, type, callback, useCapture) {
        var listenerFn = listener.apply(this, arguments);

        element.addEventListener(type, listenerFn, useCapture);

        return {
          destroy: function destroy() {
            element.removeEventListener(type, listenerFn, useCapture);
          }
        };
      }

      /**
       * Finds closest match and invokes callback.
       *
       * @param {Element} element
       * @param {String} selector
       * @param {String} type
       * @param {Function} callback
       * @return {Function}
       */
      function listener(element, selector, type, callback) {
        return function (e) {
          e.delegateTarget = closest(e.target, selector);

          if (e.delegateTarget) {
            callback.call(element, e);
          }
        };
      }

      module.exports = delegate;
    }, { "./closest": 1 }], 3: [function (require, module, exports) {
      /**
       * Check if argument is a HTML element.
       *
       * @param {Object} value
       * @return {Boolean}
       */
      exports.node = function (value) {
        return value !== undefined && value instanceof HTMLElement && value.nodeType === 1;
      };

      /**
       * Check if argument is a list of HTML elements.
       *
       * @param {Object} value
       * @return {Boolean}
       */
      exports.nodeList = function (value) {
        var type = Object.prototype.toString.call(value);

        return value !== undefined && (type === '[object NodeList]' || type === '[object HTMLCollection]') && 'length' in value && (value.length === 0 || exports.node(value[0]));
      };

      /**
       * Check if argument is a string.
       *
       * @param {Object} value
       * @return {Boolean}
       */
      exports.string = function (value) {
        return typeof value === 'string' || value instanceof String;
      };

      /**
       * Check if argument is a function.
       *
       * @param {Object} value
       * @return {Boolean}
       */
      exports.fn = function (value) {
        var type = Object.prototype.toString.call(value);

        return type === '[object Function]';
      };
    }, {}], 4: [function (require, module, exports) {
      var is = require('./is');
      var delegate = require('delegate');

      /**
       * Validates all params and calls the right
       * listener function based on its target type.
       *
       * @param {String|HTMLElement|HTMLCollection|NodeList} target
       * @param {String} type
       * @param {Function} callback
       * @return {Object}
       */
      function listen(target, type, callback) {
        if (!target && !type && !callback) {
          throw new Error('Missing required arguments');
        }

        if (!is.string(type)) {
          throw new TypeError('Second argument must be a String');
        }

        if (!is.fn(callback)) {
          throw new TypeError('Third argument must be a Function');
        }

        if (is.node(target)) {
          return listenNode(target, type, callback);
        } else if (is.nodeList(target)) {
          return listenNodeList(target, type, callback);
        } else if (is.string(target)) {
          return listenSelector(target, type, callback);
        } else {
          throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');
        }
      }

      /**
       * Adds an event listener to a HTML element
       * and returns a remove listener function.
       *
       * @param {HTMLElement} node
       * @param {String} type
       * @param {Function} callback
       * @return {Object}
       */
      function listenNode(node, type, callback) {
        node.addEventListener(type, callback);

        return {
          destroy: function destroy() {
            node.removeEventListener(type, callback);
          }
        };
      }

      /**
       * Add an event listener to a list of HTML elements
       * and returns a remove listener function.
       *
       * @param {NodeList|HTMLCollection} nodeList
       * @param {String} type
       * @param {Function} callback
       * @return {Object}
       */
      function listenNodeList(nodeList, type, callback) {
        Array.prototype.forEach.call(nodeList, function (node) {
          node.addEventListener(type, callback);
        });

        return {
          destroy: function destroy() {
            Array.prototype.forEach.call(nodeList, function (node) {
              node.removeEventListener(type, callback);
            });
          }
        };
      }

      /**
       * Add an event listener to a selector
       * and returns a remove listener function.
       *
       * @param {String} selector
       * @param {String} type
       * @param {Function} callback
       * @return {Object}
       */
      function listenSelector(selector, type, callback) {
        return delegate(document.body, selector, type, callback);
      }

      module.exports = listen;
    }, { "./is": 3, "delegate": 2 }], 5: [function (require, module, exports) {
      function select(element) {
        var selectedText;

        if (element.nodeName === 'SELECT') {
          element.focus();

          selectedText = element.value;
        } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
          var isReadOnly = element.hasAttribute('readonly');

          if (!isReadOnly) {
            element.setAttribute('readonly', '');
          }

          element.select();
          element.setSelectionRange(0, element.value.length);

          if (!isReadOnly) {
            element.removeAttribute('readonly');
          }

          selectedText = element.value;
        } else {
          if (element.hasAttribute('contenteditable')) {
            element.focus();
          }

          var selection = window.getSelection();
          var range = document.createRange();

          range.selectNodeContents(element);
          selection.removeAllRanges();
          selection.addRange(range);

          selectedText = selection.toString();
        }

        return selectedText;
      }

      module.exports = select;
    }, {}], 6: [function (require, module, exports) {
      function E() {
        // Keep this empty so it's easier to inherit from
        // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
      }

      E.prototype = {
        on: function on(name, callback, ctx) {
          var e = this.e || (this.e = {});

          (e[name] || (e[name] = [])).push({
            fn: callback,
            ctx: ctx
          });

          return this;
        },

        once: function once(name, callback, ctx) {
          var self = this;
          function listener() {
            self.off(name, listener);
            callback.apply(ctx, arguments);
          };

          listener._ = callback;
          return this.on(name, listener, ctx);
        },

        emit: function emit(name) {
          var data = [].slice.call(arguments, 1);
          var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
          var i = 0;
          var len = evtArr.length;

          for (i; i < len; i++) {
            evtArr[i].fn.apply(evtArr[i].ctx, data);
          }

          return this;
        },

        off: function off(name, callback) {
          var e = this.e || (this.e = {});
          var evts = e[name];
          var liveEvents = [];

          if (evts && callback) {
            for (var i = 0, len = evts.length; i < len; i++) {
              if (evts[i].fn !== callback && evts[i].fn._ !== callback) liveEvents.push(evts[i]);
            }
          }

          // Remove event from queue to prevent memory leak
          // Suggested by https://github.com/lazd
          // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

          liveEvents.length ? e[name] = liveEvents : delete e[name];

          return this;
        }
      };

      module.exports = E;
    }, {}], 7: [function (require, module, exports) {
      (function (global, factory) {
        if (typeof define === "function" && define.amd) {
          define(['module', 'select'], factory);
        } else if (typeof exports !== "undefined") {
          factory(module, require('select'));
        } else {
          var mod = {
            exports: {}
          };
          factory(mod, global.select);
          global.clipboardAction = mod.exports;
        }
      })(this, function (module, _select) {
        'use strict';

        var _select2 = _interopRequireDefault(_select);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var _typeof = typeof Symbol === "function" && _typeof3(Symbol.iterator) === "symbol" ? function (obj) {
          return typeof obj === "undefined" ? "undefined" : _typeof3(obj);
        } : function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof3(obj);
        };

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        var _createClass = function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();

        var ClipboardAction = function () {
          /**
           * @param {Object} options
           */
          function ClipboardAction(options) {
            _classCallCheck(this, ClipboardAction);

            this.resolveOptions(options);
            this.initSelection();
          }

          /**
           * Defines base properties passed from constructor.
           * @param {Object} options
           */

          _createClass(ClipboardAction, [{
            key: 'resolveOptions',
            value: function resolveOptions() {
              var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

              this.action = options.action;
              this.container = options.container;
              this.emitter = options.emitter;
              this.target = options.target;
              this.text = options.text;
              this.trigger = options.trigger;

              this.selectedText = '';
            }
          }, {
            key: 'initSelection',
            value: function initSelection() {
              if (this.text) {
                this.selectFake();
              } else if (this.target) {
                this.selectTarget();
              }
            }
          }, {
            key: 'selectFake',
            value: function selectFake() {
              var _this = this;

              var isRTL = document.documentElement.getAttribute('dir') == 'rtl';

              this.removeFake();

              this.fakeHandlerCallback = function () {
                return _this.removeFake();
              };
              this.fakeHandler = this.container.addEventListener('click', this.fakeHandlerCallback) || true;

              this.fakeElem = document.createElement('textarea');
              // Prevent zooming on iOS
              this.fakeElem.style.fontSize = '12pt';
              // Reset box model
              this.fakeElem.style.border = '0';
              this.fakeElem.style.padding = '0';
              this.fakeElem.style.margin = '0';
              // Move element out of screen horizontally
              this.fakeElem.style.position = 'absolute';
              this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';
              // Move element to the same position vertically
              var yPosition = window.pageYOffset || document.documentElement.scrollTop;
              this.fakeElem.style.top = yPosition + 'px';

              this.fakeElem.setAttribute('readonly', '');
              this.fakeElem.value = this.text;

              this.container.appendChild(this.fakeElem);

              this.selectedText = (0, _select2.default)(this.fakeElem);
              this.copyText();
            }
          }, {
            key: 'removeFake',
            value: function removeFake() {
              if (this.fakeHandler) {
                this.container.removeEventListener('click', this.fakeHandlerCallback);
                this.fakeHandler = null;
                this.fakeHandlerCallback = null;
              }

              if (this.fakeElem) {
                this.container.removeChild(this.fakeElem);
                this.fakeElem = null;
              }
            }
          }, {
            key: 'selectTarget',
            value: function selectTarget() {
              this.selectedText = (0, _select2.default)(this.target);
              this.copyText();
            }
          }, {
            key: 'copyText',
            value: function copyText() {
              var succeeded = void 0;

              try {
                succeeded = document.execCommand(this.action);
              } catch (err) {
                succeeded = false;
              }

              this.handleResult(succeeded);
            }
          }, {
            key: 'handleResult',
            value: function handleResult(succeeded) {
              this.emitter.emit(succeeded ? 'success' : 'error', {
                action: this.action,
                text: this.selectedText,
                trigger: this.trigger,
                clearSelection: this.clearSelection.bind(this)
              });
            }
          }, {
            key: 'clearSelection',
            value: function clearSelection() {
              if (this.trigger) {
                this.trigger.focus();
              }

              window.getSelection().removeAllRanges();
            }
          }, {
            key: 'destroy',
            value: function destroy() {
              this.removeFake();
            }
          }, {
            key: 'action',
            set: function set() {
              var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'copy';

              this._action = action;

              if (this._action !== 'copy' && this._action !== 'cut') {
                throw new Error('Invalid "action" value, use either "copy" or "cut"');
              }
            },
            get: function get() {
              return this._action;
            }
          }, {
            key: 'target',
            set: function set(target) {
              if (target !== undefined) {
                if (target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && target.nodeType === 1) {
                  if (this.action === 'copy' && target.hasAttribute('disabled')) {
                    throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                  }

                  if (this.action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {
                    throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');
                  }

                  this._target = target;
                } else {
                  throw new Error('Invalid "target" value, use a valid Element');
                }
              }
            },
            get: function get() {
              return this._target;
            }
          }]);

          return ClipboardAction;
        }();

        module.exports = ClipboardAction;
      });
    }, { "select": 5 }], 8: [function (require, module, exports) {
      (function (global, factory) {
        if (typeof define === "function" && define.amd) {
          define(['module', './clipboard-action', 'tiny-emitter', 'good-listener'], factory);
        } else if (typeof exports !== "undefined") {
          factory(module, require('./clipboard-action'), require('tiny-emitter'), require('good-listener'));
        } else {
          var mod = {
            exports: {}
          };
          factory(mod, global.clipboardAction, global.tinyEmitter, global.goodListener);
          global.clipboard = mod.exports;
        }
      })(this, function (module, _clipboardAction, _tinyEmitter, _goodListener) {
        'use strict';

        var _clipboardAction2 = _interopRequireDefault(_clipboardAction);

        var _tinyEmitter2 = _interopRequireDefault(_tinyEmitter);

        var _goodListener2 = _interopRequireDefault(_goodListener);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var _typeof = typeof Symbol === "function" && _typeof3(Symbol.iterator) === "symbol" ? function (obj) {
          return typeof obj === "undefined" ? "undefined" : _typeof3(obj);
        } : function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof3(obj);
        };

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        var _createClass = function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }

          return call && ((typeof call === "undefined" ? "undefined" : _typeof3(call)) === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof3(superClass)));
          }

          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }

        var Clipboard = function (_Emitter) {
          _inherits(Clipboard, _Emitter);

          /**
           * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
           * @param {Object} options
           */
          function Clipboard(trigger, options) {
            _classCallCheck(this, Clipboard);

            var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this));

            _this.resolveOptions(options);
            _this.listenClick(trigger);
            return _this;
          }

          /**
           * Defines if attributes would be resolved using internal setter functions
           * or custom functions that were passed in the constructor.
           * @param {Object} options
           */

          _createClass(Clipboard, [{
            key: 'resolveOptions',
            value: function resolveOptions() {
              var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

              this.action = typeof options.action === 'function' ? options.action : this.defaultAction;
              this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;
              this.text = typeof options.text === 'function' ? options.text : this.defaultText;
              this.container = _typeof(options.container) === 'object' ? options.container : document.body;
            }
          }, {
            key: 'listenClick',
            value: function listenClick(trigger) {
              var _this2 = this;

              this.listener = (0, _goodListener2.default)(trigger, 'click', function (e) {
                return _this2.onClick(e);
              });
            }
          }, {
            key: 'onClick',
            value: function onClick(e) {
              var trigger = e.delegateTarget || e.currentTarget;

              if (this.clipboardAction) {
                this.clipboardAction = null;
              }

              this.clipboardAction = new _clipboardAction2.default({
                action: this.action(trigger),
                target: this.target(trigger),
                text: this.text(trigger),
                container: this.container,
                trigger: trigger,
                emitter: this
              });
            }
          }, {
            key: 'defaultAction',
            value: function defaultAction(trigger) {
              return getAttributeValue('action', trigger);
            }
          }, {
            key: 'defaultTarget',
            value: function defaultTarget(trigger) {
              var selector = getAttributeValue('target', trigger);

              if (selector) {
                return document.querySelector(selector);
              }
            }
          }, {
            key: 'defaultText',
            value: function defaultText(trigger) {
              return getAttributeValue('text', trigger);
            }
          }, {
            key: 'destroy',
            value: function destroy() {
              this.listener.destroy();

              if (this.clipboardAction) {
                this.clipboardAction.destroy();
                this.clipboardAction = null;
              }
            }
          }], [{
            key: 'isSupported',
            value: function isSupported() {
              var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];

              var actions = typeof action === 'string' ? [action] : action;
              var support = !!document.queryCommandSupported;

              actions.forEach(function (action) {
                support = support && !!document.queryCommandSupported(action);
              });

              return support;
            }
          }]);

          return Clipboard;
        }(_tinyEmitter2.default);

        /**
         * Helper function to retrieve attribute value.
         * @param {String} suffix
         * @param {Element} element
         */
        function getAttributeValue(suffix, element) {
          var attribute = 'data-clipboard-' + suffix;

          if (!element.hasAttribute(attribute)) {
            return;
          }

          return element.getAttribute(attribute);
        }

        module.exports = Clipboard;
      });
    }, { "./clipboard-action": 7, "good-listener": 4, "tiny-emitter": 6 }] }, {}, [8])(8);
});
/*!

Holder - client side image placeholders
Version 2.9.4+cabil
© 2016 Ivan Malopinsky - http://imsky.co

Site:     http://holderjs.com
Issues:   https://github.com/imsky/holder/issues
License:  MIT

*/
(function (window) {
  if (!window.document) return;
  var document = window.document;

  //https://github.com/inexorabletash/polyfill/blob/master/web.js
  if (!document.querySelectorAll) {
    document.querySelectorAll = function (selectors) {
      var style = document.createElement('style'),
          elements = [],
          element;
      document.documentElement.firstChild.appendChild(style);
      document._qsa = [];

      style.styleSheet.cssText = selectors + '{x-qsa:expression(document._qsa && document._qsa.push(this))}';
      window.scrollBy(0, 0);
      style.parentNode.removeChild(style);

      while (document._qsa.length) {
        element = document._qsa.shift();
        element.style.removeAttribute('x-qsa');
        elements.push(element);
      }
      document._qsa = null;
      return elements;
    };
  }

  if (!document.querySelector) {
    document.querySelector = function (selectors) {
      var elements = document.querySelectorAll(selectors);
      return elements.length ? elements[0] : null;
    };
  }

  if (!document.getElementsByClassName) {
    document.getElementsByClassName = function (classNames) {
      classNames = String(classNames).replace(/^|\s+/g, '.');
      return document.querySelectorAll(classNames);
    };
  }

  //https://github.com/inexorabletash/polyfill
  // ES5 15.2.3.14 Object.keys ( O )
  // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/keys
  if (!Object.keys) {
    Object.keys = function (o) {
      if (o !== Object(o)) {
        throw TypeError('Object.keys called on non-object');
      }
      var ret = [],
          p;
      for (p in o) {
        if (Object.prototype.hasOwnProperty.call(o, p)) {
          ret.push(p);
        }
      }
      return ret;
    };
  }

  // ES5 15.4.4.18 Array.prototype.forEach ( callbackfn [ , thisArg ] )
  // From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach
  if (!Array.prototype.forEach) {
    Array.prototype.forEach = function (fun /*, thisp */) {
      if (this === void 0 || this === null) {
        throw TypeError();
      }

      var t = Object(this);
      var len = t.length >>> 0;
      if (typeof fun !== "function") {
        throw TypeError();
      }

      var thisp = arguments[1],
          i;
      for (i = 0; i < len; i++) {
        if (i in t) {
          fun.call(thisp, t[i], i, t);
        }
      }
    };
  }

  //https://github.com/inexorabletash/polyfill/blob/master/web.js
  (function (global) {
    var B64_ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
    global.atob = global.atob || function (input) {
      input = String(input);
      var position = 0,
          output = [],
          buffer = 0,
          bits = 0,
          n;

      input = input.replace(/\s/g, '');
      if (input.length % 4 === 0) {
        input = input.replace(/=+$/, '');
      }
      if (input.length % 4 === 1) {
        throw Error('InvalidCharacterError');
      }
      if (/[^+/0-9A-Za-z]/.test(input)) {
        throw Error('InvalidCharacterError');
      }

      while (position < input.length) {
        n = B64_ALPHABET.indexOf(input.charAt(position));
        buffer = buffer << 6 | n;
        bits += 6;

        if (bits === 24) {
          output.push(String.fromCharCode(buffer >> 16 & 0xFF));
          output.push(String.fromCharCode(buffer >> 8 & 0xFF));
          output.push(String.fromCharCode(buffer & 0xFF));
          bits = 0;
          buffer = 0;
        }
        position += 1;
      }

      if (bits === 12) {
        buffer = buffer >> 4;
        output.push(String.fromCharCode(buffer & 0xFF));
      } else if (bits === 18) {
        buffer = buffer >> 2;
        output.push(String.fromCharCode(buffer >> 8 & 0xFF));
        output.push(String.fromCharCode(buffer & 0xFF));
      }

      return output.join('');
    };

    global.btoa = global.btoa || function (input) {
      input = String(input);
      var position = 0,
          out = [],
          o1,
          o2,
          o3,
          e1,
          e2,
          e3,
          e4;

      if (/[^\x00-\xFF]/.test(input)) {
        throw Error('InvalidCharacterError');
      }

      while (position < input.length) {
        o1 = input.charCodeAt(position++);
        o2 = input.charCodeAt(position++);
        o3 = input.charCodeAt(position++);

        // 111111 112222 222233 333333
        e1 = o1 >> 2;
        e2 = (o1 & 0x3) << 4 | o2 >> 4;
        e3 = (o2 & 0xf) << 2 | o3 >> 6;
        e4 = o3 & 0x3f;

        if (position === input.length + 2) {
          e3 = 64;e4 = 64;
        } else if (position === input.length + 1) {
          e4 = 64;
        }

        out.push(B64_ALPHABET.charAt(e1), B64_ALPHABET.charAt(e2), B64_ALPHABET.charAt(e3), B64_ALPHABET.charAt(e4));
      }

      return out.join('');
    };
  })(window);

  //https://gist.github.com/jimeh/332357
  if (!Object.prototype.hasOwnProperty) {
    /*jshint -W001, -W103 */
    Object.prototype.hasOwnProperty = function (prop) {
      var proto = this.__proto__ || this.constructor.prototype;
      return prop in this && (!(prop in proto) || proto[prop] !== this[prop]);
    };
    /*jshint +W001, +W103 */
  }

  // @license http://opensource.org/licenses/MIT
  // copyright Paul Irish 2015


  // Date.now() is supported everywhere except IE8. For IE8 we use the Date.now polyfill
  //   github.com/Financial-Times/polyfill-service/blob/master/polyfills/Date.now/polyfill.js
  // as Safari 6 doesn't have support for NavigationTiming, we use a Date.now() timestamp for relative values

  // if you want values similar to what you'd get with real perf.now, place this towards the head of the page
  // but in reality, you're just getting the delta between now() calls, so it's not terribly important where it's placed


  (function () {

    if ('performance' in window === false) {
      window.performance = {};
    }

    Date.now = Date.now || function () {
      // thanks IE8
      return new Date().getTime();
    };

    if ('now' in window.performance === false) {

      var nowOffset = Date.now();

      if (performance.timing && performance.timing.navigationStart) {
        nowOffset = performance.timing.navigationStart;
      }

      window.performance.now = function now() {
        return Date.now() - nowOffset;
      };
    }
  })();

  //requestAnimationFrame polyfill for older Firefox/Chrome versions
  if (!window.requestAnimationFrame) {
    if (window.webkitRequestAnimationFrame && window.webkitCancelAnimationFrame) {
      //https://github.com/Financial-Times/polyfill-service/blob/master/polyfills/requestAnimationFrame/polyfill-webkit.js
      (function (global) {
        global.requestAnimationFrame = function (callback) {
          return webkitRequestAnimationFrame(function () {
            callback(global.performance.now());
          });
        };

        global.cancelAnimationFrame = global.webkitCancelAnimationFrame;
      })(window);
    } else if (window.mozRequestAnimationFrame && window.mozCancelAnimationFrame) {
      //https://github.com/Financial-Times/polyfill-service/blob/master/polyfills/requestAnimationFrame/polyfill-moz.js
      (function (global) {
        global.requestAnimationFrame = function (callback) {
          return mozRequestAnimationFrame(function () {
            callback(global.performance.now());
          });
        };

        global.cancelAnimationFrame = global.mozCancelAnimationFrame;
      })(window);
    } else {
      (function (global) {
        global.requestAnimationFrame = function (callback) {
          return global.setTimeout(callback, 1000 / 60);
        };

        global.cancelAnimationFrame = global.clearTimeout;
      })(window);
    }
  }
})(this);

(function webpackUniversalModuleDefinition(root, factory) {
  if ((typeof exports === "undefined" ? "undefined" : _typeof3(exports)) === 'object' && (typeof module === "undefined" ? "undefined" : _typeof3(module)) === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if ((typeof exports === "undefined" ? "undefined" : _typeof3(exports)) === 'object') exports["Holder"] = factory();else root["Holder"] = factory();
})(this, function () {
  return (/******/function (modules) {
      // webpackBootstrap
      /******/ // The module cache
      /******/var installedModules = {};

      /******/ // The require function
      /******/function __webpack_require__(moduleId) {

        /******/ // Check if module is in cache
        /******/if (installedModules[moduleId])
          /******/return installedModules[moduleId].exports;

        /******/ // Create a new module (and put it into the cache)
        /******/var module = installedModules[moduleId] = {
          /******/exports: {},
          /******/id: moduleId,
          /******/loaded: false
          /******/ };

        /******/ // Execute the module function
        /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

        /******/ // Flag the module as loaded
        /******/module.loaded = true;

        /******/ // Return the exports of the module
        /******/return module.exports;
        /******/
      }

      /******/ // expose the modules object (__webpack_modules__)
      /******/__webpack_require__.m = modules;

      /******/ // expose the module cache
      /******/__webpack_require__.c = installedModules;

      /******/ // __webpack_public_path__
      /******/__webpack_require__.p = "";

      /******/ // Load entry module and return exports
      /******/return __webpack_require__(0);
      /******/
    }(
    /************************************************************************/
    /******/[
    /* 0 */
    /***/function (module, exports, __webpack_require__) {

      /*
      Holder.js - client side image placeholders
      (c) 2012-2015 Ivan Malopinsky - http://imsky.co
      */

      module.exports = __webpack_require__(1);

      /***/
    },
    /* 1 */
    /***/function (module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function (global) {
        /*
        Holder.js - client side image placeholders
        (c) 2012-2016 Ivan Malopinsky - http://imsky.co
        */

        //Libraries and functions
        var onDomReady = __webpack_require__(2);
        var querystring = __webpack_require__(3);

        var SceneGraph = __webpack_require__(6);
        var utils = __webpack_require__(7);
        var SVG = __webpack_require__(8);
        var DOM = __webpack_require__(9);
        var Color = __webpack_require__(10);
        var constants = __webpack_require__(11);

        var svgRenderer = __webpack_require__(12);
        var sgCanvasRenderer = __webpack_require__(15);

        var extend = utils.extend;
        var dimensionCheck = utils.dimensionCheck;

        //Constants and definitions
        var SVG_NS = constants.svg_ns;

        var Holder = {
          version: constants.version,

          /**
           * Adds a theme to default settings
           *
           * @param {string} name Theme name
           * @param {Object} theme Theme object, with foreground, background, size, font, and fontweight properties.
           */
          addTheme: function addTheme(name, theme) {
            name != null && theme != null && (App.settings.themes[name] = theme);
            delete App.vars.cache.themeKeys;
            return this;
          },

          /**
           * Appends a placeholder to an element
           *
           * @param {string} src Placeholder URL string
           * @param el A selector or a reference to a DOM node
           */
          addImage: function addImage(src, el) {
            //todo: use jquery fallback if available for all QSA references
            var nodes = DOM.getNodeArray(el);
            nodes.forEach(function (node) {
              var img = DOM.newEl('img');
              var domProps = {};
              domProps[App.setup.dataAttr] = src;
              DOM.setAttr(img, domProps);
              node.appendChild(img);
            });
            return this;
          },

          /**
           * Sets whether or not an image is updated on resize.
           * If an image is set to be updated, it is immediately rendered.
           *
           * @param {Object} el Image DOM element
           * @param {Boolean} value Resizable update flag value
           */
          setResizeUpdate: function setResizeUpdate(el, value) {
            if (el.holderData) {
              el.holderData.resizeUpdate = !!value;
              if (el.holderData.resizeUpdate) {
                updateResizableElements(el);
              }
            }
          },

          /**
           * Runs Holder with options. By default runs Holder on all images with "holder.js" in their source attributes.
           *
           * @param {Object} userOptions Options object, can contain domain, themes, images, and bgnodes properties
           */
          run: function run(userOptions) {
            //todo: split processing into separate queues
            userOptions = userOptions || {};
            var engineSettings = {};
            var options = extend(App.settings, userOptions);

            App.vars.preempted = true;
            App.vars.dataAttr = options.dataAttr || App.setup.dataAttr;

            engineSettings.renderer = options.renderer ? options.renderer : App.setup.renderer;
            if (App.setup.renderers.join(',').indexOf(engineSettings.renderer) === -1) {
              engineSettings.renderer = App.setup.supportsSVG ? 'svg' : App.setup.supportsCanvas ? 'canvas' : 'html';
            }

            var images = DOM.getNodeArray(options.images);
            var bgnodes = DOM.getNodeArray(options.bgnodes);
            var stylenodes = DOM.getNodeArray(options.stylenodes);
            var objects = DOM.getNodeArray(options.objects);

            engineSettings.stylesheets = [];
            engineSettings.svgXMLStylesheet = true;
            engineSettings.noFontFallback = !!options.noFontFallback;
            engineSettings.noBackgroundSize = !!options.noBackgroundSize;

            stylenodes.forEach(function (styleNode) {
              if (styleNode.attributes.rel && styleNode.attributes.href && styleNode.attributes.rel.value == 'stylesheet') {
                var href = styleNode.attributes.href.value;
                //todo: write isomorphic relative-to-absolute URL function
                var proxyLink = DOM.newEl('a');
                proxyLink.href = href;
                var stylesheetURL = proxyLink.protocol + '//' + proxyLink.host + proxyLink.pathname + proxyLink.search;
                engineSettings.stylesheets.push(stylesheetURL);
              }
            });

            bgnodes.forEach(function (bgNode) {
              //Skip processing background nodes if getComputedStyle is unavailable, since only modern browsers would be able to use canvas or SVG to render to background
              if (!global.getComputedStyle) return;
              var backgroundImage = global.getComputedStyle(bgNode, null).getPropertyValue('background-image');
              var dataBackgroundImage = bgNode.getAttribute('data-background-src');
              var rawURL = dataBackgroundImage || backgroundImage;

              var holderURL = null;
              var holderString = options.domain + '/';
              var holderStringIndex = rawURL.indexOf(holderString);

              if (holderStringIndex === 0) {
                holderURL = rawURL;
              } else if (holderStringIndex === 1 && rawURL[0] === '?') {
                holderURL = rawURL.slice(1);
              } else {
                var fragment = rawURL.substr(holderStringIndex).match(/([^\"]*)"?\)/);
                if (fragment !== null) {
                  holderURL = fragment[1];
                } else if (rawURL.indexOf('url(') === 0) {
                  throw 'Holder: unable to parse background URL: ' + rawURL;
                }
              }

              if (holderURL) {
                var holderFlags = parseURL(holderURL, options);
                if (holderFlags) {
                  prepareDOMElement({
                    mode: 'background',
                    el: bgNode,
                    flags: holderFlags,
                    engineSettings: engineSettings
                  });
                }
              }
            });

            objects.forEach(function (object) {
              var objectAttr = {};

              try {
                objectAttr.data = object.getAttribute('data');
                objectAttr.dataSrc = object.getAttribute(App.vars.dataAttr);
              } catch (e) {}

              var objectHasSrcURL = objectAttr.data != null && objectAttr.data.indexOf(options.domain) === 0;
              var objectHasDataSrcURL = objectAttr.dataSrc != null && objectAttr.dataSrc.indexOf(options.domain) === 0;

              if (objectHasSrcURL) {
                prepareImageElement(options, engineSettings, objectAttr.data, object);
              } else if (objectHasDataSrcURL) {
                prepareImageElement(options, engineSettings, objectAttr.dataSrc, object);
              }
            });

            images.forEach(function (image) {
              var imageAttr = {};

              try {
                imageAttr.src = image.getAttribute('src');
                imageAttr.dataSrc = image.getAttribute(App.vars.dataAttr);
                imageAttr.rendered = image.getAttribute('data-holder-rendered');
              } catch (e) {}

              var imageHasSrc = imageAttr.src != null;
              var imageHasDataSrcURL = imageAttr.dataSrc != null && imageAttr.dataSrc.indexOf(options.domain) === 0;
              var imageRendered = imageAttr.rendered != null && imageAttr.rendered == 'true';

              if (imageHasSrc) {
                if (imageAttr.src.indexOf(options.domain) === 0) {
                  prepareImageElement(options, engineSettings, imageAttr.src, image);
                } else if (imageHasDataSrcURL) {
                  //Image has a valid data-src and an invalid src
                  if (imageRendered) {
                    //If the placeholder has already been render, re-render it
                    prepareImageElement(options, engineSettings, imageAttr.dataSrc, image);
                  } else {
                    //If the placeholder has not been rendered, check if the image exists and render a fallback if it doesn't
                    (function (src, options, engineSettings, dataSrc, image) {
                      utils.imageExists(src, function (exists) {
                        if (!exists) {
                          prepareImageElement(options, engineSettings, dataSrc, image);
                        }
                      });
                    })(imageAttr.src, options, engineSettings, imageAttr.dataSrc, image);
                  }
                }
              } else if (imageHasDataSrcURL) {
                prepareImageElement(options, engineSettings, imageAttr.dataSrc, image);
              }
            });

            return this;
          }
        };

        var App = {
          settings: {
            domain: 'holder.js',
            images: 'img',
            objects: 'object',
            bgnodes: 'body .holderjs',
            stylenodes: 'head link.holderjs',
            themes: {
              'gray': {
                bg: '#EEEEEE',
                fg: '#AAAAAA'
              },
              'social': {
                bg: '#3a5a97',
                fg: '#FFFFFF'
              },
              'industrial': {
                bg: '#434A52',
                fg: '#C2F200'
              },
              'sky': {
                bg: '#0D8FDB',
                fg: '#FFFFFF'
              },
              'vine': {
                bg: '#39DBAC',
                fg: '#1E292C'
              },
              'lava': {
                bg: '#F8591A',
                fg: '#1C2846'
              }
            }
          },
          defaults: {
            size: 10,
            units: 'pt',
            scale: 1 / 16
          }
        };

        /**
         * Processes provided source attribute and sets up the appropriate rendering workflow
         *
         * @private
         * @param options Instance options from Holder.run
         * @param renderSettings Instance configuration
         * @param src Image URL
         * @param el Image DOM element
         */
        function prepareImageElement(options, engineSettings, src, el) {
          var holderFlags = parseURL(src.substr(src.lastIndexOf(options.domain)), options);
          if (holderFlags) {
            prepareDOMElement({
              mode: null,
              el: el,
              flags: holderFlags,
              engineSettings: engineSettings
            });
          }
        }

        /**
         * Processes a Holder URL and extracts configuration from query string
         *
         * @private
         * @param url URL
         * @param instanceOptions Instance options from Holder.run
         */
        function parseURL(url, instanceOptions) {
          var holder = {
            theme: extend(App.settings.themes.gray, null),
            stylesheets: instanceOptions.stylesheets,
            instanceOptions: instanceOptions
          };

          var firstQuestionMark = url.indexOf('?');
          var parts = [url];

          if (firstQuestionMark !== -1) {
            parts = [url.slice(0, firstQuestionMark), url.slice(firstQuestionMark + 1)];
          }

          var basics = parts[0].split('/');

          holder.holderURL = url;

          var dimensions = basics[1];
          var dimensionData = dimensions.match(/([\d]+p?)x([\d]+p?)/);

          if (!dimensionData) return false;

          holder.fluid = dimensions.indexOf('p') !== -1;

          holder.dimensions = {
            width: dimensionData[1].replace('p', '%'),
            height: dimensionData[2].replace('p', '%')
          };

          if (parts.length === 2) {
            var options = querystring.parse(parts[1]);

            // Dimensions

            if (utils.truthy(options.ratio)) {
              holder.fluid = true;
              var ratioWidth = parseFloat(holder.dimensions.width.replace('%', ''));
              var ratioHeight = parseFloat(holder.dimensions.height.replace('%', ''));

              ratioHeight = Math.floor(100 * (ratioHeight / ratioWidth));
              ratioWidth = 100;

              holder.dimensions.width = ratioWidth + '%';
              holder.dimensions.height = ratioHeight + '%';
            }

            holder.auto = utils.truthy(options.auto);

            // Colors

            if (options.bg) {
              holder.theme.bg = utils.parseColor(options.bg);
            }

            if (options.fg) {
              holder.theme.fg = utils.parseColor(options.fg);
            }

            //todo: add automatic foreground to themes without foreground
            if (options.bg && !options.fg) {
              holder.autoFg = true;
            }

            if (options.theme && holder.instanceOptions.themes.hasOwnProperty(options.theme)) {
              holder.theme = extend(holder.instanceOptions.themes[options.theme], null);
            }

            // Text

            if (options.text) {
              holder.text = options.text;
            }

            if (options.textmode) {
              holder.textmode = options.textmode;
            }

            if (options.size) {
              holder.size = options.size;
            }

            if (options.font) {
              holder.font = options.font;
            }

            if (options.align) {
              holder.align = options.align;
            }

            if (options.lineWrap) {
              holder.lineWrap = options.lineWrap;
            }

            holder.nowrap = utils.truthy(options.nowrap);

            // Miscellaneous

            holder.outline = utils.truthy(options.outline);

            if (utils.truthy(options.random)) {
              App.vars.cache.themeKeys = App.vars.cache.themeKeys || Object.keys(holder.instanceOptions.themes);
              var _theme = App.vars.cache.themeKeys[0 | Math.random() * App.vars.cache.themeKeys.length];
              holder.theme = extend(holder.instanceOptions.themes[_theme], null);
            }
          }

          return holder;
        }

        /**
         * Modifies the DOM to fit placeholders and sets up resizable image callbacks (for fluid and automatically sized placeholders)
         *
         * @private
         * @param settings DOM prep settings
         */
        function prepareDOMElement(prepSettings) {
          var mode = prepSettings.mode;
          var el = prepSettings.el;
          var flags = prepSettings.flags;
          var _engineSettings = prepSettings.engineSettings;
          var dimensions = flags.dimensions,
              theme = flags.theme;
          var dimensionsCaption = dimensions.width + 'x' + dimensions.height;
          mode = mode == null ? flags.fluid ? 'fluid' : 'image' : mode;
          var holderTemplateRe = /holder_([a-z]+)/g;
          var dimensionsInText = false;

          if (flags.text != null) {
            theme.text = flags.text;

            //<object> SVG embedding doesn't parse Unicode properly
            if (el.nodeName.toLowerCase() === 'object') {
              var textLines = theme.text.split('\\n');
              for (var k = 0; k < textLines.length; k++) {
                textLines[k] = utils.encodeHtmlEntity(textLines[k]);
              }
              theme.text = textLines.join('\\n');
            }
          }

          if (theme.text) {
            var holderTemplateMatches = theme.text.match(holderTemplateRe);

            if (holderTemplateMatches !== null) {
              //todo: optimize template replacement
              holderTemplateMatches.forEach(function (match) {
                if (match === 'holder_dimensions') {
                  theme.text = theme.text.replace(match, dimensionsCaption);
                }
              });
            }
          }

          var holderURL = flags.holderURL;
          var engineSettings = extend(_engineSettings, null);

          if (flags.font) {
            /*
            If external fonts are used in a <img> placeholder rendered with SVG, Holder falls back to canvas.
             This is done because Firefox and Chrome disallow embedded SVGs from referencing external assets.
            The workaround is either to change the placeholder tag from <img> to <object> or to use the canvas renderer.
            */
            theme.font = flags.font;
            if (!engineSettings.noFontFallback && el.nodeName.toLowerCase() === 'img' && App.setup.supportsCanvas && engineSettings.renderer === 'svg') {
              engineSettings = extend(engineSettings, {
                renderer: 'canvas'
              });
            }
          }

          //Chrome and Opera require a quick 10ms re-render if web fonts are used with canvas
          if (flags.font && engineSettings.renderer == 'canvas') {
            engineSettings.reRender = true;
          }

          if (mode == 'background') {
            if (el.getAttribute('data-background-src') == null) {
              DOM.setAttr(el, {
                'data-background-src': holderURL
              });
            }
          } else {
            var domProps = {};
            domProps[App.vars.dataAttr] = holderURL;
            DOM.setAttr(el, domProps);
          }

          flags.theme = theme;

          //todo consider using all renderSettings in holderData
          el.holderData = {
            flags: flags,
            engineSettings: engineSettings
          };

          if (mode == 'image' || mode == 'fluid') {
            DOM.setAttr(el, {
              'alt': theme.text ? dimensionsInText ? theme.text : theme.text + ' [' + dimensionsCaption + ']' : dimensionsCaption
            });
          }

          var renderSettings = {
            mode: mode,
            el: el,
            holderSettings: {
              dimensions: dimensions,
              theme: theme,
              flags: flags
            },
            engineSettings: engineSettings
          };

          if (mode == 'image') {
            if (!flags.auto) {
              el.style.width = dimensions.width + 'px';
              el.style.height = dimensions.height + 'px';
            }

            if (engineSettings.renderer == 'html') {
              el.style.backgroundColor = theme.bg;
            } else {
              render(renderSettings);

              if (flags.textmode == 'exact') {
                el.holderData.resizeUpdate = true;
                App.vars.resizableImages.push(el);
                updateResizableElements(el);
              }
            }
          } else if (mode == 'background' && engineSettings.renderer != 'html') {
            render(renderSettings);
          } else if (mode == 'fluid') {
            el.holderData.resizeUpdate = true;

            if (dimensions.height.slice(-1) == '%') {
              el.style.height = dimensions.height;
            } else if (flags.auto == null || !flags.auto) {
              el.style.height = dimensions.height + 'px';
            }
            if (dimensions.width.slice(-1) == '%') {
              el.style.width = dimensions.width;
            } else if (flags.auto == null || !flags.auto) {
              el.style.width = dimensions.width + 'px';
            }
            if (el.style.display == 'inline' || el.style.display === '' || el.style.display == 'none') {
              el.style.display = 'block';
            }

            setInitialDimensions(el);

            if (engineSettings.renderer == 'html') {
              el.style.backgroundColor = theme.bg;
            } else {
              App.vars.resizableImages.push(el);
              updateResizableElements(el);
            }
          }
        }

        /**
         * Core function that takes output from renderers and sets it as the source or background-image of the target element
         *
         * @private
         * @param renderSettings Renderer settings
         */
        function render(renderSettings) {
          var image = null;
          var mode = renderSettings.mode;
          var el = renderSettings.el;
          var holderSettings = renderSettings.holderSettings;
          var engineSettings = renderSettings.engineSettings;

          switch (engineSettings.renderer) {
            case 'svg':
              if (!App.setup.supportsSVG) return;
              break;
            case 'canvas':
              if (!App.setup.supportsCanvas) return;
              break;
            default:
              return;
          }

          //todo: move generation of scene up to flag generation to reduce extra object creation
          var scene = {
            width: holderSettings.dimensions.width,
            height: holderSettings.dimensions.height,
            theme: holderSettings.theme,
            flags: holderSettings.flags
          };

          var sceneGraph = buildSceneGraph(scene);

          function getRenderedImage() {
            var image = null;
            switch (engineSettings.renderer) {
              case 'canvas':
                image = sgCanvasRenderer(sceneGraph, renderSettings);
                break;
              case 'svg':
                image = svgRenderer(sceneGraph, renderSettings);
                break;
              default:
                throw 'Holder: invalid renderer: ' + engineSettings.renderer;
            }

            return image;
          }

          image = getRenderedImage();

          if (image == null) {
            throw 'Holder: couldn\'t render placeholder';
          }

          //todo: add <object> canvas rendering
          if (mode == 'background') {
            el.style.backgroundImage = 'url(' + image + ')';

            if (!engineSettings.noBackgroundSize) {
              el.style.backgroundSize = scene.width + 'px ' + scene.height + 'px';
            }
          } else {
            if (el.nodeName.toLowerCase() === 'img') {
              DOM.setAttr(el, {
                'src': image
              });
            } else if (el.nodeName.toLowerCase() === 'object') {
              DOM.setAttr(el, {
                'data': image,
                'type': 'image/svg+xml'
              });
            }
            if (engineSettings.reRender) {
              global.setTimeout(function () {
                var image = getRenderedImage();
                if (image == null) {
                  throw 'Holder: couldn\'t render placeholder';
                }
                //todo: refactor this code into a function
                if (el.nodeName.toLowerCase() === 'img') {
                  DOM.setAttr(el, {
                    'src': image
                  });
                } else if (el.nodeName.toLowerCase() === 'object') {
                  DOM.setAttr(el, {
                    'data': image,
                    'type': 'image/svg+xml'
                  });
                }
              }, 150);
            }
          }
          //todo: account for re-rendering
          DOM.setAttr(el, {
            'data-holder-rendered': true
          });
        }

        /**
         * Core function that takes a Holder scene description and builds a scene graph
         *
         * @private
         * @param scene Holder scene object
         */
        //todo: make this function reusable
        //todo: merge app defaults and setup properties into the scene argument
        function buildSceneGraph(scene) {
          var fontSize = App.defaults.size;
          if (parseFloat(scene.theme.size)) {
            fontSize = scene.theme.size;
          } else if (parseFloat(scene.flags.size)) {
            fontSize = scene.flags.size;
          }

          scene.font = {
            family: scene.theme.font ? scene.theme.font : 'Arial, Helvetica, Open Sans, sans-serif',
            size: textSize(scene.width, scene.height, fontSize, App.defaults.scale),
            units: scene.theme.units ? scene.theme.units : App.defaults.units,
            weight: scene.theme.fontweight ? scene.theme.fontweight : 'bold'
          };

          scene.text = scene.theme.text || Math.floor(scene.width) + 'x' + Math.floor(scene.height);

          scene.noWrap = scene.theme.nowrap || scene.flags.nowrap;

          scene.align = scene.theme.align || scene.flags.align || 'center';

          switch (scene.flags.textmode) {
            case 'literal':
              scene.text = scene.flags.dimensions.width + 'x' + scene.flags.dimensions.height;
              break;
            case 'exact':
              if (!scene.flags.exactDimensions) break;
              scene.text = Math.floor(scene.flags.exactDimensions.width) + 'x' + Math.floor(scene.flags.exactDimensions.height);
              break;
          }

          var lineWrap = scene.flags.lineWrap || App.setup.lineWrapRatio;
          var sceneMargin = scene.width * lineWrap;
          var maxLineWidth = sceneMargin;

          var sceneGraph = new SceneGraph({
            width: scene.width,
            height: scene.height
          });

          var Shape = sceneGraph.Shape;

          var holderBg = new Shape.Rect('holderBg', {
            fill: scene.theme.bg
          });

          holderBg.resize(scene.width, scene.height);
          sceneGraph.root.add(holderBg);

          if (scene.flags.outline) {
            var outlineColor = new Color(holderBg.properties.fill);
            outlineColor = outlineColor.lighten(outlineColor.lighterThan('7f7f7f') ? -0.1 : 0.1);
            holderBg.properties.outline = {
              fill: outlineColor.toHex(true),
              width: 2
            };
          }

          var holderTextColor = scene.theme.fg;

          if (scene.flags.autoFg) {
            var holderBgColor = new Color(holderBg.properties.fill);
            var lightColor = new Color('fff');
            var darkColor = new Color('000', {
              'alpha': 0.285714
            });

            holderTextColor = holderBgColor.blendAlpha(holderBgColor.lighterThan('7f7f7f') ? darkColor : lightColor).toHex(true);
          }

          var holderTextGroup = new Shape.Group('holderTextGroup', {
            text: scene.text,
            align: scene.align,
            font: scene.font,
            fill: holderTextColor
          });

          holderTextGroup.moveTo(null, null, 1);
          sceneGraph.root.add(holderTextGroup);

          var tpdata = holderTextGroup.textPositionData = stagingRenderer(sceneGraph);
          if (!tpdata) {
            throw 'Holder: staging fallback not supported yet.';
          }
          holderTextGroup.properties.leading = tpdata.boundingBox.height;

          var textNode = null;
          var line = null;

          function finalizeLine(parent, line, width, height) {
            line.width = width;
            line.height = height;
            parent.width = Math.max(parent.width, line.width);
            parent.height += line.height;
          }

          if (tpdata.lineCount > 1) {
            var offsetX = 0;
            var offsetY = 0;
            var lineIndex = 0;
            var lineKey;
            line = new Shape.Group('line' + lineIndex);

            //Double margin so that left/right-aligned next is not flush with edge of image
            if (scene.align === 'left' || scene.align === 'right') {
              maxLineWidth = scene.width * (1 - (1 - lineWrap) * 2);
            }

            for (var i = 0; i < tpdata.words.length; i++) {
              var word = tpdata.words[i];
              textNode = new Shape.Text(word.text);
              var newline = word.text == '\\n';
              if (!scene.noWrap && (offsetX + word.width >= maxLineWidth || newline === true)) {
                finalizeLine(holderTextGroup, line, offsetX, holderTextGroup.properties.leading);
                holderTextGroup.add(line);
                offsetX = 0;
                offsetY += holderTextGroup.properties.leading;
                lineIndex += 1;
                line = new Shape.Group('line' + lineIndex);
                line.y = offsetY;
              }
              if (newline === true) {
                continue;
              }
              textNode.moveTo(offsetX, 0);
              offsetX += tpdata.spaceWidth + word.width;
              line.add(textNode);
            }

            finalizeLine(holderTextGroup, line, offsetX, holderTextGroup.properties.leading);
            holderTextGroup.add(line);

            if (scene.align === 'left') {
              holderTextGroup.moveTo(scene.width - sceneMargin, null, null);
            } else if (scene.align === 'right') {
              for (lineKey in holderTextGroup.children) {
                line = holderTextGroup.children[lineKey];
                line.moveTo(scene.width - line.width, null, null);
              }

              holderTextGroup.moveTo(0 - (scene.width - sceneMargin), null, null);
            } else {
              for (lineKey in holderTextGroup.children) {
                line = holderTextGroup.children[lineKey];
                line.moveTo((holderTextGroup.width - line.width) / 2, null, null);
              }

              holderTextGroup.moveTo((scene.width - holderTextGroup.width) / 2, null, null);
            }

            holderTextGroup.moveTo(null, (scene.height - holderTextGroup.height) / 2, null);

            //If the text exceeds vertical space, move it down so the first line is visible
            if ((scene.height - holderTextGroup.height) / 2 < 0) {
              holderTextGroup.moveTo(null, 0, null);
            }
          } else {
            textNode = new Shape.Text(scene.text);
            line = new Shape.Group('line0');
            line.add(textNode);
            holderTextGroup.add(line);

            if (scene.align === 'left') {
              holderTextGroup.moveTo(scene.width - sceneMargin, null, null);
            } else if (scene.align === 'right') {
              holderTextGroup.moveTo(0 - (scene.width - sceneMargin), null, null);
            } else {
              holderTextGroup.moveTo((scene.width - tpdata.boundingBox.width) / 2, null, null);
            }

            holderTextGroup.moveTo(null, (scene.height - tpdata.boundingBox.height) / 2, null);
          }

          //todo: renderlist
          return sceneGraph;
        }

        /**
         * Adaptive text sizing function
         *
         * @private
         * @param width Parent width
         * @param height Parent height
         * @param fontSize Requested text size
         * @param scale Proportional scale of text
         */
        function textSize(width, height, fontSize, scale) {
          var stageWidth = parseInt(width, 10);
          var stageHeight = parseInt(height, 10);

          var bigSide = Math.max(stageWidth, stageHeight);
          var smallSide = Math.min(stageWidth, stageHeight);

          var newHeight = 0.8 * Math.min(smallSide, bigSide * scale);
          return Math.round(Math.max(fontSize, newHeight));
        }

        /**
         * Iterates over resizable (fluid or auto) placeholders and renders them
         *
         * @private
         * @param element Optional element selector, specified only if a specific element needs to be re-rendered
         */
        function updateResizableElements(element) {
          var images;
          if (element == null || element.nodeType == null) {
            images = App.vars.resizableImages;
          } else {
            images = [element];
          }
          for (var i = 0, l = images.length; i < l; i++) {
            var el = images[i];
            if (el.holderData) {
              var flags = el.holderData.flags;
              var dimensions = dimensionCheck(el);
              if (dimensions) {
                if (!el.holderData.resizeUpdate) {
                  continue;
                }

                if (flags.fluid && flags.auto) {
                  var fluidConfig = el.holderData.fluidConfig;
                  switch (fluidConfig.mode) {
                    case 'width':
                      dimensions.height = dimensions.width / fluidConfig.ratio;
                      break;
                    case 'height':
                      dimensions.width = dimensions.height * fluidConfig.ratio;
                      break;
                  }
                }

                var settings = {
                  mode: 'image',
                  holderSettings: {
                    dimensions: dimensions,
                    theme: flags.theme,
                    flags: flags
                  },
                  el: el,
                  engineSettings: el.holderData.engineSettings
                };

                if (flags.textmode == 'exact') {
                  flags.exactDimensions = dimensions;
                  settings.holderSettings.dimensions = flags.dimensions;
                }

                render(settings);
              } else {
                setInvisible(el);
              }
            }
          }
        }

        /**
         * Sets up aspect ratio metadata for fluid placeholders, in order to preserve proportions when resizing
         *
         * @private
         * @param el Image DOM element
         */
        function setInitialDimensions(el) {
          if (el.holderData) {
            var dimensions = dimensionCheck(el);
            if (dimensions) {
              var flags = el.holderData.flags;

              var fluidConfig = {
                fluidHeight: flags.dimensions.height.slice(-1) == '%',
                fluidWidth: flags.dimensions.width.slice(-1) == '%',
                mode: null,
                initialDimensions: dimensions
              };

              if (fluidConfig.fluidWidth && !fluidConfig.fluidHeight) {
                fluidConfig.mode = 'width';
                fluidConfig.ratio = fluidConfig.initialDimensions.width / parseFloat(flags.dimensions.height);
              } else if (!fluidConfig.fluidWidth && fluidConfig.fluidHeight) {
                fluidConfig.mode = 'height';
                fluidConfig.ratio = parseFloat(flags.dimensions.width) / fluidConfig.initialDimensions.height;
              }

              el.holderData.fluidConfig = fluidConfig;
            } else {
              setInvisible(el);
            }
          }
        }

        /**
         * Iterates through all current invisible images, and if they're visible, renders them and removes them from further checks. Runs every animation frame.
         *
         * @private
         */
        function visibilityCheck() {
          var renderableImages = [];
          var keys = Object.keys(App.vars.invisibleImages);
          var el;

          keys.forEach(function (key) {
            el = App.vars.invisibleImages[key];
            if (dimensionCheck(el) && el.nodeName.toLowerCase() == 'img') {
              renderableImages.push(el);
              delete App.vars.invisibleImages[key];
            }
          });

          if (renderableImages.length) {
            Holder.run({
              images: renderableImages
            });
          }

          // Done to prevent 100% CPU usage via aggressive calling of requestAnimationFrame
          setTimeout(function () {
            global.requestAnimationFrame(visibilityCheck);
          }, 10);
        }

        /**
         * Starts checking for invisible placeholders if not doing so yet. Does nothing otherwise.
         *
         * @private
         */
        function startVisibilityCheck() {
          if (!App.vars.visibilityCheckStarted) {
            global.requestAnimationFrame(visibilityCheck);
            App.vars.visibilityCheckStarted = true;
          }
        }

        /**
         * Sets a unique ID for an image detected to be invisible and adds it to the map of invisible images checked by visibilityCheck
         *
         * @private
         * @param el Invisible DOM element
         */
        function setInvisible(el) {
          if (!el.holderData.invisibleId) {
            App.vars.invisibleId += 1;
            App.vars.invisibleImages['i' + App.vars.invisibleId] = el;
            el.holderData.invisibleId = App.vars.invisibleId;
          }
        }

        //todo: see if possible to convert stagingRenderer to use HTML only
        var stagingRenderer = function () {
          var svg = null,
              stagingText = null,
              stagingTextNode = null;
          return function (graph) {
            var rootNode = graph.root;
            if (App.setup.supportsSVG) {
              var firstTimeSetup = false;
              var tnode = function tnode(text) {
                return document.createTextNode(text);
              };
              if (svg == null || svg.parentNode !== document.body) {
                firstTimeSetup = true;
              }

              svg = SVG.initSVG(svg, rootNode.properties.width, rootNode.properties.height);
              //Show staging element before staging
              svg.style.display = 'block';

              if (firstTimeSetup) {
                stagingText = DOM.newEl('text', SVG_NS);
                stagingTextNode = tnode(null);
                DOM.setAttr(stagingText, {
                  x: 0
                });
                stagingText.appendChild(stagingTextNode);
                svg.appendChild(stagingText);
                document.body.appendChild(svg);
                svg.style.visibility = 'hidden';
                svg.style.position = 'absolute';
                svg.style.top = '-100%';
                svg.style.left = '-100%';
                //todo: workaround for zero-dimension <svg> tag in Opera 12
                //svg.setAttribute('width', 0);
                //svg.setAttribute('height', 0);
              }

              var holderTextGroup = rootNode.children.holderTextGroup;
              var htgProps = holderTextGroup.properties;
              DOM.setAttr(stagingText, {
                'y': htgProps.font.size,
                'style': utils.cssProps({
                  'font-weight': htgProps.font.weight,
                  'font-size': htgProps.font.size + htgProps.font.units,
                  'font-family': htgProps.font.family
                })
              });

              //Get bounding box for the whole string (total width and height)
              stagingTextNode.nodeValue = htgProps.text;
              var stagingTextBBox = stagingText.getBBox();

              //Get line count and split the string into words
              var lineCount = Math.ceil(stagingTextBBox.width / rootNode.properties.width);
              var words = htgProps.text.split(' ');
              var newlines = htgProps.text.match(/\\n/g);
              lineCount += newlines == null ? 0 : newlines.length;

              //Get bounding box for the string with spaces removed
              stagingTextNode.nodeValue = htgProps.text.replace(/[ ]+/g, '');
              var computedNoSpaceLength = stagingText.getComputedTextLength();

              //Compute average space width
              var diffLength = stagingTextBBox.width - computedNoSpaceLength;
              var spaceWidth = Math.round(diffLength / Math.max(1, words.length - 1));

              //Get widths for every word with space only if there is more than one line
              var wordWidths = [];
              if (lineCount > 1) {
                stagingTextNode.nodeValue = '';
                for (var i = 0; i < words.length; i++) {
                  if (words[i].length === 0) continue;
                  stagingTextNode.nodeValue = utils.decodeHtmlEntity(words[i]);
                  var bbox = stagingText.getBBox();
                  wordWidths.push({
                    text: words[i],
                    width: bbox.width
                  });
                }
              }

              //Hide staging element after staging
              svg.style.display = 'none';

              return {
                spaceWidth: spaceWidth,
                lineCount: lineCount,
                boundingBox: stagingTextBBox,
                words: wordWidths
              };
            } else {
              //todo: canvas fallback for measuring text on android 2.3
              return false;
            }
          };
        }();

        //Helpers

        /**
         * Prevents a function from being called too often, waits until a timer elapses to call it again
         *
         * @param fn Function to call
         */
        function debounce(fn) {
          if (!App.vars.debounceTimer) fn.call(this);
          if (App.vars.debounceTimer) global.clearTimeout(App.vars.debounceTimer);
          App.vars.debounceTimer = global.setTimeout(function () {
            App.vars.debounceTimer = null;
            fn.call(this);
          }, App.setup.debounce);
        }

        /**
         * Holder-specific resize/orientation change callback, debounced to prevent excessive execution
         */
        function resizeEvent() {
          debounce(function () {
            updateResizableElements(null);
          });
        }

        //Set up flags

        for (var flag in App.flags) {
          if (!App.flags.hasOwnProperty(flag)) continue;
          App.flags[flag].match = function (val) {
            return val.match(this.regex);
          };
        }

        //Properties set once on setup

        App.setup = {
          renderer: 'html',
          debounce: 100,
          ratio: 1,
          supportsCanvas: false,
          supportsSVG: false,
          lineWrapRatio: 0.9,
          dataAttr: 'data-src',
          renderers: ['html', 'canvas', 'svg']
        };

        //Properties modified during runtime

        App.vars = {
          preempted: false,
          resizableImages: [],
          invisibleImages: {},
          invisibleId: 0,
          visibilityCheckStarted: false,
          debounceTimer: null,
          cache: {}
        };

        //Pre-flight

        (function () {
          var canvas = DOM.newEl('canvas');

          if (canvas.getContext) {
            if (canvas.toDataURL('image/png').indexOf('data:image/png') != -1) {
              App.setup.renderer = 'canvas';
              App.setup.supportsCanvas = true;
            }
          }

          if (!!document.createElementNS && !!document.createElementNS(SVG_NS, 'svg').createSVGRect) {
            App.setup.renderer = 'svg';
            App.setup.supportsSVG = true;
          }
        })();

        //Starts checking for invisible placeholders
        startVisibilityCheck();

        if (onDomReady) {
          onDomReady(function () {
            if (!App.vars.preempted) {
              Holder.run();
            }
            if (global.addEventListener) {
              global.addEventListener('resize', resizeEvent, false);
              global.addEventListener('orientationchange', resizeEvent, false);
            } else {
              global.attachEvent('onresize', resizeEvent);
            }

            if (_typeof3(global.Turbolinks) == 'object') {
              global.document.addEventListener('page:change', function () {
                Holder.run();
              });
            }
          });
        }

        module.exports = Holder;

        /* WEBPACK VAR INJECTION */
      }).call(exports, function () {
        return this;
      }());

      /***/
    },
    /* 2 */
    /***/function (module, exports) {

      /*!
       * onDomReady.js 1.4.0 (c) 2013 Tubal Martin - MIT license
       *
       * Specially modified to work with Holder.js
       */

      function _onDomReady(win) {
        //Lazy loading fix for Firefox < 3.6
        //http://webreflection.blogspot.com/2009/11/195-chars-to-help-lazy-loading.html
        if (document.readyState == null && document.addEventListener) {
          document.addEventListener("DOMContentLoaded", function DOMContentLoaded() {
            document.removeEventListener("DOMContentLoaded", DOMContentLoaded, false);
            document.readyState = "complete";
          }, false);
          document.readyState = "loading";
        }

        var doc = win.document,
            docElem = doc.documentElement,
            LOAD = "load",
            FALSE = false,
            ONLOAD = "on" + LOAD,
            COMPLETE = "complete",
            READYSTATE = "readyState",
            ATTACHEVENT = "attachEvent",
            DETACHEVENT = "detachEvent",
            ADDEVENTLISTENER = "addEventListener",
            DOMCONTENTLOADED = "DOMContentLoaded",
            ONREADYSTATECHANGE = "onreadystatechange",
            REMOVEEVENTLISTENER = "removeEventListener",


        // W3C Event model
        w3c = ADDEVENTLISTENER in doc,
            _top = FALSE,


        // isReady: Is the DOM ready to be used? Set to true once it occurs.
        isReady = FALSE,


        // Callbacks pending execution until DOM is ready
        callbacks = [];

        // Handle when the DOM is ready
        function ready(fn) {
          if (!isReady) {

            // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
            if (!doc.body) {
              return defer(ready);
            }

            // Remember that the DOM is ready
            isReady = true;

            // Execute all callbacks
            while (fn = callbacks.shift()) {
              defer(fn);
            }
          }
        }

        // The ready event handler
        function completed(event) {
          // readyState === "complete" is good enough for us to call the dom ready in oldIE
          if (w3c || event.type === LOAD || doc[READYSTATE] === COMPLETE) {
            detach();
            ready();
          }
        }

        // Clean-up method for dom ready events
        function detach() {
          if (w3c) {
            doc[REMOVEEVENTLISTENER](DOMCONTENTLOADED, completed, FALSE);
            win[REMOVEEVENTLISTENER](LOAD, completed, FALSE);
          } else {
            doc[DETACHEVENT](ONREADYSTATECHANGE, completed);
            win[DETACHEVENT](ONLOAD, completed);
          }
        }

        // Defers a function, scheduling it to run after the current call stack has cleared.
        function defer(fn, wait) {
          // Allow 0 to be passed
          setTimeout(fn, +wait >= 0 ? wait : 1);
        }

        // Attach the listeners:

        // Catch cases where onDomReady is called after the browser event has already occurred.
        // we once tried to use readyState "interactive" here, but it caused issues like the one
        // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
        if (doc[READYSTATE] === COMPLETE) {
          // Handle it asynchronously to allow scripts the opportunity to delay ready
          defer(ready);

          // Standards-based browsers support DOMContentLoaded
        } else if (w3c) {
          // Use the handy event callback
          doc[ADDEVENTLISTENER](DOMCONTENTLOADED, completed, FALSE);

          // A fallback to window.onload, that will always work
          win[ADDEVENTLISTENER](LOAD, completed, FALSE);

          // If IE event model is used
        } else {
          // Ensure firing before onload, maybe late but safe also for iframes
          doc[ATTACHEVENT](ONREADYSTATECHANGE, completed);

          // A fallback to window.onload, that will always work
          win[ATTACHEVENT](ONLOAD, completed);

          // If IE and not a frame
          // continually check to see if the document is ready
          try {
            _top = win.frameElement == null && docElem;
          } catch (e) {}

          if (_top && _top.doScroll) {
            (function doScrollCheck() {
              if (!isReady) {
                try {
                  // Use the trick by Diego Perini
                  // http://javascript.nwbox.com/IEContentLoaded/
                  _top.doScroll("left");
                } catch (e) {
                  return defer(doScrollCheck, 50);
                }

                // detach all dom ready events
                detach();

                // and execute any waiting functions
                ready();
              }
            })();
          }
        }

        function onDomReady(fn) {
          // If DOM is ready, execute the function (async), otherwise wait
          isReady ? defer(fn) : callbacks.push(fn);
        }

        // Add version
        onDomReady.version = "1.4.0";
        // Add method to check if DOM is ready
        onDomReady.isReady = function () {
          return isReady;
        };

        return onDomReady;
      }

      module.exports = typeof window !== "undefined" && _onDomReady(window);

      /***/
    },
    /* 3 */
    /***/function (module, exports, __webpack_require__) {

      //Modified version of component/querystring
      //Changes: updated dependencies, dot notation parsing, JSHint fixes
      //Fork at https://github.com/imsky/querystring

      /**
       * Module dependencies.
       */

      var encode = encodeURIComponent;
      var decode = decodeURIComponent;
      var trim = __webpack_require__(4);
      var type = __webpack_require__(5);

      var arrayRegex = /(\w+)\[(\d+)\]/;
      var objectRegex = /\w+\.\w+/;

      /**
       * Parse the given query `str`.
       *
       * @param {String} str
       * @return {Object}
       * @api public
       */

      exports.parse = function (str) {
        if ('string' !== typeof str) return {};

        str = trim(str);
        if ('' === str) return {};
        if ('?' === str.charAt(0)) str = str.slice(1);

        var obj = {};
        var pairs = str.split('&');
        for (var i = 0; i < pairs.length; i++) {
          var parts = pairs[i].split('=');
          var key = decode(parts[0]);
          var m, ctx, prop;

          if (m = arrayRegex.exec(key)) {
            obj[m[1]] = obj[m[1]] || [];
            obj[m[1]][m[2]] = decode(parts[1]);
            continue;
          }

          if (m = objectRegex.test(key)) {
            m = key.split('.');
            ctx = obj;

            while (m.length) {
              prop = m.shift();

              if (!prop.length) continue;

              if (!ctx[prop]) {
                ctx[prop] = {};
              } else if (ctx[prop] && _typeof3(ctx[prop]) !== 'object') {
                break;
              }

              if (!m.length) {
                ctx[prop] = decode(parts[1]);
              }

              ctx = ctx[prop];
            }

            continue;
          }

          obj[parts[0]] = null == parts[1] ? '' : decode(parts[1]);
        }

        return obj;
      };

      /**
       * Stringify the given `obj`.
       *
       * @param {Object} obj
       * @return {String}
       * @api public
       */

      exports.stringify = function (obj) {
        if (!obj) return '';
        var pairs = [];

        for (var key in obj) {
          var value = obj[key];

          if ('array' == type(value)) {
            for (var i = 0; i < value.length; ++i) {
              pairs.push(encode(key + '[' + i + ']') + '=' + encode(value[i]));
            }
            continue;
          }

          pairs.push(encode(key) + '=' + encode(obj[key]));
        }

        return pairs.join('&');
      };

      /***/
    },
    /* 4 */
    /***/function (module, exports) {

      exports = module.exports = trim;

      function trim(str) {
        return str.replace(/^\s*|\s*$/g, '');
      }

      exports.left = function (str) {
        return str.replace(/^\s*/, '');
      };

      exports.right = function (str) {
        return str.replace(/\s*$/, '');
      };

      /***/
    },
    /* 5 */
    /***/function (module, exports) {

      /**
       * toString ref.
       */

      var toString = Object.prototype.toString;

      /**
       * Return the type of `val`.
       *
       * @param {Mixed} val
       * @return {String}
       * @api public
       */

      module.exports = function (val) {
        switch (toString.call(val)) {
          case '[object Date]':
            return 'date';
          case '[object RegExp]':
            return 'regexp';
          case '[object Arguments]':
            return 'arguments';
          case '[object Array]':
            return 'array';
          case '[object Error]':
            return 'error';
        }

        if (val === null) return 'null';
        if (val === undefined) return 'undefined';
        if (val !== val) return 'nan';
        if (val && val.nodeType === 1) return 'element';

        if (isBuffer(val)) return 'buffer';

        val = val.valueOf ? val.valueOf() : Object.prototype.valueOf.apply(val);

        return typeof val === "undefined" ? "undefined" : _typeof3(val);
      };

      // code borrowed from https://github.com/feross/is-buffer/blob/master/index.js
      function isBuffer(obj) {
        return !!(obj != null && (obj._isBuffer || // For Safari 5-7 (missing Object.prototype.constructor)
        obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)));
      }

      /***/
    },
    /* 6 */
    /***/function (module, exports) {

      var SceneGraph = function SceneGraph(sceneProperties) {
        var nodeCount = 1;

        //todo: move merge to helpers section
        function merge(parent, child) {
          for (var prop in child) {
            parent[prop] = child[prop];
          }
          return parent;
        }

        var SceneNode = function SceneNode(name) {
          nodeCount++;
          this.parent = null;
          this.children = {};
          this.id = nodeCount;
          this.name = 'n' + nodeCount;
          if (typeof name !== 'undefined') {
            this.name = name;
          }
          this.x = this.y = this.z = 0;
          this.width = this.height = 0;
        };

        SceneNode.prototype.resize = function (width, height) {
          if (width != null) {
            this.width = width;
          }
          if (height != null) {
            this.height = height;
          }
        };

        SceneNode.prototype.moveTo = function (x, y, z) {
          this.x = x != null ? x : this.x;
          this.y = y != null ? y : this.y;
          this.z = z != null ? z : this.z;
        };

        SceneNode.prototype.add = function (child) {
          var name = child.name;
          if (typeof this.children[name] === 'undefined') {
            this.children[name] = child;
            child.parent = this;
          } else {
            throw 'SceneGraph: child already exists: ' + name;
          }
        };

        var RootNode = function RootNode() {
          SceneNode.call(this, 'root');
          this.properties = sceneProperties;
        };

        RootNode.prototype = new SceneNode();

        var Shape = function Shape(name, props) {
          SceneNode.call(this, name);
          this.properties = {
            'fill': '#000000'
          };
          if (typeof props !== 'undefined') {
            merge(this.properties, props);
          } else if (typeof name !== 'undefined' && typeof name !== 'string') {
            throw 'SceneGraph: invalid node name';
          }
        };

        Shape.prototype = new SceneNode();

        var Group = function Group() {
          Shape.apply(this, arguments);
          this.type = 'group';
        };

        Group.prototype = new Shape();

        var Rect = function Rect() {
          Shape.apply(this, arguments);
          this.type = 'rect';
        };

        Rect.prototype = new Shape();

        var Text = function Text(text) {
          Shape.call(this);
          this.type = 'text';
          this.properties.text = text;
        };

        Text.prototype = new Shape();

        var root = new RootNode();

        this.Shape = {
          'Rect': Rect,
          'Text': Text,
          'Group': Group
        };

        this.root = root;
        return this;
      };

      module.exports = SceneGraph;

      /***/
    },
    /* 7 */
    /***/function (module, exports) {

      /* WEBPACK VAR INJECTION */(function (global) {
        /**
        * Shallow object clone and merge
        *
        * @param a Object A
        * @param b Object B
        * @returns {Object} New object with all of A's properties, and all of B's properties, overwriting A's properties
        */
        exports.extend = function (a, b) {
          var c = {};
          for (var x in a) {
            if (a.hasOwnProperty(x)) {
              c[x] = a[x];
            }
          }
          if (b != null) {
            for (var y in b) {
              if (b.hasOwnProperty(y)) {
                c[y] = b[y];
              }
            }
          }
          return c;
        };

        /**
         * Takes a k/v list of CSS properties and returns a rule
         *
         * @param props CSS properties object
         */
        exports.cssProps = function (props) {
          var ret = [];
          for (var p in props) {
            if (props.hasOwnProperty(p)) {
              ret.push(p + ':' + props[p]);
            }
          }
          return ret.join(';');
        };

        /**
         * Encodes HTML entities in a string
         *
         * @param str Input string
         */
        exports.encodeHtmlEntity = function (str) {
          var buf = [];
          var charCode = 0;
          for (var i = str.length - 1; i >= 0; i--) {
            charCode = str.charCodeAt(i);
            if (charCode > 128) {
              buf.unshift(['&#', charCode, ';'].join(''));
            } else {
              buf.unshift(str[i]);
            }
          }
          return buf.join('');
        };

        /**
         * Checks if an image exists
         *
         * @param src URL of image
         * @param callback Callback to call once image status has been found
         */
        exports.imageExists = function (src, callback) {
          var image = new Image();
          image.onerror = function () {
            callback.call(this, false);
          };
          image.onload = function () {
            callback.call(this, true);
          };
          image.src = src;
        };

        /**
         * Decodes HTML entities in a string
         *
         * @param str Input string
         */
        exports.decodeHtmlEntity = function (str) {
          return str.replace(/&#(\d+);/g, function (match, dec) {
            return String.fromCharCode(dec);
          });
        };

        /**
         * Returns an element's dimensions if it's visible, `false` otherwise.
         *
         * @param el DOM element
         */
        exports.dimensionCheck = function (el) {
          var dimensions = {
            height: el.clientHeight,
            width: el.clientWidth
          };

          if (dimensions.height && dimensions.width) {
            return dimensions;
          } else {
            return false;
          }
        };

        /**
         * Returns true if value is truthy or if it is "semantically truthy"
         * @param val
         */
        exports.truthy = function (val) {
          if (typeof val === 'string') {
            return val === 'true' || val === 'yes' || val === '1' || val === 'on' || val === '✓';
          }
          return !!val;
        };

        /**
         * Parses input into a well-formed CSS color
         * @param val
         */
        exports.parseColor = function (val) {
          var hexre = /(^(?:#?)[0-9a-f]{6}$)|(^(?:#?)[0-9a-f]{3}$)/i;
          var rgbre = /^rgb\((\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)$/;
          var rgbare = /^rgba\((\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(0\.\d{1,}|1)\)$/;

          var match = val.match(hexre);
          var retval;

          if (match !== null) {
            retval = match[1] || match[2];
            if (retval[0] !== '#') {
              return '#' + retval;
            } else {
              return retval;
            }
          }

          match = val.match(rgbre);

          if (match !== null) {
            retval = 'rgb(' + match.slice(1).join(',') + ')';
            return retval;
          }

          match = val.match(rgbare);

          if (match !== null) {
            retval = 'rgba(' + match.slice(1).join(',') + ')';
            return retval;
          }

          return null;
        };

        /**
         * Provides the correct scaling ratio for canvas drawing operations on HiDPI screens (e.g. Retina displays)
         */
        exports.canvasRatio = function () {
          var devicePixelRatio = 1;
          var backingStoreRatio = 1;

          if (global.document) {
            var canvas = global.document.createElement('canvas');
            if (canvas.getContext) {
              var ctx = canvas.getContext('2d');
              devicePixelRatio = global.devicePixelRatio || 1;
              backingStoreRatio = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;
            }
          }

          return devicePixelRatio / backingStoreRatio;
        };
        /* WEBPACK VAR INJECTION */
      }).call(exports, function () {
        return this;
      }());

      /***/
    },
    /* 8 */
    /***/function (module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function (global) {
        var DOM = __webpack_require__(9);

        var SVG_NS = 'http://www.w3.org/2000/svg';
        var NODE_TYPE_COMMENT = 8;

        /**
         * Generic SVG element creation function
         *
         * @param svg SVG context, set to null if new
         * @param width Document width
         * @param height Document height
         */
        exports.initSVG = function (svg, width, height) {
          var defs,
              style,
              initialize = false;

          if (svg && svg.querySelector) {
            style = svg.querySelector('style');
            if (style === null) {
              initialize = true;
            }
          } else {
            svg = DOM.newEl('svg', SVG_NS);
            initialize = true;
          }

          if (initialize) {
            defs = DOM.newEl('defs', SVG_NS);
            style = DOM.newEl('style', SVG_NS);
            DOM.setAttr(style, {
              'type': 'text/css'
            });
            defs.appendChild(style);
            svg.appendChild(defs);
          }

          //IE throws an exception if this is set and Chrome requires it to be set
          if (svg.webkitMatchesSelector) {
            svg.setAttribute('xmlns', SVG_NS);
          }

          //Remove comment nodes
          for (var i = 0; i < svg.childNodes.length; i++) {
            if (svg.childNodes[i].nodeType === NODE_TYPE_COMMENT) {
              svg.removeChild(svg.childNodes[i]);
            }
          }

          //Remove CSS
          while (style.childNodes.length) {
            style.removeChild(style.childNodes[0]);
          }

          DOM.setAttr(svg, {
            'width': width,
            'height': height,
            'viewBox': '0 0 ' + width + ' ' + height,
            'preserveAspectRatio': 'none'
          });

          return svg;
        };

        /**
         * Converts serialized SVG to a string suitable for data URI use
         * @param svgString Serialized SVG string
         * @param [base64] Use base64 encoding for data URI
         */
        exports.svgStringToDataURI = function () {
          var rawPrefix = 'data:image/svg+xml;charset=UTF-8,';
          var base64Prefix = 'data:image/svg+xml;charset=UTF-8;base64,';

          return function (svgString, base64) {
            if (base64) {
              return base64Prefix + btoa(global.unescape(encodeURIComponent(svgString)));
            } else {
              return rawPrefix + encodeURIComponent(svgString);
            }
          };
        }();

        /**
         * Returns serialized SVG with XML processing instructions
         *
         * @param svg SVG context
         * @param stylesheets CSS stylesheets to include
         */
        exports.serializeSVG = function (svg, engineSettings) {
          if (!global.XMLSerializer) return;
          var serializer = new XMLSerializer();
          var svgCSS = '';
          var stylesheets = engineSettings.stylesheets;

          //External stylesheets: Processing Instruction method
          if (engineSettings.svgXMLStylesheet) {
            var xml = DOM.createXML();
            //Add <?xml-stylesheet ?> directives
            for (var i = stylesheets.length - 1; i >= 0; i--) {
              var csspi = xml.createProcessingInstruction('xml-stylesheet', 'href="' + stylesheets[i] + '" rel="stylesheet"');
              xml.insertBefore(csspi, xml.firstChild);
            }

            xml.removeChild(xml.documentElement);
            svgCSS = serializer.serializeToString(xml);
          }

          var svgText = serializer.serializeToString(svg);
          svgText = svgText.replace(/\&amp;(\#[0-9]{2,}\;)/g, '&$1');
          return svgCSS + svgText;
        };

        /* WEBPACK VAR INJECTION */
      }).call(exports, function () {
        return this;
      }());

      /***/
    },
    /* 9 */
    /***/function (module, exports) {

      /* WEBPACK VAR INJECTION */(function (global) {
        /**
        * Generic new DOM element function
        *
        * @param tag Tag to create
        * @param namespace Optional namespace value
        */
        exports.newEl = function (tag, namespace) {
          if (!global.document) return;

          if (namespace == null) {
            return global.document.createElement(tag);
          } else {
            return global.document.createElementNS(namespace, tag);
          }
        };

        /**
         * Generic setAttribute function
         *
         * @param el Reference to DOM element
         * @param attrs Object with attribute keys and values
         */
        exports.setAttr = function (el, attrs) {
          for (var a in attrs) {
            el.setAttribute(a, attrs[a]);
          }
        };

        /**
         * Creates a XML document
         * @private
         */
        exports.createXML = function () {
          if (!global.DOMParser) return;
          return new DOMParser().parseFromString('<xml />', 'application/xml');
        };

        /**
         * Converts a value into an array of DOM nodes
         *
         * @param val A string, a NodeList, a Node, or an HTMLCollection
         */
        exports.getNodeArray = function (val) {
          var retval = null;
          if (typeof val == 'string') {
            retval = document.querySelectorAll(val);
          } else if (global.NodeList && val instanceof global.NodeList) {
            retval = val;
          } else if (global.Node && val instanceof global.Node) {
            retval = [val];
          } else if (global.HTMLCollection && val instanceof global.HTMLCollection) {
            retval = val;
          } else if (val instanceof Array) {
            retval = val;
          } else if (val === null) {
            retval = [];
          }

          retval = Array.prototype.slice.call(retval);

          return retval;
        };

        /* WEBPACK VAR INJECTION */
      }).call(exports, function () {
        return this;
      }());

      /***/
    },
    /* 10 */
    /***/function (module, exports) {

      var Color = function Color(color, options) {
        //todo: support rgba, hsla, and rrggbbaa notation
        //todo: use CIELAB internally
        //todo: add clamp function (with sign)
        if (typeof color !== 'string') return;

        this.original = color;

        if (color.charAt(0) === '#') {
          color = color.slice(1);
        }

        if (/[^a-f0-9]+/i.test(color)) return;

        if (color.length === 3) {
          color = color.replace(/./g, '$&$&');
        }

        if (color.length !== 6) return;

        this.alpha = 1;

        if (options && options.alpha) {
          this.alpha = options.alpha;
        }

        this.set(parseInt(color, 16));
      };

      //todo: jsdocs
      Color.rgb2hex = function (r, g, b) {
        function format(decimal) {
          var hex = (decimal | 0).toString(16);
          if (decimal < 16) {
            hex = '0' + hex;
          }
          return hex;
        }

        return [r, g, b].map(format).join('');
      };

      //todo: jsdocs
      Color.hsl2rgb = function (h, s, l) {
        var H = h / 60;
        var C = (1 - Math.abs(2 * l - 1)) * s;
        var X = C * (1 - Math.abs(parseInt(H) % 2 - 1));
        var m = l - C / 2;

        var r = 0,
            g = 0,
            b = 0;

        if (H >= 0 && H < 1) {
          r = C;
          g = X;
        } else if (H >= 1 && H < 2) {
          r = X;
          g = C;
        } else if (H >= 2 && H < 3) {
          g = C;
          b = X;
        } else if (H >= 3 && H < 4) {
          g = X;
          b = C;
        } else if (H >= 4 && H < 5) {
          r = X;
          b = C;
        } else if (H >= 5 && H < 6) {
          r = C;
          b = X;
        }

        r += m;
        g += m;
        b += m;

        r = parseInt(r * 255);
        g = parseInt(g * 255);
        b = parseInt(b * 255);

        return [r, g, b];
      };

      /**
       * Sets the color from a raw RGB888 integer
       * @param raw RGB888 representation of color
       */
      //todo: refactor into a static method
      //todo: factor out individual color spaces
      //todo: add HSL, CIELAB, and CIELUV
      Color.prototype.set = function (val) {
        this.raw = val;

        var r = (this.raw & 0xFF0000) >> 16;
        var g = (this.raw & 0x00FF00) >> 8;
        var b = this.raw & 0x0000FF;

        // BT.709
        var y = 0.2126 * r + 0.7152 * g + 0.0722 * b;
        var u = -0.09991 * r - 0.33609 * g + 0.436 * b;
        var v = 0.615 * r - 0.55861 * g - 0.05639 * b;

        this.rgb = {
          r: r,
          g: g,
          b: b
        };

        this.yuv = {
          y: y,
          u: u,
          v: v
        };

        return this;
      };

      /**
       * Lighten or darken a color
       * @param multiplier Amount to lighten or darken (-1 to 1)
       */
      Color.prototype.lighten = function (multiplier) {
        var cm = Math.min(1, Math.max(0, Math.abs(multiplier))) * (multiplier < 0 ? -1 : 1);
        var bm = 255 * cm | 0;
        var cr = Math.min(255, Math.max(0, this.rgb.r + bm));
        var cg = Math.min(255, Math.max(0, this.rgb.g + bm));
        var cb = Math.min(255, Math.max(0, this.rgb.b + bm));
        var hex = Color.rgb2hex(cr, cg, cb);
        return new Color(hex);
      };

      /**
       * Output color in hex format
       * @param addHash Add a hash character to the beginning of the output
       */
      Color.prototype.toHex = function (addHash) {
        return (addHash ? '#' : '') + this.raw.toString(16);
      };

      /**
       * Returns whether or not current color is lighter than another color
       * @param color Color to compare against
       */
      Color.prototype.lighterThan = function (color) {
        if (!(color instanceof Color)) {
          color = new Color(color);
        }

        return this.yuv.y > color.yuv.y;
      };

      /**
       * Returns the result of mixing current color with another color
       * @param color Color to mix with
       * @param multiplier How much to mix with the other color
       */
      /*
      Color.prototype.mix = function (color, multiplier) {
          if (!(color instanceof Color)) {
              color = new Color(color);
          }
      	    var r = this.rgb.r;
          var g = this.rgb.g;
          var b = this.rgb.b;
          var a = this.alpha;
      	    var m = typeof multiplier !== 'undefined' ? multiplier : 0.5;
      	    //todo: write a lerp function
          r = r + m * (color.rgb.r - r);
          g = g + m * (color.rgb.g - g);
          b = b + m * (color.rgb.b - b);
          a = a + m * (color.alpha - a);
      	    return new Color(Color.rgbToHex(r, g, b), {
              'alpha': a
          });
      };
      */

      /**
       * Returns the result of blending another color on top of current color with alpha
       * @param color Color to blend on top of current color, i.e. "Ca"
       */
      //todo: see if .blendAlpha can be merged into .mix
      Color.prototype.blendAlpha = function (color) {
        if (!(color instanceof Color)) {
          color = new Color(color);
        }

        var Ca = color;
        var Cb = this;

        //todo: write alpha blending function
        var r = Ca.alpha * Ca.rgb.r + (1 - Ca.alpha) * Cb.rgb.r;
        var g = Ca.alpha * Ca.rgb.g + (1 - Ca.alpha) * Cb.rgb.g;
        var b = Ca.alpha * Ca.rgb.b + (1 - Ca.alpha) * Cb.rgb.b;

        return new Color(Color.rgb2hex(r, g, b));
      };

      module.exports = Color;

      /***/
    },
    /* 11 */
    /***/function (module, exports) {

      module.exports = {
        'version': '2.9.4',
        'svg_ns': 'http://www.w3.org/2000/svg'
      };

      /***/
    },
    /* 12 */
    /***/function (module, exports, __webpack_require__) {

      var shaven = __webpack_require__(13);

      var SVG = __webpack_require__(8);
      var constants = __webpack_require__(11);
      var utils = __webpack_require__(7);

      var SVG_NS = constants.svg_ns;

      var templates = {
        'element': function element(options) {
          var tag = options.tag;
          var content = options.content || '';
          delete options.tag;
          delete options.content;
          return [tag, content, options];
        }
      };

      //todo: deprecate tag arg, infer tag from shape object
      function convertShape(shape, tag) {
        return templates.element({
          'tag': tag,
          'width': shape.width,
          'height': shape.height,
          'fill': shape.properties.fill
        });
      }

      function textCss(properties) {
        return utils.cssProps({
          'fill': properties.fill,
          'font-weight': properties.font.weight,
          'font-family': properties.font.family + ', monospace',
          'font-size': properties.font.size + properties.font.units
        });
      }

      function outlinePath(bgWidth, bgHeight, outlineWidth) {
        var outlineOffsetWidth = outlineWidth / 2;

        return ['M', outlineOffsetWidth, outlineOffsetWidth, 'H', bgWidth - outlineOffsetWidth, 'V', bgHeight - outlineOffsetWidth, 'H', outlineOffsetWidth, 'V', 0, 'M', 0, outlineOffsetWidth, 'L', bgWidth, bgHeight - outlineOffsetWidth, 'M', 0, bgHeight - outlineOffsetWidth, 'L', bgWidth, outlineOffsetWidth].join(' ');
      }

      module.exports = function (sceneGraph, renderSettings) {
        var engineSettings = renderSettings.engineSettings;
        var stylesheets = engineSettings.stylesheets;
        var stylesheetXml = stylesheets.map(function (stylesheet) {
          return '<?xml-stylesheet rel="stylesheet" href="' + stylesheet + '"?>';
        }).join('\n');

        var holderId = 'holder_' + Number(new Date()).toString(16);

        var root = sceneGraph.root;
        var textGroup = root.children.holderTextGroup;

        var css = '#' + holderId + ' text { ' + textCss(textGroup.properties) + ' } ';

        // push text down to be equally vertically aligned with canvas renderer
        textGroup.y += textGroup.textPositionData.boundingBox.height * 0.8;

        var wordTags = [];

        Object.keys(textGroup.children).forEach(function (lineKey) {
          var line = textGroup.children[lineKey];

          Object.keys(line.children).forEach(function (wordKey) {
            var word = line.children[wordKey];
            var x = textGroup.x + line.x + word.x;
            var y = textGroup.y + line.y + word.y;

            var wordTag = templates.element({
              'tag': 'text',
              'content': word.properties.text,
              'x': x,
              'y': y
            });

            wordTags.push(wordTag);
          });
        });

        var text = templates.element({
          'tag': 'g',
          'content': wordTags
        });

        var outline = null;

        if (root.children.holderBg.properties.outline) {
          var outlineProperties = root.children.holderBg.properties.outline;
          outline = templates.element({
            'tag': 'path',
            'd': outlinePath(root.children.holderBg.width, root.children.holderBg.height, outlineProperties.width),
            'stroke-width': outlineProperties.width,
            'stroke': outlineProperties.fill,
            'fill': 'none'
          });
        }

        var bg = convertShape(root.children.holderBg, 'rect');

        var sceneContent = [];

        sceneContent.push(bg);
        if (outlineProperties) {
          sceneContent.push(outline);
        }
        sceneContent.push(text);

        var scene = templates.element({
          'tag': 'g',
          'id': holderId,
          'content': sceneContent
        });

        var style = templates.element({
          'tag': 'style',
          //todo: figure out how to add CDATA directive
          'content': css,
          'type': 'text/css'
        });

        var defs = templates.element({
          'tag': 'defs',
          'content': style
        });

        var svg = templates.element({
          'tag': 'svg',
          'content': [defs, scene],
          'width': root.properties.width,
          'height': root.properties.height,
          'xmlns': SVG_NS,
          'viewBox': [0, 0, root.properties.width, root.properties.height].join(' '),
          'preserveAspectRatio': 'none'
        });

        var output = shaven(svg);

        output = stylesheetXml + output[0];

        var svgString = SVG.svgStringToDataURI(output, renderSettings.mode === 'background');
        return svgString;
      };

      /***/
    },
    /* 13 */
    /***/function (module, exports, __webpack_require__) {

      var escape = __webpack_require__(14);

      // TODO: remove namespace

      module.exports = function shaven(array, namespace, returnObject) {

        'use strict';

        var i = 1;
        var doesEscape = true;
        var HTMLString;
        var attributeKey;
        var callback;
        var key;

        returnObject = returnObject || {};

        function createElement(sugarString) {

          var tags = sugarString.match(/^[\w-]+/);
          var element = {
            tag: tags ? tags[0] : 'div',
            attr: {},
            children: []
          };
          var id = sugarString.match(/#([\w-]+)/);
          var reference = sugarString.match(/\$([\w-]+)/);
          var classNames = sugarString.match(/\.[\w-]+/g);

          // Assign id if is set
          if (id) {
            element.attr.id = id[1];

            // Add element to the return object
            returnObject[id[1]] = element;
          }

          if (reference) returnObject[reference[1]] = element;

          if (classNames) element.attr.class = classNames.join(' ').replace(/\./g, '');

          if (sugarString.match(/&$/g)) doesEscape = false;

          return element;
        }

        function replacer(key, value) {

          if (value === null || value === false || value === undefined) return;

          if (typeof value !== 'string' && (typeof value === "undefined" ? "undefined" : _typeof3(value)) !== 'object') return String(value);

          return value;
        }

        function escapeAttribute(string) {
          return string || string === 0 ? String(string).replace(/&/g, '&amp;').replace(/"/g, '&quot;') : '';
        }

        function escapeHTML(string) {
          return String(string).replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&apos;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        }

        if (typeof array[0] === 'string') array[0] = createElement(array[0]);else if (Array.isArray(array[0])) i = 0;else throw new Error('First element of array must be a string, ' + 'or an array and not ' + JSON.stringify(array[0]));

        for (; i < array.length; i++) {

          // Don't render element if value is false or null
          if (array[i] === false || array[i] === null) {
            array[0] = false;
            break;
          }

          // Continue with next array value if current value is undefined or true
          else if (array[i] === undefined || array[i] === true) {
              continue;
            } else if (typeof array[i] === 'string') {
              if (doesEscape) array[i] = escapeHTML(array[i]);

              array[0].children.push(array[i]);
            } else if (typeof array[i] === 'number') {

              array[0].children.push(array[i]);
            } else if (Array.isArray(array[i])) {

              if (Array.isArray(array[i][0])) {
                array[i].reverse().forEach(function (subArray) {
                  array.splice(i + 1, 0, subArray);
                });

                if (i !== 0) continue;
                i++;
              }

              shaven(array[i], namespace, returnObject);

              if (array[i][0]) array[0].children.push(array[i][0]);
            } else if (typeof array[i] === 'function') callback = array[i];else if (_typeof3(array[i]) === 'object') {
              for (attributeKey in array[i]) {
                if (array[i].hasOwnProperty(attributeKey)) if (array[i][attributeKey] !== null && array[i][attributeKey] !== false) if (attributeKey === 'style' && _typeof3(array[i][attributeKey]) === 'object') array[0].attr[attributeKey] = JSON.stringify(array[i][attributeKey], replacer).slice(2, -2).replace(/","/g, ';').replace(/":"/g, ':').replace(/\\"/g, '\'');else array[0].attr[attributeKey] = array[i][attributeKey];
              }
            } else throw new TypeError('"' + array[i] + '" is not allowed as a value.');
        }

        if (array[0] !== false) {

          HTMLString = '<' + array[0].tag;

          for (key in array[0].attr) {
            if (array[0].attr.hasOwnProperty(key)) HTMLString += ' ' + key + '="' + escapeAttribute(array[0].attr[key]) + '"';
          }HTMLString += '>';

          array[0].children.forEach(function (child) {
            HTMLString += child;
          });

          HTMLString += '</' + array[0].tag + '>';

          array[0] = HTMLString;
        }

        // Return root element on index 0
        returnObject[0] = array[0];

        if (callback) callback(array[0]);

        // returns object containing all elements with an id and the root element
        return returnObject;
      };

      /***/
    },
    /* 14 */
    /***/function (module, exports) {

      /*!
       * escape-html
       * Copyright(c) 2012-2013 TJ Holowaychuk
       * Copyright(c) 2015 Andreas Lubbe
       * Copyright(c) 2015 Tiancheng "Timothy" Gu
       * MIT Licensed
       */

      'use strict';

      /**
       * Module variables.
       * @private
       */

      var matchHtmlRegExp = /["'&<>]/;

      /**
       * Module exports.
       * @public
       */

      module.exports = escapeHtml;

      /**
       * Escape special characters in the given string of html.
       *
       * @param  {string} string The string to escape for inserting into HTML
       * @return {string}
       * @public
       */

      function escapeHtml(string) {
        var str = '' + string;
        var match = matchHtmlRegExp.exec(str);

        if (!match) {
          return str;
        }

        var escape;
        var html = '';
        var index = 0;
        var lastIndex = 0;

        for (index = match.index; index < str.length; index++) {
          switch (str.charCodeAt(index)) {
            case 34:
              // "
              escape = '&quot;';
              break;
            case 38:
              // &
              escape = '&amp;';
              break;
            case 39:
              // '
              escape = '&#39;';
              break;
            case 60:
              // <
              escape = '&lt;';
              break;
            case 62:
              // >
              escape = '&gt;';
              break;
            default:
              continue;
          }

          if (lastIndex !== index) {
            html += str.substring(lastIndex, index);
          }

          lastIndex = index + 1;
          html += escape;
        }

        return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
      }

      /***/
    },
    /* 15 */
    /***/function (module, exports, __webpack_require__) {

      var DOM = __webpack_require__(9);
      var utils = __webpack_require__(7);

      module.exports = function () {
        var canvas = DOM.newEl('canvas');
        var ctx = null;

        return function (sceneGraph) {
          if (ctx == null) {
            ctx = canvas.getContext('2d');
          }

          var dpr = utils.canvasRatio();
          var root = sceneGraph.root;
          canvas.width = dpr * root.properties.width;
          canvas.height = dpr * root.properties.height;
          ctx.textBaseline = 'middle';

          var bg = root.children.holderBg;
          var bgWidth = dpr * bg.width;
          var bgHeight = dpr * bg.height;
          //todo: parametrize outline width (e.g. in scene object)
          var outlineWidth = 2;
          var outlineOffsetWidth = outlineWidth / 2;

          ctx.fillStyle = bg.properties.fill;
          ctx.fillRect(0, 0, bgWidth, bgHeight);

          if (bg.properties.outline) {
            //todo: abstract this into a method
            ctx.strokeStyle = bg.properties.outline.fill;
            ctx.lineWidth = bg.properties.outline.width;
            ctx.moveTo(outlineOffsetWidth, outlineOffsetWidth);
            // TL, TR, BR, BL
            ctx.lineTo(bgWidth - outlineOffsetWidth, outlineOffsetWidth);
            ctx.lineTo(bgWidth - outlineOffsetWidth, bgHeight - outlineOffsetWidth);
            ctx.lineTo(outlineOffsetWidth, bgHeight - outlineOffsetWidth);
            ctx.lineTo(outlineOffsetWidth, outlineOffsetWidth);
            // Diagonals
            ctx.moveTo(0, outlineOffsetWidth);
            ctx.lineTo(bgWidth, bgHeight - outlineOffsetWidth);
            ctx.moveTo(0, bgHeight - outlineOffsetWidth);
            ctx.lineTo(bgWidth, outlineOffsetWidth);
            ctx.stroke();
          }

          var textGroup = root.children.holderTextGroup;
          ctx.font = textGroup.properties.font.weight + ' ' + dpr * textGroup.properties.font.size + textGroup.properties.font.units + ' ' + textGroup.properties.font.family + ', monospace';
          ctx.fillStyle = textGroup.properties.fill;

          for (var lineKey in textGroup.children) {
            var line = textGroup.children[lineKey];
            for (var wordKey in line.children) {
              var word = line.children[wordKey];
              var x = dpr * (textGroup.x + line.x + word.x);
              var y = dpr * (textGroup.y + line.y + word.y + textGroup.properties.leading / 2);

              ctx.fillText(word.properties.text, x, y);
            }
          }

          return canvas.toDataURL('image/png');
        };
      }();

      /***/
    }
    /******/])
  );
});
;
(function (ctx, isMeteorPackage) {
  if (isMeteorPackage) {
    Holder = ctx.Holder;
  }
})(this, typeof Meteor !== 'undefined' && typeof Package !== 'undefined');

/**
 * lunr - http://lunrjs.com - A bit like Solr, but much smaller and not as bright - 2.1.6
 * Copyright (C) 2018 Oliver Nightingale
 * @license MIT
 */

;(function () {

  /**
   * A convenience function for configuring and constructing
   * a new lunr Index.
   *
   * A lunr.Builder instance is created and the pipeline setup
   * with a trimmer, stop word filter and stemmer.
   *
   * This builder object is yielded to the configuration function
   * that is passed as a parameter, allowing the list of fields
   * and other builder parameters to be customised.
   *
   * All documents _must_ be added within the passed config function.
   *
   * @example
   * var idx = lunr(function () {
   *   this.field('title')
   *   this.field('body')
   *   this.ref('id')
   *
   *   documents.forEach(function (doc) {
   *     this.add(doc)
   *   }, this)
   * })
   *
   * @see {@link lunr.Builder}
   * @see {@link lunr.Pipeline}
   * @see {@link lunr.trimmer}
   * @see {@link lunr.stopWordFilter}
   * @see {@link lunr.stemmer}
   * @namespace {function} lunr
   */
  var lunr = function lunr(config) {
    var builder = new lunr.Builder();

    builder.pipeline.add(lunr.trimmer, lunr.stopWordFilter, lunr.stemmer);

    builder.searchPipeline.add(lunr.stemmer);

    config.call(builder, builder);
    return builder.build();
  };

  lunr.version = "2.1.6";
  /*!
   * lunr.utils
   * Copyright (C) 2018 Oliver Nightingale
   */

  /**
   * A namespace containing utils for the rest of the lunr library
   */
  lunr.utils = {};

  /**
   * Print a warning message to the console.
   *
   * @param {String} message The message to be printed.
   * @memberOf Utils
   */
  lunr.utils.warn = function (global) {
    /* eslint-disable no-console */
    return function (message) {
      if (global.console && console.warn) {
        console.warn(message);
      }
    };
    /* eslint-enable no-console */
  }(this);

  /**
   * Convert an object to a string.
   *
   * In the case of `null` and `undefined` the function returns
   * the empty string, in all other cases the result of calling
   * `toString` on the passed object is returned.
   *
   * @param {Any} obj The object to convert to a string.
   * @return {String} string representation of the passed object.
   * @memberOf Utils
   */
  lunr.utils.asString = function (obj) {
    if (obj === void 0 || obj === null) {
      return "";
    } else {
      return obj.toString();
    }
  };
  lunr.FieldRef = function (docRef, fieldName, stringValue) {
    this.docRef = docRef;
    this.fieldName = fieldName;
    this._stringValue = stringValue;
  };

  lunr.FieldRef.joiner = "/";

  lunr.FieldRef.fromString = function (s) {
    var n = s.indexOf(lunr.FieldRef.joiner);

    if (n === -1) {
      throw "malformed field ref string";
    }

    var fieldRef = s.slice(0, n),
        docRef = s.slice(n + 1);

    return new lunr.FieldRef(docRef, fieldRef, s);
  };

  lunr.FieldRef.prototype.toString = function () {
    if (this._stringValue == undefined) {
      this._stringValue = this.fieldName + lunr.FieldRef.joiner + this.docRef;
    }

    return this._stringValue;
  };
  /**
   * A function to calculate the inverse document frequency for
   * a posting. This is shared between the builder and the index
   *
   * @private
   * @param {object} posting - The posting for a given term
   * @param {number} documentCount - The total number of documents.
   */
  lunr.idf = function (posting, documentCount) {
    var documentsWithTerm = 0;

    for (var fieldName in posting) {
      if (fieldName == '_index') continue; // Ignore the term index, its not a field
      documentsWithTerm += Object.keys(posting[fieldName]).length;
    }

    var x = (documentCount - documentsWithTerm + 0.5) / (documentsWithTerm + 0.5);

    return Math.log(1 + Math.abs(x));
  };

  /**
   * A token wraps a string representation of a token
   * as it is passed through the text processing pipeline.
   *
   * @constructor
   * @param {string} [str=''] - The string token being wrapped.
   * @param {object} [metadata={}] - Metadata associated with this token.
   */
  lunr.Token = function (str, metadata) {
    this.str = str || "";
    this.metadata = metadata || {};
  };

  /**
   * Returns the token string that is being wrapped by this object.
   *
   * @returns {string}
   */
  lunr.Token.prototype.toString = function () {
    return this.str;
  };

  /**
   * A token update function is used when updating or optionally
   * when cloning a token.
   *
   * @callback lunr.Token~updateFunction
   * @param {string} str - The string representation of the token.
   * @param {Object} metadata - All metadata associated with this token.
   */

  /**
   * Applies the given function to the wrapped string token.
   *
   * @example
   * token.update(function (str, metadata) {
   *   return str.toUpperCase()
   * })
   *
   * @param {lunr.Token~updateFunction} fn - A function to apply to the token string.
   * @returns {lunr.Token}
   */
  lunr.Token.prototype.update = function (fn) {
    this.str = fn(this.str, this.metadata);
    return this;
  };

  /**
   * Creates a clone of this token. Optionally a function can be
   * applied to the cloned token.
   *
   * @param {lunr.Token~updateFunction} [fn] - An optional function to apply to the cloned token.
   * @returns {lunr.Token}
   */
  lunr.Token.prototype.clone = function (fn) {
    fn = fn || function (s) {
      return s;
    };
    return new lunr.Token(fn(this.str, this.metadata), this.metadata);
  };
  /*!
   * lunr.tokenizer
   * Copyright (C) 2018 Oliver Nightingale
   */

  /**
   * A function for splitting a string into tokens ready to be inserted into
   * the search index. Uses `lunr.tokenizer.separator` to split strings, change
   * the value of this property to change how strings are split into tokens.
   *
   * This tokenizer will convert its parameter to a string by calling `toString` and
   * then will split this string on the character in `lunr.tokenizer.separator`.
   * Arrays will have their elements converted to strings and wrapped in a lunr.Token.
   *
   * @static
   * @param {?(string|object|object[])} obj - The object to convert into tokens
   * @returns {lunr.Token[]}
   */
  lunr.tokenizer = function (obj) {
    if (obj == null || obj == undefined) {
      return [];
    }

    if (Array.isArray(obj)) {
      return obj.map(function (t) {
        return new lunr.Token(lunr.utils.asString(t).toLowerCase());
      });
    }

    var str = obj.toString().trim().toLowerCase(),
        len = str.length,
        tokens = [];

    for (var sliceEnd = 0, sliceStart = 0; sliceEnd <= len; sliceEnd++) {
      var char = str.charAt(sliceEnd),
          sliceLength = sliceEnd - sliceStart;

      if (char.match(lunr.tokenizer.separator) || sliceEnd == len) {

        if (sliceLength > 0) {
          tokens.push(new lunr.Token(str.slice(sliceStart, sliceEnd), {
            position: [sliceStart, sliceLength],
            index: tokens.length
          }));
        }

        sliceStart = sliceEnd + 1;
      }
    }

    return tokens;
  };

  /**
   * The separator used to split a string into tokens. Override this property to change the behaviour of
   * `lunr.tokenizer` behaviour when tokenizing strings. By default this splits on whitespace and hyphens.
   *
   * @static
   * @see lunr.tokenizer
   */
  lunr.tokenizer.separator = /[\s\-]+/;
  /*!
   * lunr.Pipeline
   * Copyright (C) 2018 Oliver Nightingale
   */

  /**
   * lunr.Pipelines maintain an ordered list of functions to be applied to all
   * tokens in documents entering the search index and queries being ran against
   * the index.
   *
   * An instance of lunr.Index created with the lunr shortcut will contain a
   * pipeline with a stop word filter and an English language stemmer. Extra
   * functions can be added before or after either of these functions or these
   * default functions can be removed.
   *
   * When run the pipeline will call each function in turn, passing a token, the
   * index of that token in the original list of all tokens and finally a list of
   * all the original tokens.
   *
   * The output of functions in the pipeline will be passed to the next function
   * in the pipeline. To exclude a token from entering the index the function
   * should return undefined, the rest of the pipeline will not be called with
   * this token.
   *
   * For serialisation of pipelines to work, all functions used in an instance of
   * a pipeline should be registered with lunr.Pipeline. Registered functions can
   * then be loaded. If trying to load a serialised pipeline that uses functions
   * that are not registered an error will be thrown.
   *
   * If not planning on serialising the pipeline then registering pipeline functions
   * is not necessary.
   *
   * @constructor
   */
  lunr.Pipeline = function () {
    this._stack = [];
  };

  lunr.Pipeline.registeredFunctions = Object.create(null);

  /**
   * A pipeline function maps lunr.Token to lunr.Token. A lunr.Token contains the token
   * string as well as all known metadata. A pipeline function can mutate the token string
   * or mutate (or add) metadata for a given token.
   *
   * A pipeline function can indicate that the passed token should be discarded by returning
   * null. This token will not be passed to any downstream pipeline functions and will not be
   * added to the index.
   *
   * Multiple tokens can be returned by returning an array of tokens. Each token will be passed
   * to any downstream pipeline functions and all will returned tokens will be added to the index.
   *
   * Any number of pipeline functions may be chained together using a lunr.Pipeline.
   *
   * @interface lunr.PipelineFunction
   * @param {lunr.Token} token - A token from the document being processed.
   * @param {number} i - The index of this token in the complete list of tokens for this document/field.
   * @param {lunr.Token[]} tokens - All tokens for this document/field.
   * @returns {(?lunr.Token|lunr.Token[])}
   */

  /**
   * Register a function with the pipeline.
   *
   * Functions that are used in the pipeline should be registered if the pipeline
   * needs to be serialised, or a serialised pipeline needs to be loaded.
   *
   * Registering a function does not add it to a pipeline, functions must still be
   * added to instances of the pipeline for them to be used when running a pipeline.
   *
   * @param {lunr.PipelineFunction} fn - The function to check for.
   * @param {String} label - The label to register this function with
   */
  lunr.Pipeline.registerFunction = function (fn, label) {
    if (label in this.registeredFunctions) {
      lunr.utils.warn('Overwriting existing registered function: ' + label);
    }

    fn.label = label;
    lunr.Pipeline.registeredFunctions[fn.label] = fn;
  };

  /**
   * Warns if the function is not registered as a Pipeline function.
   *
   * @param {lunr.PipelineFunction} fn - The function to check for.
   * @private
   */
  lunr.Pipeline.warnIfFunctionNotRegistered = function (fn) {
    var isRegistered = fn.label && fn.label in this.registeredFunctions;

    if (!isRegistered) {
      lunr.utils.warn('Function is not registered with pipeline. This may cause problems when serialising the index.\n', fn);
    }
  };

  /**
   * Loads a previously serialised pipeline.
   *
   * All functions to be loaded must already be registered with lunr.Pipeline.
   * If any function from the serialised data has not been registered then an
   * error will be thrown.
   *
   * @param {Object} serialised - The serialised pipeline to load.
   * @returns {lunr.Pipeline}
   */
  lunr.Pipeline.load = function (serialised) {
    var pipeline = new lunr.Pipeline();

    serialised.forEach(function (fnName) {
      var fn = lunr.Pipeline.registeredFunctions[fnName];

      if (fn) {
        pipeline.add(fn);
      } else {
        throw new Error('Cannot load unregistered function: ' + fnName);
      }
    });

    return pipeline;
  };

  /**
   * Adds new functions to the end of the pipeline.
   *
   * Logs a warning if the function has not been registered.
   *
   * @param {lunr.PipelineFunction[]} functions - Any number of functions to add to the pipeline.
   */
  lunr.Pipeline.prototype.add = function () {
    var fns = Array.prototype.slice.call(arguments);

    fns.forEach(function (fn) {
      lunr.Pipeline.warnIfFunctionNotRegistered(fn);
      this._stack.push(fn);
    }, this);
  };

  /**
   * Adds a single function after a function that already exists in the
   * pipeline.
   *
   * Logs a warning if the function has not been registered.
   *
   * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.
   * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.
   */
  lunr.Pipeline.prototype.after = function (existingFn, newFn) {
    lunr.Pipeline.warnIfFunctionNotRegistered(newFn);

    var pos = this._stack.indexOf(existingFn);
    if (pos == -1) {
      throw new Error('Cannot find existingFn');
    }

    pos = pos + 1;
    this._stack.splice(pos, 0, newFn);
  };

  /**
   * Adds a single function before a function that already exists in the
   * pipeline.
   *
   * Logs a warning if the function has not been registered.
   *
   * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.
   * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.
   */
  lunr.Pipeline.prototype.before = function (existingFn, newFn) {
    lunr.Pipeline.warnIfFunctionNotRegistered(newFn);

    var pos = this._stack.indexOf(existingFn);
    if (pos == -1) {
      throw new Error('Cannot find existingFn');
    }

    this._stack.splice(pos, 0, newFn);
  };

  /**
   * Removes a function from the pipeline.
   *
   * @param {lunr.PipelineFunction} fn The function to remove from the pipeline.
   */
  lunr.Pipeline.prototype.remove = function (fn) {
    var pos = this._stack.indexOf(fn);
    if (pos == -1) {
      return;
    }

    this._stack.splice(pos, 1);
  };

  /**
   * Runs the current list of functions that make up the pipeline against the
   * passed tokens.
   *
   * @param {Array} tokens The tokens to run through the pipeline.
   * @returns {Array}
   */
  lunr.Pipeline.prototype.run = function (tokens) {
    var stackLength = this._stack.length;

    for (var i = 0; i < stackLength; i++) {
      var fn = this._stack[i];
      var memo = [];

      for (var j = 0; j < tokens.length; j++) {
        var result = fn(tokens[j], j, tokens);

        if (result === void 0 || result === '') continue;

        if (result instanceof Array) {
          for (var k = 0; k < result.length; k++) {
            memo.push(result[k]);
          }
        } else {
          memo.push(result);
        }
      }

      tokens = memo;
    }

    return tokens;
  };

  /**
   * Convenience method for passing a string through a pipeline and getting
   * strings out. This method takes care of wrapping the passed string in a
   * token and mapping the resulting tokens back to strings.
   *
   * @param {string} str - The string to pass through the pipeline.
   * @returns {string[]}
   */
  lunr.Pipeline.prototype.runString = function (str) {
    var token = new lunr.Token(str);

    return this.run([token]).map(function (t) {
      return t.toString();
    });
  };

  /**
   * Resets the pipeline by removing any existing processors.
   *
   */
  lunr.Pipeline.prototype.reset = function () {
    this._stack = [];
  };

  /**
   * Returns a representation of the pipeline ready for serialisation.
   *
   * Logs a warning if the function has not been registered.
   *
   * @returns {Array}
   */
  lunr.Pipeline.prototype.toJSON = function () {
    return this._stack.map(function (fn) {
      lunr.Pipeline.warnIfFunctionNotRegistered(fn);

      return fn.label;
    });
  };
  /*!
   * lunr.Vector
   * Copyright (C) 2018 Oliver Nightingale
   */

  /**
   * A vector is used to construct the vector space of documents and queries. These
   * vectors support operations to determine the similarity between two documents or
   * a document and a query.
   *
   * Normally no parameters are required for initializing a vector, but in the case of
   * loading a previously dumped vector the raw elements can be provided to the constructor.
   *
   * For performance reasons vectors are implemented with a flat array, where an elements
   * index is immediately followed by its value. E.g. [index, value, index, value]. This
   * allows the underlying array to be as sparse as possible and still offer decent
   * performance when being used for vector calculations.
   *
   * @constructor
   * @param {Number[]} [elements] - The flat list of element index and element value pairs.
   */
  lunr.Vector = function (elements) {
    this._magnitude = 0;
    this.elements = elements || [];
  };

  /**
   * Calculates the position within the vector to insert a given index.
   *
   * This is used internally by insert and upsert. If there are duplicate indexes then
   * the position is returned as if the value for that index were to be updated, but it
   * is the callers responsibility to check whether there is a duplicate at that index
   *
   * @param {Number} insertIdx - The index at which the element should be inserted.
   * @returns {Number}
   */
  lunr.Vector.prototype.positionForIndex = function (index) {
    // For an empty vector the tuple can be inserted at the beginning
    if (this.elements.length == 0) {
      return 0;
    }

    var start = 0,
        end = this.elements.length / 2,
        sliceLength = end - start,
        pivotPoint = Math.floor(sliceLength / 2),
        pivotIndex = this.elements[pivotPoint * 2];

    while (sliceLength > 1) {
      if (pivotIndex < index) {
        start = pivotPoint;
      }

      if (pivotIndex > index) {
        end = pivotPoint;
      }

      if (pivotIndex == index) {
        break;
      }

      sliceLength = end - start;
      pivotPoint = start + Math.floor(sliceLength / 2);
      pivotIndex = this.elements[pivotPoint * 2];
    }

    if (pivotIndex == index) {
      return pivotPoint * 2;
    }

    if (pivotIndex > index) {
      return pivotPoint * 2;
    }

    if (pivotIndex < index) {
      return (pivotPoint + 1) * 2;
    }
  };

  /**
   * Inserts an element at an index within the vector.
   *
   * Does not allow duplicates, will throw an error if there is already an entry
   * for this index.
   *
   * @param {Number} insertIdx - The index at which the element should be inserted.
   * @param {Number} val - The value to be inserted into the vector.
   */
  lunr.Vector.prototype.insert = function (insertIdx, val) {
    this.upsert(insertIdx, val, function () {
      throw "duplicate index";
    });
  };

  /**
   * Inserts or updates an existing index within the vector.
   *
   * @param {Number} insertIdx - The index at which the element should be inserted.
   * @param {Number} val - The value to be inserted into the vector.
   * @param {function} fn - A function that is called for updates, the existing value and the
   * requested value are passed as arguments
   */
  lunr.Vector.prototype.upsert = function (insertIdx, val, fn) {
    this._magnitude = 0;
    var position = this.positionForIndex(insertIdx);

    if (this.elements[position] == insertIdx) {
      this.elements[position + 1] = fn(this.elements[position + 1], val);
    } else {
      this.elements.splice(position, 0, insertIdx, val);
    }
  };

  /**
   * Calculates the magnitude of this vector.
   *
   * @returns {Number}
   */
  lunr.Vector.prototype.magnitude = function () {
    if (this._magnitude) return this._magnitude;

    var sumOfSquares = 0,
        elementsLength = this.elements.length;

    for (var i = 1; i < elementsLength; i += 2) {
      var val = this.elements[i];
      sumOfSquares += val * val;
    }

    return this._magnitude = Math.sqrt(sumOfSquares);
  };

  /**
   * Calculates the dot product of this vector and another vector.
   *
   * @param {lunr.Vector} otherVector - The vector to compute the dot product with.
   * @returns {Number}
   */
  lunr.Vector.prototype.dot = function (otherVector) {
    var dotProduct = 0,
        a = this.elements,
        b = otherVector.elements,
        aLen = a.length,
        bLen = b.length,
        aVal = 0,
        bVal = 0,
        i = 0,
        j = 0;

    while (i < aLen && j < bLen) {
      aVal = a[i], bVal = b[j];
      if (aVal < bVal) {
        i += 2;
      } else if (aVal > bVal) {
        j += 2;
      } else if (aVal == bVal) {
        dotProduct += a[i + 1] * b[j + 1];
        i += 2;
        j += 2;
      }
    }

    return dotProduct;
  };

  /**
   * Calculates the cosine similarity between this vector and another
   * vector.
   *
   * @param {lunr.Vector} otherVector - The other vector to calculate the
   * similarity with.
   * @returns {Number}
   */
  lunr.Vector.prototype.similarity = function (otherVector) {
    return this.dot(otherVector) / (this.magnitude() * otherVector.magnitude());
  };

  /**
   * Converts the vector to an array of the elements within the vector.
   *
   * @returns {Number[]}
   */
  lunr.Vector.prototype.toArray = function () {
    var output = new Array(this.elements.length / 2);

    for (var i = 1, j = 0; i < this.elements.length; i += 2, j++) {
      output[j] = this.elements[i];
    }

    return output;
  };

  /**
   * A JSON serializable representation of the vector.
   *
   * @returns {Number[]}
   */
  lunr.Vector.prototype.toJSON = function () {
    return this.elements;
  };
  /* eslint-disable */
  /*!
   * lunr.stemmer
   * Copyright (C) 2018 Oliver Nightingale
   * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt
   */

  /**
   * lunr.stemmer is an english language stemmer, this is a JavaScript
   * implementation of the PorterStemmer taken from http://tartarus.org/~martin
   *
   * @static
   * @implements {lunr.PipelineFunction}
   * @param {lunr.Token} token - The string to stem
   * @returns {lunr.Token}
   * @see {@link lunr.Pipeline}
   */
  lunr.stemmer = function () {
    var step2list = {
      "ational": "ate",
      "tional": "tion",
      "enci": "ence",
      "anci": "ance",
      "izer": "ize",
      "bli": "ble",
      "alli": "al",
      "entli": "ent",
      "eli": "e",
      "ousli": "ous",
      "ization": "ize",
      "ation": "ate",
      "ator": "ate",
      "alism": "al",
      "iveness": "ive",
      "fulness": "ful",
      "ousness": "ous",
      "aliti": "al",
      "iviti": "ive",
      "biliti": "ble",
      "logi": "log"
    },
        step3list = {
      "icate": "ic",
      "ative": "",
      "alize": "al",
      "iciti": "ic",
      "ical": "ic",
      "ful": "",
      "ness": ""
    },
        c = "[^aeiou]",
        // consonant
    v = "[aeiouy]",
        // vowel
    C = c + "[^aeiouy]*",
        // consonant sequence
    V = v + "[aeiou]*",
        // vowel sequence

    mgr0 = "^(" + C + ")?" + V + C,
        // [C]VC... is m>0
    meq1 = "^(" + C + ")?" + V + C + "(" + V + ")?$",
        // [C]VC[V] is m=1
    mgr1 = "^(" + C + ")?" + V + C + V + C,
        // [C]VCVC... is m>1
    s_v = "^(" + C + ")?" + v; // vowel in stem

    var re_mgr0 = new RegExp(mgr0);
    var re_mgr1 = new RegExp(mgr1);
    var re_meq1 = new RegExp(meq1);
    var re_s_v = new RegExp(s_v);

    var re_1a = /^(.+?)(ss|i)es$/;
    var re2_1a = /^(.+?)([^s])s$/;
    var re_1b = /^(.+?)eed$/;
    var re2_1b = /^(.+?)(ed|ing)$/;
    var re_1b_2 = /.$/;
    var re2_1b_2 = /(at|bl|iz)$/;
    var re3_1b_2 = new RegExp("([^aeiouylsz])\\1$");
    var re4_1b_2 = new RegExp("^" + C + v + "[^aeiouwxy]$");

    var re_1c = /^(.+?[^aeiou])y$/;
    var re_2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;

    var re_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;

    var re_4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;
    var re2_4 = /^(.+?)(s|t)(ion)$/;

    var re_5 = /^(.+?)e$/;
    var re_5_1 = /ll$/;
    var re3_5 = new RegExp("^" + C + v + "[^aeiouwxy]$");

    var porterStemmer = function porterStemmer(w) {
      var stem, suffix, firstch, re, re2, re3, re4;

      if (w.length < 3) {
        return w;
      }

      firstch = w.substr(0, 1);
      if (firstch == "y") {
        w = firstch.toUpperCase() + w.substr(1);
      }

      // Step 1a
      re = re_1a;
      re2 = re2_1a;

      if (re.test(w)) {
        w = w.replace(re, "$1$2");
      } else if (re2.test(w)) {
        w = w.replace(re2, "$1$2");
      }

      // Step 1b
      re = re_1b;
      re2 = re2_1b;
      if (re.test(w)) {
        var fp = re.exec(w);
        re = re_mgr0;
        if (re.test(fp[1])) {
          re = re_1b_2;
          w = w.replace(re, "");
        }
      } else if (re2.test(w)) {
        var fp = re2.exec(w);
        stem = fp[1];
        re2 = re_s_v;
        if (re2.test(stem)) {
          w = stem;
          re2 = re2_1b_2;
          re3 = re3_1b_2;
          re4 = re4_1b_2;
          if (re2.test(w)) {
            w = w + "e";
          } else if (re3.test(w)) {
            re = re_1b_2;w = w.replace(re, "");
          } else if (re4.test(w)) {
            w = w + "e";
          }
        }
      }

      // Step 1c - replace suffix y or Y by i if preceded by a non-vowel which is not the first letter of the word (so cry -> cri, by -> by, say -> say)
      re = re_1c;
      if (re.test(w)) {
        var fp = re.exec(w);
        stem = fp[1];
        w = stem + "i";
      }

      // Step 2
      re = re_2;
      if (re.test(w)) {
        var fp = re.exec(w);
        stem = fp[1];
        suffix = fp[2];
        re = re_mgr0;
        if (re.test(stem)) {
          w = stem + step2list[suffix];
        }
      }

      // Step 3
      re = re_3;
      if (re.test(w)) {
        var fp = re.exec(w);
        stem = fp[1];
        suffix = fp[2];
        re = re_mgr0;
        if (re.test(stem)) {
          w = stem + step3list[suffix];
        }
      }

      // Step 4
      re = re_4;
      re2 = re2_4;
      if (re.test(w)) {
        var fp = re.exec(w);
        stem = fp[1];
        re = re_mgr1;
        if (re.test(stem)) {
          w = stem;
        }
      } else if (re2.test(w)) {
        var fp = re2.exec(w);
        stem = fp[1] + fp[2];
        re2 = re_mgr1;
        if (re2.test(stem)) {
          w = stem;
        }
      }

      // Step 5
      re = re_5;
      if (re.test(w)) {
        var fp = re.exec(w);
        stem = fp[1];
        re = re_mgr1;
        re2 = re_meq1;
        re3 = re3_5;
        if (re.test(stem) || re2.test(stem) && !re3.test(stem)) {
          w = stem;
        }
      }

      re = re_5_1;
      re2 = re_mgr1;
      if (re.test(w) && re2.test(w)) {
        re = re_1b_2;
        w = w.replace(re, "");
      }

      // and turn initial Y back to y

      if (firstch == "y") {
        w = firstch.toLowerCase() + w.substr(1);
      }

      return w;
    };

    return function (token) {
      return token.update(porterStemmer);
    };
  }();

  lunr.Pipeline.registerFunction(lunr.stemmer, 'stemmer');
  /*!
   * lunr.stopWordFilter
   * Copyright (C) 2018 Oliver Nightingale
   */

  /**
   * lunr.generateStopWordFilter builds a stopWordFilter function from the provided
   * list of stop words.
   *
   * The built in lunr.stopWordFilter is built using this generator and can be used
   * to generate custom stopWordFilters for applications or non English languages.
   *
   * @param {Array} token The token to pass through the filter
   * @returns {lunr.PipelineFunction}
   * @see lunr.Pipeline
   * @see lunr.stopWordFilter
   */
  lunr.generateStopWordFilter = function (stopWords) {
    var words = stopWords.reduce(function (memo, stopWord) {
      memo[stopWord] = stopWord;
      return memo;
    }, {});

    return function (token) {
      if (token && words[token.toString()] !== token.toString()) return token;
    };
  };

  /**
   * lunr.stopWordFilter is an English language stop word list filter, any words
   * contained in the list will not be passed through the filter.
   *
   * This is intended to be used in the Pipeline. If the token does not pass the
   * filter then undefined will be returned.
   *
   * @implements {lunr.PipelineFunction}
   * @params {lunr.Token} token - A token to check for being a stop word.
   * @returns {lunr.Token}
   * @see {@link lunr.Pipeline}
   */
  lunr.stopWordFilter = lunr.generateStopWordFilter(['a', 'able', 'about', 'across', 'after', 'all', 'almost', 'also', 'am', 'among', 'an', 'and', 'any', 'are', 'as', 'at', 'be', 'because', 'been', 'but', 'by', 'can', 'cannot', 'could', 'dear', 'did', 'do', 'does', 'either', 'else', 'ever', 'every', 'for', 'from', 'get', 'got', 'had', 'has', 'have', 'he', 'her', 'hers', 'him', 'his', 'how', 'however', 'i', 'if', 'in', 'into', 'is', 'it', 'its', 'just', 'least', 'let', 'like', 'likely', 'may', 'me', 'might', 'most', 'must', 'my', 'neither', 'no', 'nor', 'not', 'of', 'off', 'often', 'on', 'only', 'or', 'other', 'our', 'own', 'rather', 'said', 'say', 'says', 'she', 'should', 'since', 'so', 'some', 'than', 'that', 'the', 'their', 'them', 'then', 'there', 'these', 'they', 'this', 'tis', 'to', 'too', 'twas', 'us', 'wants', 'was', 'we', 'were', 'what', 'when', 'where', 'which', 'while', 'who', 'whom', 'why', 'will', 'with', 'would', 'yet', 'you', 'your']);

  lunr.Pipeline.registerFunction(lunr.stopWordFilter, 'stopWordFilter');
  /*!
   * lunr.trimmer
   * Copyright (C) 2018 Oliver Nightingale
   */

  /**
   * lunr.trimmer is a pipeline function for trimming non word
   * characters from the beginning and end of tokens before they
   * enter the index.
   *
   * This implementation may not work correctly for non latin
   * characters and should either be removed or adapted for use
   * with languages with non-latin characters.
   *
   * @static
   * @implements {lunr.PipelineFunction}
   * @param {lunr.Token} token The token to pass through the filter
   * @returns {lunr.Token}
   * @see lunr.Pipeline
   */
  lunr.trimmer = function (token) {
    return token.update(function (s) {
      return s.replace(/^\W+/, '').replace(/\W+$/, '');
    });
  };

  lunr.Pipeline.registerFunction(lunr.trimmer, 'trimmer');
  /*!
   * lunr.TokenSet
   * Copyright (C) 2018 Oliver Nightingale
   */

  /**
   * A token set is used to store the unique list of all tokens
   * within an index. Token sets are also used to represent an
   * incoming query to the index, this query token set and index
   * token set are then intersected to find which tokens to look
   * up in the inverted index.
   *
   * A token set can hold multiple tokens, as in the case of the
   * index token set, or it can hold a single token as in the
   * case of a simple query token set.
   *
   * Additionally token sets are used to perform wildcard matching.
   * Leading, contained and trailing wildcards are supported, and
   * from this edit distance matching can also be provided.
   *
   * Token sets are implemented as a minimal finite state automata,
   * where both common prefixes and suffixes are shared between tokens.
   * This helps to reduce the space used for storing the token set.
   *
   * @constructor
   */
  lunr.TokenSet = function () {
    this.final = false;
    this.edges = {};
    this.id = lunr.TokenSet._nextId;
    lunr.TokenSet._nextId += 1;
  };

  /**
   * Keeps track of the next, auto increment, identifier to assign
   * to a new tokenSet.
   *
   * TokenSets require a unique identifier to be correctly minimised.
   *
   * @private
   */
  lunr.TokenSet._nextId = 1;

  /**
   * Creates a TokenSet instance from the given sorted array of words.
   *
   * @param {String[]} arr - A sorted array of strings to create the set from.
   * @returns {lunr.TokenSet}
   * @throws Will throw an error if the input array is not sorted.
   */
  lunr.TokenSet.fromArray = function (arr) {
    var builder = new lunr.TokenSet.Builder();

    for (var i = 0, len = arr.length; i < len; i++) {
      builder.insert(arr[i]);
    }

    builder.finish();
    return builder.root;
  };

  /**
   * Creates a token set from a query clause.
   *
   * @private
   * @param {Object} clause - A single clause from lunr.Query.
   * @param {string} clause.term - The query clause term.
   * @param {number} [clause.editDistance] - The optional edit distance for the term.
   * @returns {lunr.TokenSet}
   */
  lunr.TokenSet.fromClause = function (clause) {
    if ('editDistance' in clause) {
      return lunr.TokenSet.fromFuzzyString(clause.term, clause.editDistance);
    } else {
      return lunr.TokenSet.fromString(clause.term);
    }
  };

  /**
   * Creates a token set representing a single string with a specified
   * edit distance.
   *
   * Insertions, deletions, substitutions and transpositions are each
   * treated as an edit distance of 1.
   *
   * Increasing the allowed edit distance will have a dramatic impact
   * on the performance of both creating and intersecting these TokenSets.
   * It is advised to keep the edit distance less than 3.
   *
   * @param {string} str - The string to create the token set from.
   * @param {number} editDistance - The allowed edit distance to match.
   * @returns {lunr.Vector}
   */
  lunr.TokenSet.fromFuzzyString = function (str, editDistance) {
    var root = new lunr.TokenSet();

    var stack = [{
      node: root,
      editsRemaining: editDistance,
      str: str
    }];

    while (stack.length) {
      var frame = stack.pop();

      // no edit
      if (frame.str.length > 0) {
        var char = frame.str.charAt(0),
            noEditNode;

        if (char in frame.node.edges) {
          noEditNode = frame.node.edges[char];
        } else {
          noEditNode = new lunr.TokenSet();
          frame.node.edges[char] = noEditNode;
        }

        if (frame.str.length == 1) {
          noEditNode.final = true;
        } else {
          stack.push({
            node: noEditNode,
            editsRemaining: frame.editsRemaining,
            str: frame.str.slice(1)
          });
        }
      }

      // deletion
      // can only do a deletion if we have enough edits remaining
      // and if there are characters left to delete in the string
      if (frame.editsRemaining > 0 && frame.str.length > 1) {
        var char = frame.str.charAt(1),
            deletionNode;

        if (char in frame.node.edges) {
          deletionNode = frame.node.edges[char];
        } else {
          deletionNode = new lunr.TokenSet();
          frame.node.edges[char] = deletionNode;
        }

        if (frame.str.length <= 2) {
          deletionNode.final = true;
        } else {
          stack.push({
            node: deletionNode,
            editsRemaining: frame.editsRemaining - 1,
            str: frame.str.slice(2)
          });
        }
      }

      // deletion
      // just removing the last character from the str
      if (frame.editsRemaining > 0 && frame.str.length == 1) {
        frame.node.final = true;
      }

      // substitution
      // can only do a substitution if we have enough edits remaining
      // and if there are characters left to substitute
      if (frame.editsRemaining > 0 && frame.str.length >= 1) {
        if ("*" in frame.node.edges) {
          var substitutionNode = frame.node.edges["*"];
        } else {
          var substitutionNode = new lunr.TokenSet();
          frame.node.edges["*"] = substitutionNode;
        }

        if (frame.str.length == 1) {
          substitutionNode.final = true;
        } else {
          stack.push({
            node: substitutionNode,
            editsRemaining: frame.editsRemaining - 1,
            str: frame.str.slice(1)
          });
        }
      }

      // insertion
      // can only do insertion if there are edits remaining
      if (frame.editsRemaining > 0) {
        if ("*" in frame.node.edges) {
          var insertionNode = frame.node.edges["*"];
        } else {
          var insertionNode = new lunr.TokenSet();
          frame.node.edges["*"] = insertionNode;
        }

        if (frame.str.length == 0) {
          insertionNode.final = true;
        } else {
          stack.push({
            node: insertionNode,
            editsRemaining: frame.editsRemaining - 1,
            str: frame.str
          });
        }
      }

      // transposition
      // can only do a transposition if there are edits remaining
      // and there are enough characters to transpose
      if (frame.editsRemaining > 0 && frame.str.length > 1) {
        var charA = frame.str.charAt(0),
            charB = frame.str.charAt(1),
            transposeNode;

        if (charB in frame.node.edges) {
          transposeNode = frame.node.edges[charB];
        } else {
          transposeNode = new lunr.TokenSet();
          frame.node.edges[charB] = transposeNode;
        }

        if (frame.str.length == 1) {
          transposeNode.final = true;
        } else {
          stack.push({
            node: transposeNode,
            editsRemaining: frame.editsRemaining - 1,
            str: charA + frame.str.slice(2)
          });
        }
      }
    }

    return root;
  };

  /**
   * Creates a TokenSet from a string.
   *
   * The string may contain one or more wildcard characters (*)
   * that will allow wildcard matching when intersecting with
   * another TokenSet.
   *
   * @param {string} str - The string to create a TokenSet from.
   * @returns {lunr.TokenSet}
   */
  lunr.TokenSet.fromString = function (str) {
    var node = new lunr.TokenSet(),
        root = node,
        wildcardFound = false;

    /*
     * Iterates through all characters within the passed string
     * appending a node for each character.
     *
     * As soon as a wildcard character is found then a self
     * referencing edge is introduced to continually match
     * any number of any characters.
     */
    for (var i = 0, len = str.length; i < len; i++) {
      var char = str[i],
          final = i == len - 1;

      if (char == "*") {
        wildcardFound = true;
        node.edges[char] = node;
        node.final = final;
      } else {
        var next = new lunr.TokenSet();
        next.final = final;

        node.edges[char] = next;
        node = next;

        // TODO: is this needed anymore?
        if (wildcardFound) {
          node.edges["*"] = root;
        }
      }
    }

    return root;
  };

  /**
   * Converts this TokenSet into an array of strings
   * contained within the TokenSet.
   *
   * @returns {string[]}
   */
  lunr.TokenSet.prototype.toArray = function () {
    var words = [];

    var stack = [{
      prefix: "",
      node: this
    }];

    while (stack.length) {
      var frame = stack.pop(),
          edges = Object.keys(frame.node.edges),
          len = edges.length;

      if (frame.node.final) {
        words.push(frame.prefix);
      }

      for (var i = 0; i < len; i++) {
        var edge = edges[i];

        stack.push({
          prefix: frame.prefix.concat(edge),
          node: frame.node.edges[edge]
        });
      }
    }

    return words;
  };

  /**
   * Generates a string representation of a TokenSet.
   *
   * This is intended to allow TokenSets to be used as keys
   * in objects, largely to aid the construction and minimisation
   * of a TokenSet. As such it is not designed to be a human
   * friendly representation of the TokenSet.
   *
   * @returns {string}
   */
  lunr.TokenSet.prototype.toString = function () {
    // NOTE: Using Object.keys here as this.edges is very likely
    // to enter 'hash-mode' with many keys being added
    //
    // avoiding a for-in loop here as it leads to the function
    // being de-optimised (at least in V8). From some simple
    // benchmarks the performance is comparable, but allowing
    // V8 to optimize may mean easy performance wins in the future.

    if (this._str) {
      return this._str;
    }

    var str = this.final ? '1' : '0',
        labels = Object.keys(this.edges).sort(),
        len = labels.length;

    for (var i = 0; i < len; i++) {
      var label = labels[i],
          node = this.edges[label];

      str = str + label + node.id;
    }

    return str;
  };

  /**
   * Returns a new TokenSet that is the intersection of
   * this TokenSet and the passed TokenSet.
   *
   * This intersection will take into account any wildcards
   * contained within the TokenSet.
   *
   * @param {lunr.TokenSet} b - An other TokenSet to intersect with.
   * @returns {lunr.TokenSet}
   */
  lunr.TokenSet.prototype.intersect = function (b) {
    var output = new lunr.TokenSet(),
        frame = undefined;

    var stack = [{
      qNode: b,
      output: output,
      node: this
    }];

    while (stack.length) {
      frame = stack.pop();

      // NOTE: As with the #toString method, we are using
      // Object.keys and a for loop instead of a for-in loop
      // as both of these objects enter 'hash' mode, causing
      // the function to be de-optimised in V8
      var qEdges = Object.keys(frame.qNode.edges),
          qLen = qEdges.length,
          nEdges = Object.keys(frame.node.edges),
          nLen = nEdges.length;

      for (var q = 0; q < qLen; q++) {
        var qEdge = qEdges[q];

        for (var n = 0; n < nLen; n++) {
          var nEdge = nEdges[n];

          if (nEdge == qEdge || qEdge == '*') {
            var node = frame.node.edges[nEdge],
                qNode = frame.qNode.edges[qEdge],
                final = node.final && qNode.final,
                next = undefined;

            if (nEdge in frame.output.edges) {
              // an edge already exists for this character
              // no need to create a new node, just set the finality
              // bit unless this node is already final
              next = frame.output.edges[nEdge];
              next.final = next.final || final;
            } else {
              // no edge exists yet, must create one
              // set the finality bit and insert it
              // into the output
              next = new lunr.TokenSet();
              next.final = final;
              frame.output.edges[nEdge] = next;
            }

            stack.push({
              qNode: qNode,
              output: next,
              node: node
            });
          }
        }
      }
    }

    return output;
  };
  lunr.TokenSet.Builder = function () {
    this.previousWord = "";
    this.root = new lunr.TokenSet();
    this.uncheckedNodes = [];
    this.minimizedNodes = {};
  };

  lunr.TokenSet.Builder.prototype.insert = function (word) {
    var node,
        commonPrefix = 0;

    if (word < this.previousWord) {
      throw new Error("Out of order word insertion");
    }

    for (var i = 0; i < word.length && i < this.previousWord.length; i++) {
      if (word[i] != this.previousWord[i]) break;
      commonPrefix++;
    }

    this.minimize(commonPrefix);

    if (this.uncheckedNodes.length == 0) {
      node = this.root;
    } else {
      node = this.uncheckedNodes[this.uncheckedNodes.length - 1].child;
    }

    for (var i = commonPrefix; i < word.length; i++) {
      var nextNode = new lunr.TokenSet(),
          char = word[i];

      node.edges[char] = nextNode;

      this.uncheckedNodes.push({
        parent: node,
        char: char,
        child: nextNode
      });

      node = nextNode;
    }

    node.final = true;
    this.previousWord = word;
  };

  lunr.TokenSet.Builder.prototype.finish = function () {
    this.minimize(0);
  };

  lunr.TokenSet.Builder.prototype.minimize = function (downTo) {
    for (var i = this.uncheckedNodes.length - 1; i >= downTo; i--) {
      var node = this.uncheckedNodes[i],
          childKey = node.child.toString();

      if (childKey in this.minimizedNodes) {
        node.parent.edges[node.char] = this.minimizedNodes[childKey];
      } else {
        // Cache the key for this node since
        // we know it can't change anymore
        node.child._str = childKey;

        this.minimizedNodes[childKey] = node.child;
      }

      this.uncheckedNodes.pop();
    }
  };
  /*!
   * lunr.Index
   * Copyright (C) 2018 Oliver Nightingale
   */

  /**
   * An index contains the built index of all documents and provides a query interface
   * to the index.
   *
   * Usually instances of lunr.Index will not be created using this constructor, instead
   * lunr.Builder should be used to construct new indexes, or lunr.Index.load should be
   * used to load previously built and serialized indexes.
   *
   * @constructor
   * @param {Object} attrs - The attributes of the built search index.
   * @param {Object} attrs.invertedIndex - An index of term/field to document reference.
   * @param {Object<string, lunr.Vector>} attrs.documentVectors - Document vectors keyed by document reference.
   * @param {lunr.TokenSet} attrs.tokenSet - An set of all corpus tokens.
   * @param {string[]} attrs.fields - The names of indexed document fields.
   * @param {lunr.Pipeline} attrs.pipeline - The pipeline to use for search terms.
   */
  lunr.Index = function (attrs) {
    this.invertedIndex = attrs.invertedIndex;
    this.fieldVectors = attrs.fieldVectors;
    this.tokenSet = attrs.tokenSet;
    this.fields = attrs.fields;
    this.pipeline = attrs.pipeline;
  };

  /**
   * A result contains details of a document matching a search query.
   * @typedef {Object} lunr.Index~Result
   * @property {string} ref - The reference of the document this result represents.
   * @property {number} score - A number between 0 and 1 representing how similar this document is to the query.
   * @property {lunr.MatchData} matchData - Contains metadata about this match including which term(s) caused the match.
   */

  /**
   * Although lunr provides the ability to create queries using lunr.Query, it also provides a simple
   * query language which itself is parsed into an instance of lunr.Query.
   *
   * For programmatically building queries it is advised to directly use lunr.Query, the query language
   * is best used for human entered text rather than program generated text.
   *
   * At its simplest queries can just be a single term, e.g. `hello`, multiple terms are also supported
   * and will be combined with OR, e.g `hello world` will match documents that contain either 'hello'
   * or 'world', though those that contain both will rank higher in the results.
   *
   * Wildcards can be included in terms to match one or more unspecified characters, these wildcards can
   * be inserted anywhere within the term, and more than one wildcard can exist in a single term. Adding
   * wildcards will increase the number of documents that will be found but can also have a negative
   * impact on query performance, especially with wildcards at the beginning of a term.
   *
   * Terms can be restricted to specific fields, e.g. `title:hello`, only documents with the term
   * hello in the title field will match this query. Using a field not present in the index will lead
   * to an error being thrown.
   *
   * Modifiers can also be added to terms, lunr supports edit distance and boost modifiers on terms. A term
   * boost will make documents matching that term score higher, e.g. `foo^5`. Edit distance is also supported
   * to provide fuzzy matching, e.g. 'hello~2' will match documents with hello with an edit distance of 2.
   * Avoid large values for edit distance to improve query performance.
   *
   * To escape special characters the backslash character '\' can be used, this allows searches to include
   * characters that would normally be considered modifiers, e.g. `foo\~2` will search for a term "foo~2" instead
   * of attempting to apply a boost of 2 to the search term "foo".
   *
   * @typedef {string} lunr.Index~QueryString
   * @example <caption>Simple single term query</caption>
   * hello
   * @example <caption>Multiple term query</caption>
   * hello world
   * @example <caption>term scoped to a field</caption>
   * title:hello
   * @example <caption>term with a boost of 10</caption>
   * hello^10
   * @example <caption>term with an edit distance of 2</caption>
   * hello~2
   */

  /**
   * Performs a search against the index using lunr query syntax.
   *
   * Results will be returned sorted by their score, the most relevant results
   * will be returned first.
   *
   * For more programmatic querying use lunr.Index#query.
   *
   * @param {lunr.Index~QueryString} queryString - A string containing a lunr query.
   * @throws {lunr.QueryParseError} If the passed query string cannot be parsed.
   * @returns {lunr.Index~Result[]}
   */
  lunr.Index.prototype.search = function (queryString) {
    return this.query(function (query) {
      var parser = new lunr.QueryParser(queryString, query);
      parser.parse();
    });
  };

  /**
   * A query builder callback provides a query object to be used to express
   * the query to perform on the index.
   *
   * @callback lunr.Index~queryBuilder
   * @param {lunr.Query} query - The query object to build up.
   * @this lunr.Query
   */

  /**
   * Performs a query against the index using the yielded lunr.Query object.
   *
   * If performing programmatic queries against the index, this method is preferred
   * over lunr.Index#search so as to avoid the additional query parsing overhead.
   *
   * A query object is yielded to the supplied function which should be used to
   * express the query to be run against the index.
   *
   * Note that although this function takes a callback parameter it is _not_ an
   * asynchronous operation, the callback is just yielded a query object to be
   * customized.
   *
   * @param {lunr.Index~queryBuilder} fn - A function that is used to build the query.
   * @returns {lunr.Index~Result[]}
   */
  lunr.Index.prototype.query = function (fn) {
    // for each query clause
    // * process terms
    // * expand terms from token set
    // * find matching documents and metadata
    // * get document vectors
    // * score documents

    var query = new lunr.Query(this.fields),
        matchingFields = Object.create(null),
        queryVectors = Object.create(null),
        termFieldCache = Object.create(null);

    fn.call(query, query);

    for (var i = 0; i < query.clauses.length; i++) {
      /*
       * Unless the pipeline has been disabled for this term, which is
       * the case for terms with wildcards, we need to pass the clause
       * term through the search pipeline. A pipeline returns an array
       * of processed terms. Pipeline functions may expand the passed
       * term, which means we may end up performing multiple index lookups
       * for a single query term.
       */
      var clause = query.clauses[i],
          terms = null;

      if (clause.usePipeline) {
        terms = this.pipeline.runString(clause.term);
      } else {
        terms = [clause.term];
      }

      for (var m = 0; m < terms.length; m++) {
        var term = terms[m];

        /*
         * Each term returned from the pipeline needs to use the same query
         * clause object, e.g. the same boost and or edit distance. The
         * simplest way to do this is to re-use the clause object but mutate
         * its term property.
         */
        clause.term = term;

        /*
         * From the term in the clause we create a token set which will then
         * be used to intersect the indexes token set to get a list of terms
         * to lookup in the inverted index
         */
        var termTokenSet = lunr.TokenSet.fromClause(clause),
            expandedTerms = this.tokenSet.intersect(termTokenSet).toArray();

        for (var j = 0; j < expandedTerms.length; j++) {
          /*
           * For each term get the posting and termIndex, this is required for
           * building the query vector.
           */
          var expandedTerm = expandedTerms[j],
              posting = this.invertedIndex[expandedTerm],
              termIndex = posting._index;

          for (var k = 0; k < clause.fields.length; k++) {
            /*
             * For each field that this query term is scoped by (by default
             * all fields are in scope) we need to get all the document refs
             * that have this term in that field.
             *
             * The posting is the entry in the invertedIndex for the matching
             * term from above.
             */
            var field = clause.fields[k],
                fieldPosting = posting[field],
                matchingDocumentRefs = Object.keys(fieldPosting),
                termField = expandedTerm + "/" + field;

            /*
             * To support field level boosts a query vector is created per
             * field. This vector is populated using the termIndex found for
             * the term and a unit value with the appropriate boost applied.
             *
             * If the query vector for this field does not exist yet it needs
             * to be created.
             */
            if (queryVectors[field] === undefined) {
              queryVectors[field] = new lunr.Vector();
            }

            /*
             * Using upsert because there could already be an entry in the vector
             * for the term we are working with. In that case we just add the scores
             * together.
             */
            queryVectors[field].upsert(termIndex, 1 * clause.boost, function (a, b) {
              return a + b;
            });

            /**
             * If we've already seen this term, field combo then we've already collected
             * the matching documents and metadata, no need to go through all that again
             */
            if (termFieldCache[termField]) {
              continue;
            }

            for (var l = 0; l < matchingDocumentRefs.length; l++) {
              /*
               * All metadata for this term/field/document triple
               * are then extracted and collected into an instance
               * of lunr.MatchData ready to be returned in the query
               * results
               */
              var matchingDocumentRef = matchingDocumentRefs[l],
                  matchingFieldRef = new lunr.FieldRef(matchingDocumentRef, field),
                  metadata = fieldPosting[matchingDocumentRef],
                  fieldMatch;

              if ((fieldMatch = matchingFields[matchingFieldRef]) === undefined) {
                matchingFields[matchingFieldRef] = new lunr.MatchData(expandedTerm, field, metadata);
              } else {
                fieldMatch.add(expandedTerm, field, metadata);
              }
            }

            termFieldCache[termField] = true;
          }
        }
      }
    }

    var matchingFieldRefs = Object.keys(matchingFields),
        results = [],
        matches = Object.create(null);

    for (var i = 0; i < matchingFieldRefs.length; i++) {
      /*
       * Currently we have document fields that match the query, but we
       * need to return documents. The matchData and scores are combined
       * from multiple fields belonging to the same document.
       *
       * Scores are calculated by field, using the query vectors created
       * above, and combined into a final document score using addition.
       */
      var fieldRef = lunr.FieldRef.fromString(matchingFieldRefs[i]),
          docRef = fieldRef.docRef,
          fieldVector = this.fieldVectors[fieldRef],
          score = queryVectors[fieldRef.fieldName].similarity(fieldVector),
          docMatch;

      if ((docMatch = matches[docRef]) !== undefined) {
        docMatch.score += score;
        docMatch.matchData.combine(matchingFields[fieldRef]);
      } else {
        var match = {
          ref: docRef,
          score: score,
          matchData: matchingFields[fieldRef]
        };
        matches[docRef] = match;
        results.push(match);
      }
    }

    /*
     * Sort the results objects by score, highest first.
     */
    return results.sort(function (a, b) {
      return b.score - a.score;
    });
  };

  /**
   * Prepares the index for JSON serialization.
   *
   * The schema for this JSON blob will be described in a
   * separate JSON schema file.
   *
   * @returns {Object}
   */
  lunr.Index.prototype.toJSON = function () {
    var invertedIndex = Object.keys(this.invertedIndex).sort().map(function (term) {
      return [term, this.invertedIndex[term]];
    }, this);

    var fieldVectors = Object.keys(this.fieldVectors).map(function (ref) {
      return [ref, this.fieldVectors[ref].toJSON()];
    }, this);

    return {
      version: lunr.version,
      fields: this.fields,
      fieldVectors: fieldVectors,
      invertedIndex: invertedIndex,
      pipeline: this.pipeline.toJSON()
    };
  };

  /**
   * Loads a previously serialized lunr.Index
   *
   * @param {Object} serializedIndex - A previously serialized lunr.Index
   * @returns {lunr.Index}
   */
  lunr.Index.load = function (serializedIndex) {
    var attrs = {},
        fieldVectors = {},
        serializedVectors = serializedIndex.fieldVectors,
        invertedIndex = {},
        serializedInvertedIndex = serializedIndex.invertedIndex,
        tokenSetBuilder = new lunr.TokenSet.Builder(),
        pipeline = lunr.Pipeline.load(serializedIndex.pipeline);

    if (serializedIndex.version != lunr.version) {
      lunr.utils.warn("Version mismatch when loading serialised index. Current version of lunr '" + lunr.version + "' does not match serialized index '" + serializedIndex.version + "'");
    }

    for (var i = 0; i < serializedVectors.length; i++) {
      var tuple = serializedVectors[i],
          ref = tuple[0],
          elements = tuple[1];

      fieldVectors[ref] = new lunr.Vector(elements);
    }

    for (var i = 0; i < serializedInvertedIndex.length; i++) {
      var tuple = serializedInvertedIndex[i],
          term = tuple[0],
          posting = tuple[1];

      tokenSetBuilder.insert(term);
      invertedIndex[term] = posting;
    }

    tokenSetBuilder.finish();

    attrs.fields = serializedIndex.fields;

    attrs.fieldVectors = fieldVectors;
    attrs.invertedIndex = invertedIndex;
    attrs.tokenSet = tokenSetBuilder.root;
    attrs.pipeline = pipeline;

    return new lunr.Index(attrs);
  };
  /*!
   * lunr.Builder
   * Copyright (C) 2018 Oliver Nightingale
   */

  /**
   * lunr.Builder performs indexing on a set of documents and
   * returns instances of lunr.Index ready for querying.
   *
   * All configuration of the index is done via the builder, the
   * fields to index, the document reference, the text processing
   * pipeline and document scoring parameters are all set on the
   * builder before indexing.
   *
   * @constructor
   * @property {string} _ref - Internal reference to the document reference field.
   * @property {string[]} _fields - Internal reference to the document fields to index.
   * @property {object} invertedIndex - The inverted index maps terms to document fields.
   * @property {object} documentTermFrequencies - Keeps track of document term frequencies.
   * @property {object} documentLengths - Keeps track of the length of documents added to the index.
   * @property {lunr.tokenizer} tokenizer - Function for splitting strings into tokens for indexing.
   * @property {lunr.Pipeline} pipeline - The pipeline performs text processing on tokens before indexing.
   * @property {lunr.Pipeline} searchPipeline - A pipeline for processing search terms before querying the index.
   * @property {number} documentCount - Keeps track of the total number of documents indexed.
   * @property {number} _b - A parameter to control field length normalization, setting this to 0 disabled normalization, 1 fully normalizes field lengths, the default value is 0.75.
   * @property {number} _k1 - A parameter to control how quickly an increase in term frequency results in term frequency saturation, the default value is 1.2.
   * @property {number} termIndex - A counter incremented for each unique term, used to identify a terms position in the vector space.
   * @property {array} metadataWhitelist - A list of metadata keys that have been whitelisted for entry in the index.
   */
  lunr.Builder = function () {
    this._ref = "id";
    this._fields = [];
    this.invertedIndex = Object.create(null);
    this.fieldTermFrequencies = {};
    this.fieldLengths = {};
    this.tokenizer = lunr.tokenizer;
    this.pipeline = new lunr.Pipeline();
    this.searchPipeline = new lunr.Pipeline();
    this.documentCount = 0;
    this._b = 0.75;
    this._k1 = 1.2;
    this.termIndex = 0;
    this.metadataWhitelist = [];
  };

  /**
   * Sets the document field used as the document reference. Every document must have this field.
   * The type of this field in the document should be a string, if it is not a string it will be
   * coerced into a string by calling toString.
   *
   * The default ref is 'id'.
   *
   * The ref should _not_ be changed during indexing, it should be set before any documents are
   * added to the index. Changing it during indexing can lead to inconsistent results.
   *
   * @param {string} ref - The name of the reference field in the document.
   */
  lunr.Builder.prototype.ref = function (ref) {
    this._ref = ref;
  };

  /**
   * Adds a field to the list of document fields that will be indexed. Every document being
   * indexed should have this field. Null values for this field in indexed documents will
   * not cause errors but will limit the chance of that document being retrieved by searches.
   *
   * All fields should be added before adding documents to the index. Adding fields after
   * a document has been indexed will have no effect on already indexed documents.
   *
   * @param {string} field - The name of a field to index in all documents.
   */
  lunr.Builder.prototype.field = function (field) {
    this._fields.push(field);
  };

  /**
   * A parameter to tune the amount of field length normalisation that is applied when
   * calculating relevance scores. A value of 0 will completely disable any normalisation
   * and a value of 1 will fully normalise field lengths. The default is 0.75. Values of b
   * will be clamped to the range 0 - 1.
   *
   * @param {number} number - The value to set for this tuning parameter.
   */
  lunr.Builder.prototype.b = function (number) {
    if (number < 0) {
      this._b = 0;
    } else if (number > 1) {
      this._b = 1;
    } else {
      this._b = number;
    }
  };

  /**
   * A parameter that controls the speed at which a rise in term frequency results in term
   * frequency saturation. The default value is 1.2. Setting this to a higher value will give
   * slower saturation levels, a lower value will result in quicker saturation.
   *
   * @param {number} number - The value to set for this tuning parameter.
   */
  lunr.Builder.prototype.k1 = function (number) {
    this._k1 = number;
  };

  /**
   * Adds a document to the index.
   *
   * Before adding fields to the index the index should have been fully setup, with the document
   * ref and all fields to index already having been specified.
   *
   * The document must have a field name as specified by the ref (by default this is 'id') and
   * it should have all fields defined for indexing, though null or undefined values will not
   * cause errors.
   *
   * @param {object} doc - The document to add to the index.
   */
  lunr.Builder.prototype.add = function (doc) {
    var docRef = doc[this._ref];

    this.documentCount += 1;

    for (var i = 0; i < this._fields.length; i++) {
      var fieldName = this._fields[i],
          field = doc[fieldName],
          tokens = this.tokenizer(field),
          terms = this.pipeline.run(tokens),
          fieldRef = new lunr.FieldRef(docRef, fieldName),
          fieldTerms = Object.create(null);

      this.fieldTermFrequencies[fieldRef] = fieldTerms;
      this.fieldLengths[fieldRef] = 0;

      // store the length of this field for this document
      this.fieldLengths[fieldRef] += terms.length;

      // calculate term frequencies for this field
      for (var j = 0; j < terms.length; j++) {
        var term = terms[j];

        if (fieldTerms[term] == undefined) {
          fieldTerms[term] = 0;
        }

        fieldTerms[term] += 1;

        // add to inverted index
        // create an initial posting if one doesn't exist
        if (this.invertedIndex[term] == undefined) {
          var posting = Object.create(null);
          posting["_index"] = this.termIndex;
          this.termIndex += 1;

          for (var k = 0; k < this._fields.length; k++) {
            posting[this._fields[k]] = Object.create(null);
          }

          this.invertedIndex[term] = posting;
        }

        // add an entry for this term/fieldName/docRef to the invertedIndex
        if (this.invertedIndex[term][fieldName][docRef] == undefined) {
          this.invertedIndex[term][fieldName][docRef] = Object.create(null);
        }

        // store all whitelisted metadata about this token in the
        // inverted index
        for (var l = 0; l < this.metadataWhitelist.length; l++) {
          var metadataKey = this.metadataWhitelist[l],
              metadata = term.metadata[metadataKey];

          if (this.invertedIndex[term][fieldName][docRef][metadataKey] == undefined) {
            this.invertedIndex[term][fieldName][docRef][metadataKey] = [];
          }

          this.invertedIndex[term][fieldName][docRef][metadataKey].push(metadata);
        }
      }
    }
  };

  /**
   * Calculates the average document length for this index
   *
   * @private
   */
  lunr.Builder.prototype.calculateAverageFieldLengths = function () {

    var fieldRefs = Object.keys(this.fieldLengths),
        numberOfFields = fieldRefs.length,
        accumulator = {},
        documentsWithField = {};

    for (var i = 0; i < numberOfFields; i++) {
      var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),
          field = fieldRef.fieldName;

      documentsWithField[field] || (documentsWithField[field] = 0);
      documentsWithField[field] += 1;

      accumulator[field] || (accumulator[field] = 0);
      accumulator[field] += this.fieldLengths[fieldRef];
    }

    for (var i = 0; i < this._fields.length; i++) {
      var field = this._fields[i];
      accumulator[field] = accumulator[field] / documentsWithField[field];
    }

    this.averageFieldLength = accumulator;
  };

  /**
   * Builds a vector space model of every document using lunr.Vector
   *
   * @private
   */
  lunr.Builder.prototype.createFieldVectors = function () {
    var fieldVectors = {},
        fieldRefs = Object.keys(this.fieldTermFrequencies),
        fieldRefsLength = fieldRefs.length,
        termIdfCache = Object.create(null);

    for (var i = 0; i < fieldRefsLength; i++) {
      var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),
          field = fieldRef.fieldName,
          fieldLength = this.fieldLengths[fieldRef],
          fieldVector = new lunr.Vector(),
          termFrequencies = this.fieldTermFrequencies[fieldRef],
          terms = Object.keys(termFrequencies),
          termsLength = terms.length;

      for (var j = 0; j < termsLength; j++) {
        var term = terms[j],
            tf = termFrequencies[term],
            termIndex = this.invertedIndex[term]._index,
            idf,
            score,
            scoreWithPrecision;

        if (termIdfCache[term] === undefined) {
          idf = lunr.idf(this.invertedIndex[term], this.documentCount);
          termIdfCache[term] = idf;
        } else {
          idf = termIdfCache[term];
        }

        score = idf * ((this._k1 + 1) * tf) / (this._k1 * (1 - this._b + this._b * (fieldLength / this.averageFieldLength[field])) + tf);
        scoreWithPrecision = Math.round(score * 1000) / 1000;
        // Converts 1.23456789 to 1.234.
        // Reducing the precision so that the vectors take up less
        // space when serialised. Doing it now so that they behave
        // the same before and after serialisation. Also, this is
        // the fastest approach to reducing a number's precision in
        // JavaScript.

        fieldVector.insert(termIndex, scoreWithPrecision);
      }

      fieldVectors[fieldRef] = fieldVector;
    }

    this.fieldVectors = fieldVectors;
  };

  /**
   * Creates a token set of all tokens in the index using lunr.TokenSet
   *
   * @private
   */
  lunr.Builder.prototype.createTokenSet = function () {
    this.tokenSet = lunr.TokenSet.fromArray(Object.keys(this.invertedIndex).sort());
  };

  /**
   * Builds the index, creating an instance of lunr.Index.
   *
   * This completes the indexing process and should only be called
   * once all documents have been added to the index.
   *
   * @returns {lunr.Index}
   */
  lunr.Builder.prototype.build = function () {
    this.calculateAverageFieldLengths();
    this.createFieldVectors();
    this.createTokenSet();

    return new lunr.Index({
      invertedIndex: this.invertedIndex,
      fieldVectors: this.fieldVectors,
      tokenSet: this.tokenSet,
      fields: this._fields,
      pipeline: this.searchPipeline
    });
  };

  /**
   * Applies a plugin to the index builder.
   *
   * A plugin is a function that is called with the index builder as its context.
   * Plugins can be used to customise or extend the behaviour of the index
   * in some way. A plugin is just a function, that encapsulated the custom
   * behaviour that should be applied when building the index.
   *
   * The plugin function will be called with the index builder as its argument, additional
   * arguments can also be passed when calling use. The function will be called
   * with the index builder as its context.
   *
   * @param {Function} plugin The plugin to apply.
   */
  lunr.Builder.prototype.use = function (fn) {
    var args = Array.prototype.slice.call(arguments, 1);
    args.unshift(this);
    fn.apply(this, args);
  };
  /**
   * Contains and collects metadata about a matching document.
   * A single instance of lunr.MatchData is returned as part of every
   * lunr.Index~Result.
   *
   * @constructor
   * @param {string} term - The term this match data is associated with
   * @param {string} field - The field in which the term was found
   * @param {object} metadata - The metadata recorded about this term in this field
   * @property {object} metadata - A cloned collection of metadata associated with this document.
   * @see {@link lunr.Index~Result}
   */
  lunr.MatchData = function (term, field, metadata) {
    var clonedMetadata = Object.create(null),
        metadataKeys = Object.keys(metadata);

    // Cloning the metadata to prevent the original
    // being mutated during match data combination.
    // Metadata is kept in an array within the inverted
    // index so cloning the data can be done with
    // Array#slice
    for (var i = 0; i < metadataKeys.length; i++) {
      var key = metadataKeys[i];
      clonedMetadata[key] = metadata[key].slice();
    }

    this.metadata = Object.create(null);
    this.metadata[term] = Object.create(null);
    this.metadata[term][field] = clonedMetadata;
  };

  /**
   * An instance of lunr.MatchData will be created for every term that matches a
   * document. However only one instance is required in a lunr.Index~Result. This
   * method combines metadata from another instance of lunr.MatchData with this
   * objects metadata.
   *
   * @param {lunr.MatchData} otherMatchData - Another instance of match data to merge with this one.
   * @see {@link lunr.Index~Result}
   */
  lunr.MatchData.prototype.combine = function (otherMatchData) {
    var terms = Object.keys(otherMatchData.metadata);

    for (var i = 0; i < terms.length; i++) {
      var term = terms[i],
          fields = Object.keys(otherMatchData.metadata[term]);

      if (this.metadata[term] == undefined) {
        this.metadata[term] = Object.create(null);
      }

      for (var j = 0; j < fields.length; j++) {
        var field = fields[j],
            keys = Object.keys(otherMatchData.metadata[term][field]);

        if (this.metadata[term][field] == undefined) {
          this.metadata[term][field] = Object.create(null);
        }

        for (var k = 0; k < keys.length; k++) {
          var key = keys[k];

          if (this.metadata[term][field][key] == undefined) {
            this.metadata[term][field][key] = otherMatchData.metadata[term][field][key];
          } else {
            this.metadata[term][field][key] = this.metadata[term][field][key].concat(otherMatchData.metadata[term][field][key]);
          }
        }
      }
    }
  };

  /**
   * Add metadata for a term/field pair to this instance of match data.
   *
   * @param {string} term - The term this match data is associated with
   * @param {string} field - The field in which the term was found
   * @param {object} metadata - The metadata recorded about this term in this field
   */
  lunr.MatchData.prototype.add = function (term, field, metadata) {
    if (!(term in this.metadata)) {
      this.metadata[term] = Object.create(null);
      this.metadata[term][field] = metadata;
      return;
    }

    if (!(field in this.metadata[term])) {
      this.metadata[term][field] = metadata;
      return;
    }

    var metadataKeys = Object.keys(metadata);

    for (var i = 0; i < metadataKeys.length; i++) {
      var key = metadataKeys[i];

      if (key in this.metadata[term][field]) {
        this.metadata[term][field][key] = this.metadata[term][field][key].concat(metadata[key]);
      } else {
        this.metadata[term][field][key] = metadata[key];
      }
    }
  };
  /**
   * A lunr.Query provides a programmatic way of defining queries to be performed
   * against a {@link lunr.Index}.
   *
   * Prefer constructing a lunr.Query using the {@link lunr.Index#query} method
   * so the query object is pre-initialized with the right index fields.
   *
   * @constructor
   * @property {lunr.Query~Clause[]} clauses - An array of query clauses.
   * @property {string[]} allFields - An array of all available fields in a lunr.Index.
   */
  lunr.Query = function (allFields) {
    this.clauses = [];
    this.allFields = allFields;
  };

  /**
   * Constants for indicating what kind of automatic wildcard insertion will be used when constructing a query clause.
   *
   * This allows wildcards to be added to the beginning and end of a term without having to manually do any string
   * concatenation.
   *
   * The wildcard constants can be bitwise combined to select both leading and trailing wildcards.
   *
   * @constant
   * @default
   * @property {number} wildcard.NONE - The term will have no wildcards inserted, this is the default behaviour
   * @property {number} wildcard.LEADING - Prepend the term with a wildcard, unless a leading wildcard already exists
   * @property {number} wildcard.TRAILING - Append a wildcard to the term, unless a trailing wildcard already exists
   * @see lunr.Query~Clause
   * @see lunr.Query#clause
   * @see lunr.Query#term
   * @example <caption>query term with trailing wildcard</caption>
   * query.term('foo', { wildcard: lunr.Query.wildcard.TRAILING })
   * @example <caption>query term with leading and trailing wildcard</caption>
   * query.term('foo', {
   *   wildcard: lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING
   * })
   */
  lunr.Query.wildcard = new String("*");
  lunr.Query.wildcard.NONE = 0;
  lunr.Query.wildcard.LEADING = 1;
  lunr.Query.wildcard.TRAILING = 2;

  /**
   * A single clause in a {@link lunr.Query} contains a term and details on how to
   * match that term against a {@link lunr.Index}.
   *
   * @typedef {Object} lunr.Query~Clause
   * @property {string[]} fields - The fields in an index this clause should be matched against.
   * @property {number} [boost=1] - Any boost that should be applied when matching this clause.
   * @property {number} [editDistance] - Whether the term should have fuzzy matching applied, and how fuzzy the match should be.
   * @property {boolean} [usePipeline] - Whether the term should be passed through the search pipeline.
   * @property {number} [wildcard=0] - Whether the term should have wildcards appended or prepended.
   */

  /**
   * Adds a {@link lunr.Query~Clause} to this query.
   *
   * Unless the clause contains the fields to be matched all fields will be matched. In addition
   * a default boost of 1 is applied to the clause.
   *
   * @param {lunr.Query~Clause} clause - The clause to add to this query.
   * @see lunr.Query~Clause
   * @returns {lunr.Query}
   */
  lunr.Query.prototype.clause = function (clause) {
    if (!('fields' in clause)) {
      clause.fields = this.allFields;
    }

    if (!('boost' in clause)) {
      clause.boost = 1;
    }

    if (!('usePipeline' in clause)) {
      clause.usePipeline = true;
    }

    if (!('wildcard' in clause)) {
      clause.wildcard = lunr.Query.wildcard.NONE;
    }

    if (clause.wildcard & lunr.Query.wildcard.LEADING && clause.term.charAt(0) != lunr.Query.wildcard) {
      clause.term = "*" + clause.term;
    }

    if (clause.wildcard & lunr.Query.wildcard.TRAILING && clause.term.slice(-1) != lunr.Query.wildcard) {
      clause.term = "" + clause.term + "*";
    }

    this.clauses.push(clause);

    return this;
  };

  /**
   * Adds a term to the current query, under the covers this will create a {@link lunr.Query~Clause}
   * to the list of clauses that make up this query.
   *
   * @param {string} term - The term to add to the query.
   * @param {Object} [options] - Any additional properties to add to the query clause.
   * @returns {lunr.Query}
   * @see lunr.Query#clause
   * @see lunr.Query~Clause
   * @example <caption>adding a single term to a query</caption>
   * query.term("foo")
   * @example <caption>adding a single term to a query and specifying search fields, term boost and automatic trailing wildcard</caption>
   * query.term("foo", {
   *   fields: ["title"],
   *   boost: 10,
   *   wildcard: lunr.Query.wildcard.TRAILING
   * })
   */
  lunr.Query.prototype.term = function (term, options) {
    var clause = options || {};
    clause.term = term;

    this.clause(clause);

    return this;
  };
  lunr.QueryParseError = function (message, start, end) {
    this.name = "QueryParseError";
    this.message = message;
    this.start = start;
    this.end = end;
  };

  lunr.QueryParseError.prototype = new Error();
  lunr.QueryLexer = function (str) {
    this.lexemes = [];
    this.str = str;
    this.length = str.length;
    this.pos = 0;
    this.start = 0;
    this.escapeCharPositions = [];
  };

  lunr.QueryLexer.prototype.run = function () {
    var state = lunr.QueryLexer.lexText;

    while (state) {
      state = state(this);
    }
  };

  lunr.QueryLexer.prototype.sliceString = function () {
    var subSlices = [],
        sliceStart = this.start,
        sliceEnd = this.pos;

    for (var i = 0; i < this.escapeCharPositions.length; i++) {
      sliceEnd = this.escapeCharPositions[i];
      subSlices.push(this.str.slice(sliceStart, sliceEnd));
      sliceStart = sliceEnd + 1;
    }

    subSlices.push(this.str.slice(sliceStart, this.pos));
    this.escapeCharPositions.length = 0;

    return subSlices.join('');
  };

  lunr.QueryLexer.prototype.emit = function (type) {
    this.lexemes.push({
      type: type,
      str: this.sliceString(),
      start: this.start,
      end: this.pos
    });

    this.start = this.pos;
  };

  lunr.QueryLexer.prototype.escapeCharacter = function () {
    this.escapeCharPositions.push(this.pos - 1);
    this.pos += 1;
  };

  lunr.QueryLexer.prototype.next = function () {
    if (this.pos >= this.length) {
      return lunr.QueryLexer.EOS;
    }

    var char = this.str.charAt(this.pos);
    this.pos += 1;
    return char;
  };

  lunr.QueryLexer.prototype.width = function () {
    return this.pos - this.start;
  };

  lunr.QueryLexer.prototype.ignore = function () {
    if (this.start == this.pos) {
      this.pos += 1;
    }

    this.start = this.pos;
  };

  lunr.QueryLexer.prototype.backup = function () {
    this.pos -= 1;
  };

  lunr.QueryLexer.prototype.acceptDigitRun = function () {
    var char, charCode;

    do {
      char = this.next();
      charCode = char.charCodeAt(0);
    } while (charCode > 47 && charCode < 58);

    if (char != lunr.QueryLexer.EOS) {
      this.backup();
    }
  };

  lunr.QueryLexer.prototype.more = function () {
    return this.pos < this.length;
  };

  lunr.QueryLexer.EOS = 'EOS';
  lunr.QueryLexer.FIELD = 'FIELD';
  lunr.QueryLexer.TERM = 'TERM';
  lunr.QueryLexer.EDIT_DISTANCE = 'EDIT_DISTANCE';
  lunr.QueryLexer.BOOST = 'BOOST';

  lunr.QueryLexer.lexField = function (lexer) {
    lexer.backup();
    lexer.emit(lunr.QueryLexer.FIELD);
    lexer.ignore();
    return lunr.QueryLexer.lexText;
  };

  lunr.QueryLexer.lexTerm = function (lexer) {
    if (lexer.width() > 1) {
      lexer.backup();
      lexer.emit(lunr.QueryLexer.TERM);
    }

    lexer.ignore();

    if (lexer.more()) {
      return lunr.QueryLexer.lexText;
    }
  };

  lunr.QueryLexer.lexEditDistance = function (lexer) {
    lexer.ignore();
    lexer.acceptDigitRun();
    lexer.emit(lunr.QueryLexer.EDIT_DISTANCE);
    return lunr.QueryLexer.lexText;
  };

  lunr.QueryLexer.lexBoost = function (lexer) {
    lexer.ignore();
    lexer.acceptDigitRun();
    lexer.emit(lunr.QueryLexer.BOOST);
    return lunr.QueryLexer.lexText;
  };

  lunr.QueryLexer.lexEOS = function (lexer) {
    if (lexer.width() > 0) {
      lexer.emit(lunr.QueryLexer.TERM);
    }
  };

  // This matches the separator used when tokenising fields
  // within a document. These should match otherwise it is
  // not possible to search for some tokens within a document.
  //
  // It is possible for the user to change the separator on the
  // tokenizer so it _might_ clash with any other of the special
  // characters already used within the search string, e.g. :.
  //
  // This means that it is possible to change the separator in
  // such a way that makes some words unsearchable using a search
  // string.
  lunr.QueryLexer.termSeparator = lunr.tokenizer.separator;

  lunr.QueryLexer.lexText = function (lexer) {
    while (true) {
      var char = lexer.next();

      if (char == lunr.QueryLexer.EOS) {
        return lunr.QueryLexer.lexEOS;
      }

      // Escape character is '\'
      if (char.charCodeAt(0) == 92) {
        lexer.escapeCharacter();
        continue;
      }

      if (char == ":") {
        return lunr.QueryLexer.lexField;
      }

      if (char == "~") {
        lexer.backup();
        if (lexer.width() > 0) {
          lexer.emit(lunr.QueryLexer.TERM);
        }
        return lunr.QueryLexer.lexEditDistance;
      }

      if (char == "^") {
        lexer.backup();
        if (lexer.width() > 0) {
          lexer.emit(lunr.QueryLexer.TERM);
        }
        return lunr.QueryLexer.lexBoost;
      }

      if (char.match(lunr.QueryLexer.termSeparator)) {
        return lunr.QueryLexer.lexTerm;
      }
    }
  };

  lunr.QueryParser = function (str, query) {
    this.lexer = new lunr.QueryLexer(str);
    this.query = query;
    this.currentClause = {};
    this.lexemeIdx = 0;
  };

  lunr.QueryParser.prototype.parse = function () {
    this.lexer.run();
    this.lexemes = this.lexer.lexemes;

    var state = lunr.QueryParser.parseFieldOrTerm;

    while (state) {
      state = state(this);
    }

    return this.query;
  };

  lunr.QueryParser.prototype.peekLexeme = function () {
    return this.lexemes[this.lexemeIdx];
  };

  lunr.QueryParser.prototype.consumeLexeme = function () {
    var lexeme = this.peekLexeme();
    this.lexemeIdx += 1;
    return lexeme;
  };

  lunr.QueryParser.prototype.nextClause = function () {
    var completedClause = this.currentClause;
    this.query.clause(completedClause);
    this.currentClause = {};
  };

  lunr.QueryParser.parseFieldOrTerm = function (parser) {
    var lexeme = parser.peekLexeme();

    if (lexeme == undefined) {
      return;
    }

    switch (lexeme.type) {
      case lunr.QueryLexer.FIELD:
        return lunr.QueryParser.parseField;
      case lunr.QueryLexer.TERM:
        return lunr.QueryParser.parseTerm;
      default:
        var errorMessage = "expected either a field or a term, found " + lexeme.type;

        if (lexeme.str.length >= 1) {
          errorMessage += " with value '" + lexeme.str + "'";
        }

        throw new lunr.QueryParseError(errorMessage, lexeme.start, lexeme.end);
    }
  };

  lunr.QueryParser.parseField = function (parser) {
    var lexeme = parser.consumeLexeme();

    if (lexeme == undefined) {
      return;
    }

    if (parser.query.allFields.indexOf(lexeme.str) == -1) {
      var possibleFields = parser.query.allFields.map(function (f) {
        return "'" + f + "'";
      }).join(', '),
          errorMessage = "unrecognised field '" + lexeme.str + "', possible fields: " + possibleFields;

      throw new lunr.QueryParseError(errorMessage, lexeme.start, lexeme.end);
    }

    parser.currentClause.fields = [lexeme.str];

    var nextLexeme = parser.peekLexeme();

    if (nextLexeme == undefined) {
      var errorMessage = "expecting term, found nothing";
      throw new lunr.QueryParseError(errorMessage, lexeme.start, lexeme.end);
    }

    switch (nextLexeme.type) {
      case lunr.QueryLexer.TERM:
        return lunr.QueryParser.parseTerm;
      default:
        var errorMessage = "expecting term, found '" + nextLexeme.type + "'";
        throw new lunr.QueryParseError(errorMessage, nextLexeme.start, nextLexeme.end);
    }
  };

  lunr.QueryParser.parseTerm = function (parser) {
    var lexeme = parser.consumeLexeme();

    if (lexeme == undefined) {
      return;
    }

    parser.currentClause.term = lexeme.str.toLowerCase();

    if (lexeme.str.indexOf("*") != -1) {
      parser.currentClause.usePipeline = false;
    }

    var nextLexeme = parser.peekLexeme();

    if (nextLexeme == undefined) {
      parser.nextClause();
      return;
    }

    switch (nextLexeme.type) {
      case lunr.QueryLexer.TERM:
        parser.nextClause();
        return lunr.QueryParser.parseTerm;
      case lunr.QueryLexer.FIELD:
        parser.nextClause();
        return lunr.QueryParser.parseField;
      case lunr.QueryLexer.EDIT_DISTANCE:
        return lunr.QueryParser.parseEditDistance;
      case lunr.QueryLexer.BOOST:
        return lunr.QueryParser.parseBoost;
      default:
        var errorMessage = "Unexpected lexeme type '" + nextLexeme.type + "'";
        throw new lunr.QueryParseError(errorMessage, nextLexeme.start, nextLexeme.end);
    }
  };

  lunr.QueryParser.parseEditDistance = function (parser) {
    var lexeme = parser.consumeLexeme();

    if (lexeme == undefined) {
      return;
    }

    var editDistance = parseInt(lexeme.str, 10);

    if (isNaN(editDistance)) {
      var errorMessage = "edit distance must be numeric";
      throw new lunr.QueryParseError(errorMessage, lexeme.start, lexeme.end);
    }

    parser.currentClause.editDistance = editDistance;

    var nextLexeme = parser.peekLexeme();

    if (nextLexeme == undefined) {
      parser.nextClause();
      return;
    }

    switch (nextLexeme.type) {
      case lunr.QueryLexer.TERM:
        parser.nextClause();
        return lunr.QueryParser.parseTerm;
      case lunr.QueryLexer.FIELD:
        parser.nextClause();
        return lunr.QueryParser.parseField;
      case lunr.QueryLexer.EDIT_DISTANCE:
        return lunr.QueryParser.parseEditDistance;
      case lunr.QueryLexer.BOOST:
        return lunr.QueryParser.parseBoost;
      default:
        var errorMessage = "Unexpected lexeme type '" + nextLexeme.type + "'";
        throw new lunr.QueryParseError(errorMessage, nextLexeme.start, nextLexeme.end);
    }
  };

  lunr.QueryParser.parseBoost = function (parser) {
    var lexeme = parser.consumeLexeme();

    if (lexeme == undefined) {
      return;
    }

    var boost = parseInt(lexeme.str, 10);

    if (isNaN(boost)) {
      var errorMessage = "boost must be numeric";
      throw new lunr.QueryParseError(errorMessage, lexeme.start, lexeme.end);
    }

    parser.currentClause.boost = boost;

    var nextLexeme = parser.peekLexeme();

    if (nextLexeme == undefined) {
      parser.nextClause();
      return;
    }

    switch (nextLexeme.type) {
      case lunr.QueryLexer.TERM:
        parser.nextClause();
        return lunr.QueryParser.parseTerm;
      case lunr.QueryLexer.FIELD:
        parser.nextClause();
        return lunr.QueryParser.parseField;
      case lunr.QueryLexer.EDIT_DISTANCE:
        return lunr.QueryParser.parseEditDistance;
      case lunr.QueryLexer.BOOST:
        return lunr.QueryParser.parseBoost;
      default:
        var errorMessage = "Unexpected lexeme type '" + nextLexeme.type + "'";
        throw new lunr.QueryParseError(errorMessage, nextLexeme.start, nextLexeme.end);
    }
  }

  /**
   * export the module via AMD, CommonJS or as a browser global
   * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js
   */
  ;(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
      // AMD. Register as an anonymous module.
      define(factory);
    } else if ((typeof exports === "undefined" ? "undefined" : _typeof3(exports)) === 'object') {
      /**
       * Node. Does not work with strict CommonJS, but
       * only CommonJS-like enviroments that support module.exports,
       * like Node.
       */
      module.exports = factory();
    } else {
      // Browser globals (root is window)
      root.lunr = factory();
    }
  })(this, function () {
    /**
     * Just return a value to define the module export.
     * This example returns an object, but the module
     * can return a function as the exported value.
     */
    return lunr;
  });
})();

/* global jQuery, lunr, SEARCH_INDEX_URL, SEARCH_DATA_URL */

(function ($) {
  var dataRequest = void 0;
  var dataJSON = void 0;
  var indexJSON = void 0;
  var idx = void 0;
  var $searchInput = void 0;

  function searchEngine(query, syncResults) {
    var results = idx.search(query);
    syncResults(results);
  }

  function initSearchEngine() {
    return $.when(
    // Get the prebuilt index
    $.ajax({
      url: SEARCH_INDEX_URL,
      dataType: 'json'
    }),

    // Get the search data
    $.ajax({
      url: SEARCH_DATA_URL,
      dataType: 'json'
    })).then(function (indexAjax, dataAjax) {
      indexJSON = JSON.parse(JSON.stringify(indexAjax[0]));
      dataJSON = JSON.parse(JSON.stringify(dataAjax[0]));
      idx = lunr.Index.load(indexJSON);
    });
  }

  function initTypeahead() {
    $searchInput.typeahead({
      hint: false,
      highlight: true,
      minLength: 3
    }, {
      name: 'pages-data',
      displayKey: function displayKey(obj) {
        var suggestion = dataJSON[obj.ref];
        return suggestion.title;
      },

      source: searchEngine,
      templates: {
        suggestion: function suggestion(obj) {
          var suggestion = dataJSON[obj.ref];
          return "<div>" + suggestion.title + "</div>";
        },
        empty: function empty() {
          return '<div class="text-muted">No results found.</div>';
        }
      }
    }).on('typeahead:selected', function (event, obj) {
      var suggestion = dataJSON[obj.ref];
      window.location = suggestion.url;
    }).on('typeahead:asyncreceive', function () {
      jQuery('.tt-menu').scrollTop(0);
    });
  }

  function init() {
    $searchInput = $('#afd-search-input');

    dataRequest = initSearchEngine();
    dataRequest.done(initTypeahead);
  }

  init();
})(jQuery);

/*!
 * JavaScript for Athena Framework's documentation, a derivative of
 * JavaScript for Bootstrap's docs by The Bootstrap Authors and Twitter, Inc.
 *
 * Used under and licensed under the Creative Commons Attribution 3.0 Unported
 * License (https://creativecommons.org/licenses/by/3.0/).
 */

/* global Clipboard, anchors, Holder */

(function ($) {
  'use strict';

  $(function () {

    // Tooltip and popover demos
    $('.tooltip-demo').tooltip({
      selector: '[data-toggle="tooltip"]',
      container: 'body'
    });

    $('[data-toggle="popover"]').popover();

    // Demos within modals
    $('.tooltip-test').tooltip();
    $('.popover-test').popover();

    // Indeterminate checkbox example
    $('.afd-example-indeterminate [type="checkbox"]').prop('indeterminate', true);

    // Disable empty links in docs examples
    $('.afd-content [href="#"]').click(function (e) {
      e.preventDefault();
    });

    // Modal relatedTarget demo
    $('#exampleModal').on('show.bs.modal', function (event) {
      var $button = $(event.relatedTarget); // Button that triggered the modal
      var recipient = $button.data('whatever'); // Extract info from data-* attributes
      // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
      // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
      var $modal = $(this);
      $modal.find('.modal-title').text('New message to ' + recipient);
      $modal.find('.modal-body input').val(recipient);
    });

    // Activate animated progress bar
    $('.afd-toggle-animated-progress').on('click', function () {
      $(this).siblings('.progress').find('.progress-bar-striped').toggleClass('progress-bar-animated');
    });

    // Insert copy to clipboard button before .highlight
    $('.highlight').each(function () {
      var btnHtml = '<div class="afd-clipboard"><span class="btn-clipboard" title="Copy to clipboard">Copy</span></div>';
      $(this).before(btnHtml);
      $('.btn-clipboard').tooltip();
    });

    var clipboard = new Clipboard('.btn-clipboard', {
      target: function target(trigger) {
        return trigger.parentNode.nextElementSibling;
      }
    });

    clipboard.on('success', function (e) {
      $(e.trigger).attr('title', 'Copied!').tooltip('_fixTitle').tooltip('show').attr('title', 'Copy to clipboard').tooltip('_fixTitle');

      e.clearSelection();
    });

    clipboard.on('error', function (e) {
      var modifierKey = /Mac/i.test(navigator.userAgent) ? "\u2318" : 'Ctrl-';
      var fallbackMsg = 'Press ' + modifierKey + 'C to copy';

      $(e.trigger).attr('title', fallbackMsg).tooltip('_fixTitle').tooltip('show').attr('title', 'Copy to clipboard').tooltip('_fixTitle');
    });
  });
})(jQuery);(function () {
  'use strict';

  anchors.options.placement = 'left';
  anchors.add('.afd-content > h1, .afd-content > h2, .afd-content > h3, .afd-content > h4, .afd-content > h5');

  Holder.addTheme('gray', {
    bg: '#777',
    fg: 'rgba(255,255,255,.75)',
    font: 'Helvetica',
    fontweight: 'normal'
  });
})();